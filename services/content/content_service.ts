// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { ExpressionEnum, ExpressionID, ExpressionString } from "../wellknown/expression"
import { Fragment } from "./fragment"

interface Client {
  call<R, E, O>(verb: string, url: string, args: R, opts?: any): Promise<E>;
}

export class ContentService {
  private readonly cli: Client;
  private readonly url: string;

  constructor(cli: Client, url: string = 'https://api.eolymp.com') {
    this.cli = cli;
    this.url = url;
  }

  DescribeFragment(input: DescribeFragmentInput, opts?: any): Promise<DescribeFragmentOutput> {
    const path = "/content/fragments/"+encodeURIComponent(input.fragmentId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.fragmentId);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  ListFragments(input: ListFragmentsInput, opts?: any): Promise<ListFragmentsOutput> {
    const path = "/content/fragments";

    return this.cli.call("GET", this.url+path, input, opts);
  }

  CreateFragment(input: CreateFragmentInput, opts?: any): Promise<CreateFragmentOutput> {
    const path = "/content/fragments";

    return this.cli.call("POST", this.url+path, input, opts);
  }

  UpdateFragment(input: UpdateFragmentInput, opts?: any): Promise<UpdateFragmentOutput> {
    const path = "/content/fragments/"+encodeURIComponent(input.fragmentId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.fragmentId);

    return this.cli.call("PUT", this.url+path, input, opts);
  }

  DeleteFragment(input: DeleteFragmentInput, opts?: any): Promise<DeleteFragmentOutput> {
    const path = "/content/fragments/"+encodeURIComponent(input.fragmentId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.fragmentId);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }

  DescribePath(input: DescribePathInput, opts?: any): Promise<DescribePathOutput> {
    const path = "/content/path";

    return this.cli.call("GET", this.url+path, input, opts);
  }

  ListPaths(input: ListPathsInput, opts?: any): Promise<ListPathsOutput> {
    const path = "/content/paths";

    return this.cli.call("GET", this.url+path, input, opts);
  }

  ListParents(input: ListParentsInput, opts?: any): Promise<ListParentsOutput> {
    const path = "/content/parents";

    return this.cli.call("GET", this.url+path, input, opts);
  }
}

export type DescribeFragmentInput = {
  fragmentId?: string;
  render?: boolean;
}

export type DescribeFragmentOutput = {
  fragment?: Fragment;
}

export type ListFragmentsInput = {
  render?: boolean;
  offset?: number;
  size?: number;
  filters?: ListFragmentsInput_Filter;
}

export type ListFragmentsInput_Filter = {
  query?: string;
  id?: ExpressionID[];
  path?: ExpressionString[];
  locale?: ExpressionEnum[];
  label?: ExpressionEnum[];
}

export type ListFragmentsOutput = {
  total?: number;
  items?: Fragment[];
}

export type CreateFragmentInput = {
  fragment?: Fragment;
}

export type CreateFragmentOutput = {
  fragmentId?: string;
}

export type UpdateFragmentInput = {
  fragmentId?: string;
  fragment?: Fragment;
}

export type UpdateFragmentOutput = Record<string, unknown>;

export type DeleteFragmentInput = {
  fragmentId?: string;
}

export type DeleteFragmentOutput = Record<string, unknown>;

export type DescribePathInput = {
  path?: string;
  locale?: string;
  render?: boolean;
}

export type DescribePathOutput = {
  fragment?: Fragment;
}

export type ListPathsInput = {
  locale?: string;
  render?: boolean;
  offset?: number;
  size?: number;
  filters?: ListPathsInput_Filter;
}

export type ListPathsInput_Filter = {
  query?: string;
  path?: ExpressionString[];
  label?: ExpressionEnum[];
}

export type ListPathsOutput = {
  total?: number;
  items?: Fragment[];
}

export type ListParentsInput = {
  path?: string;
  locale?: string;
  render?: boolean;
}

export type ListParentsOutput = {
  total?: number;
  items?: Fragment[];
}

