// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { ExpressionEnum, ExpressionID, ExpressionString } from "../wellknown/expression"
import { Fragment } from "./fragment"
import { Variant } from "./variant"

interface Client {
  call<R, E, O>(verb: string, url: string, args: R, opts?: any): Promise<E>;
}

export class ContentService {
  private readonly cli: Client;
  private readonly url: string;

  constructor(cli: Client, url: string = 'https://api.eolymp.com') {
    this.cli = cli;
    this.url = url;
  }

  DescribeFragment(input: DescribeFragmentInput, opts?: any): Promise<DescribeFragmentOutput> {
    const path = "/content/fragments/"+encodeURIComponent(input.fragmentId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.fragmentId);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  ListFragments(input: ListFragmentsInput, opts?: any): Promise<ListFragmentsOutput> {
    const path = "/content/fragments";

    return this.cli.call("GET", this.url+path, input, opts);
  }

  CreateFragment(input: CreateFragmentInput, opts?: any): Promise<CreateFragmentOutput> {
    const path = "/content/fragments";

    return this.cli.call("POST", this.url+path, input, opts);
  }

  UpdateFragment(input: UpdateFragmentInput, opts?: any): Promise<UpdateFragmentOutput> {
    const path = "/content/fragments/"+encodeURIComponent(input.fragmentId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.fragmentId);

    return this.cli.call("PUT", this.url+path, input, opts);
  }

  DeleteFragment(input: DeleteFragmentInput, opts?: any): Promise<DeleteFragmentOutput> {
    const path = "/content/fragments/"+encodeURIComponent(input.fragmentId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.fragmentId);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }

  TranslateFragments(input: TranslateFragmentsInput, opts?: any): Promise<TranslateFragmentsOutput> {
    const path = "/content/fragments:translate";

    return this.cli.call("POST", this.url+path, input, opts);
  }

  DescribeVariant(input: DescribeVariantInput, opts?: any): Promise<DescribeVariantOutput> {
    const path = "/content/fragments/"+encodeURIComponent(input.fragmentId||'')+"/variants/"+encodeURIComponent(input.variantId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.fragmentId);
    delete(input.variantId);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  ListVariants(input: ListVariantsInput, opts?: any): Promise<ListVariantsOutput> {
    const path = "/content/fragments/"+encodeURIComponent(input.fragmentId||'')+"/variants";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.fragmentId);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  CreateVariant(input: CreateVariantInput, opts?: any): Promise<CreateVariantOutput> {
    const path = "/content/fragments/"+encodeURIComponent(input.fragmentId||'')+"/variants";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.fragmentId);

    return this.cli.call("POST", this.url+path, input, opts);
  }

  UpdateVariant(input: UpdateVariantInput, opts?: any): Promise<UpdateVariantOutput> {
    const path = "/content/fragments/"+encodeURIComponent(input.fragmentId||'')+"/variants/"+encodeURIComponent(input.variantId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.fragmentId);
    delete(input.variantId);

    return this.cli.call("PUT", this.url+path, input, opts);
  }

  DeleteVariant(input: DeleteVariantInput, opts?: any): Promise<DeleteVariantOutput> {
    const path = "/content/fragments/"+encodeURIComponent(input.fragmentId||'')+"/variants/"+encodeURIComponent(input.variantId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.fragmentId);
    delete(input.variantId);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }

  DescribePath(input: DescribePathInput, opts?: any): Promise<DescribePathOutput> {
    const path = "/content/path";

    return this.cli.call("GET", this.url+path, input, opts);
  }

  ListParents(input: ListParentsInput, opts?: any): Promise<ListParentsOutput> {
    const path = "/content/parents";

    return this.cli.call("GET", this.url+path, input, opts);
  }
}

export type DescribeFragmentInput = {
  fragmentId?: string;
  extra?: string[];
}

export type DescribeFragmentOutput = {
  fragment?: Fragment;
}

export type ListFragmentsInput = {
  offset?: number;
  size?: number;
  filters?: ListFragmentsInput_Filter;
  sort?: string;
  order?: string;
  locale?: string;
  extra?: string[];
}

export type ListFragmentsInput_Filter = {
  query?: string;
  id?: ExpressionID[];
  path?: ExpressionString[];
  locale?: ExpressionEnum[];
  label?: ExpressionEnum[];
}

export type ListFragmentsOutput = {
  total?: number;
  items?: Fragment[];
}

export type CreateFragmentInput = {
  fragment?: Fragment;
}

export type CreateFragmentOutput = {
  fragmentId?: string;
}

export type UpdateFragmentInput = {
  patch?: string[];
  fragmentId?: string;
  fragment?: Fragment;
}

export type UpdateFragmentOutput = Record<string, unknown>;

export type DeleteFragmentInput = {
  fragmentId?: string;
}

export type DeleteFragmentOutput = Record<string, unknown>;

export type TranslateFragmentsInput = {
  source?: string;
  target?: string[];
  targetAutomatic?: boolean;
  overrideManual?: boolean;
}

export type TranslateFragmentsOutput = {
  jobId?: string;
}

export type DescribeVariantInput = {
  fragmentId?: string;
  variantId?: string;
  extra?: string[];
}

export type DescribeVariantOutput = {
  variant?: Variant;
}

export type ListVariantsInput = {
  fragmentId?: string;
  offset?: number;
  size?: number;
  filters?: ListVariantsInput_Filter;
  extra?: string[];
}

export type ListVariantsInput_Filter = {
  query?: string;
  id?: ExpressionID[];
  locale?: ExpressionEnum[];
}

export type ListVariantsOutput = {
  total?: number;
  items?: Variant[];
}

export type CreateVariantInput = {
  fragmentId?: string;
  variant?: Variant;
}

export type CreateVariantOutput = {
  variantId?: string;
}

export type UpdateVariantInput = {
  fragmentId?: string;
  variantId?: string;
  variant?: Variant;
}

export type UpdateVariantOutput = Record<string, unknown>;

export type DeleteVariantInput = {
  fragmentId?: string;
  variantId?: string;
}

export type DeleteVariantOutput = Record<string, unknown>;

export type DescribePathInput = {
  path?: string;
  locale?: string;
  extra?: string[];
}

export type DescribePathOutput = {
  fragment?: Fragment;
}

export type ListParentsInput = {
  path?: string;
  locale?: string;
  extra?: string[];
}

export type ListParentsOutput = {
  total?: number;
  items?: Fragment[];
}

