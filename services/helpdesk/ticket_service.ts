// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { ExpressionEnum, ExpressionID, ExpressionTimestamp } from "../wellknown/expression"
import { Ticket, Ticket_Comment } from "./ticket"

interface Client {
  call<R, E, O>(verb: string, url: string, args: R, opts?: any): Promise<E>;
}

export class TicketService {
  private readonly cli: Client;
  private readonly url: string;

  constructor(cli: Client, url: string = 'https://api.eolymp.com') {
    this.cli = cli;
    this.url = url;
  }

  CreateTicket(input: CreateTicketInput, opts?: any): Promise<CreateTicketOutput> {
    const path = "/helpdesk/tickets";

    return this.cli.call("POST", this.url+path, input, opts);
  }

  UpdateTicket(input: UpdateTicketInput, opts?: any): Promise<UpdateTicketOutput> {
    const path = "/helpdesk/tickets/"+encodeURIComponent(input.ticketId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.ticketId);

    return this.cli.call("PUT", this.url+path, input, opts);
  }

  DeleteTicket(input: DeleteTicketInput, opts?: any): Promise<DeleteTicketOutput> {
    const path = "/helpdesk/tickets/"+encodeURIComponent(input.ticketId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.ticketId);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }

  DescribeTicket(input: DescribeTicketInput, opts?: any): Promise<DescribeTicketOutput> {
    const path = "/helpdesk/tickets/"+encodeURIComponent(input.ticketId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.ticketId);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  ListTickets(input: ListTicketsInput, opts?: any): Promise<ListTicketsOutput> {
    const path = "/helpdesk/tickets";

    return this.cli.call("GET", this.url+path, input, opts);
  }

  ApproveTicket(input: ApproveTicketInput, opts?: any): Promise<ApproveTicketOutput> {
    const path = "/helpdesk/tickets/"+encodeURIComponent(input.ticketId||'')+"/approve";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.ticketId);

    return this.cli.call("POST", this.url+path, input, opts);
  }

  RejectTicket(input: RejectTicketInput, opts?: any): Promise<RejectTicketOutput> {
    const path = "/helpdesk/tickets/"+encodeURIComponent(input.ticketId||'')+"/reject";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.ticketId);

    return this.cli.call("POST", this.url+path, input, opts);
  }

  CloseTicket(input: CloseTicketInput, opts?: any): Promise<CloseTicketOutput> {
    const path = "/helpdesk/tickets/"+encodeURIComponent(input.ticketId||'')+"/close";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.ticketId);

    return this.cli.call("POST", this.url+path, input, opts);
  }

  AddComment(input: AddCommentInput, opts?: any): Promise<AddCommentOutput> {
    const path = "/helpdesk/tickets/"+encodeURIComponent(input.ticketId||'')+"/comments";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.ticketId);

    return this.cli.call("POST", this.url+path, input, opts);
  }

  UpdateComment(input: UpdateCommentInput, opts?: any): Promise<UpdateCommentOutput> {
    const path = "/helpdesk/tickets/"+encodeURIComponent(input.ticketId||'')+"/comments/"+encodeURIComponent(input.commentId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.ticketId);
    delete(input.commentId);

    return this.cli.call("PUT", this.url+path, input, opts);
  }

  DeleteComment(input: DeleteCommentInput, opts?: any): Promise<DeleteCommentOutput> {
    const path = "/helpdesk/tickets/"+encodeURIComponent(input.ticketId||'')+"/comments/"+encodeURIComponent(input.commentId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.ticketId);
    delete(input.commentId);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }

  ListComments(input: ListCommentsInput, opts?: any): Promise<ListCommentsOutput> {
    const path = "/helpdesk/tickets/"+encodeURIComponent(input.ticketId||'')+"/comments";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.ticketId);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  DescribeComment(input: DescribeCommentInput, opts?: any): Promise<DescribeCommentOutput> {
    const path = "/helpdesk/tickets/"+encodeURIComponent(input.ticketId||'')+"/comments/"+encodeURIComponent(input.commentId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.ticketId);
    delete(input.commentId);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  UploadAttachment(input: UploadAttachmentInput, opts?: any): Promise<UploadAttachmentOutput> {
    const path = "/helpdesk/attachments";

    return this.cli.call("POST", this.url+path, input, opts);
  }
}

export type CreateTicketInput = {
  ticket?: Ticket;
  captcha?: string;
}

export type CreateTicketOutput = {
  ticketId?: string;
}

export type UpdateTicketInput = {
  ticketId?: string;
  ticket?: Ticket;
}

export type UpdateTicketOutput = Record<string, unknown>;

export type DeleteTicketInput = {
  ticketId?: string;
}

export type DeleteTicketOutput = Record<string, unknown>;

export type DescribeTicketInput = {
  ticketId?: string;
  render?: boolean;
}

export type DescribeTicketOutput = {
  ticket?: Ticket;
}

export type ListTicketsInput = {
  render?: boolean;
  offset?: number;
  size?: number;
  filters?: ListTicketsInput_Filter;
}

export type ListTicketsInput_Filter = {
  query?: string;
  id?: ExpressionID[];
  userId?: ExpressionID[];
  userEmail?: ExpressionEnum[];
  status?: ExpressionEnum[];
  type?: ExpressionEnum[];
  createdAt?: ExpressionTimestamp[];
  updatedAt?: ExpressionTimestamp[];
  locale?: ExpressionEnum[];
}

export type ListTicketsOutput = {
  total?: number;
  items?: Ticket[];
}

export type ApproveTicketInput = {
  ticketId?: string;
  comment?: string;
}

export type ApproveTicketOutput = Record<string, unknown>;

export type RejectTicketInput = {
  ticketId?: string;
  comment?: string;
}

export type RejectTicketOutput = Record<string, unknown>;

export type CloseTicketInput = {
  ticketId?: string;
  comment?: string;
}

export type CloseTicketOutput = Record<string, unknown>;

export type AddCommentInput = {
  ticketId?: string;
  comment?: Ticket_Comment;
}

export type AddCommentOutput = {
  commentId?: string;
}

export type UpdateCommentInput = {
  ticketId?: string;
  commentId?: string;
  comment?: Ticket_Comment;
}

export type UpdateCommentOutput = Record<string, unknown>;

export type DeleteCommentInput = {
  ticketId?: string;
  commentId?: string;
}

export type DeleteCommentOutput = Record<string, unknown>;

export type ListCommentsInput = {
  ticketId?: string;
  render?: boolean;
  offset?: number;
  size?: number;
}

export type ListCommentsOutput = {
  total?: number;
  items?: Ticket_Comment[];
}

export type DescribeCommentInput = {
  ticketId?: string;
  commentId?: string;
  render?: boolean;
}

export type DescribeCommentOutput = {
  comment?: Ticket_Comment;
}

export type UploadAttachmentInput = {
  name?: string;
  type?: string;
  data?: string;
}

export type UploadAttachmentOutput = {
  attachmentUrl?: string;
}

