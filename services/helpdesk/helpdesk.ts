// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { ExpressionEnum, ExpressionID, ExpressionString } from "../wellknown/expression"
import { Document } from "./document"

interface Client {
  call<R, E, O>(verb: string, url: string, args: R, opts: O): Promise<E>;
}

export class Helpdesk {
  private readonly cli: Client;
  private readonly url: string;

  constructor(cli: Client, url: string = 'https://api.eolymp.com') {
    this.cli = cli;
    this.url = url;
  }

  DescribeDocument<O>(input: DescribeDocumentInput, opts?: O): Promise<DescribeDocumentOutput> {
    const path = "/helpdesk/documents/"+encodeURIComponent(input.documentId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.documentId);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  ListDocuments<O>(input: ListDocumentsInput, opts?: O): Promise<ListDocumentsOutput> {
    const path = "/helpdesk/documents";

    return this.cli.call("GET", this.url+path, input, opts);
  }

  CreateDocument<O>(input: CreateDocumentInput, opts?: O): Promise<CreateDocumentOutput> {
    const path = "/helpdesk/documents";

    return this.cli.call("POST", this.url+path, input, opts);
  }

  UpdateDocument<O>(input: UpdateDocumentInput, opts?: O): Promise<UpdateDocumentOutput> {
    const path = "/helpdesk/documents/"+encodeURIComponent(input.documentId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.documentId);

    return this.cli.call("PUT", this.url+path, input, opts);
  }

  DeleteDocument<O>(input: DeleteDocumentInput, opts?: O): Promise<DeleteDocumentOutput> {
    const path = "/helpdesk/documents/"+encodeURIComponent(input.documentId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.documentId);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }

  DescribePath<O>(input: DescribePathInput, opts?: O): Promise<DescribePathOutput> {
    const path = "/helpdesk/lookup/path";

    return this.cli.call("GET", this.url+path, input, opts);
  }

  ListPaths<O>(input: ListPathsInput, opts?: O): Promise<ListPathsOutput> {
    const path = "/helpdesk/lookup/paths";

    return this.cli.call("GET", this.url+path, input, opts);
  }

  ListParents<O>(input: ListParentsInput, opts?: O): Promise<ListParentsOutput> {
    const path = "/helpdesk/lookup/parents";

    return this.cli.call("GET", this.url+path, input, opts);
  }
}

export type DescribeDocumentInput = {
  documentId?: string;
}

export type DescribeDocumentOutput = {
  document?: Document;
}

export type ListDocumentsInput = {
  offset?: number;
  size?: number;
  filters?: ListDocumentsInput_Filter;
}

export type ListDocumentsInput_Filter = {
  query?: string;
  id?: ExpressionID[];
  path?: ExpressionString[];
  locale?: ExpressionEnum[];
}

export type ListDocumentsOutput = {
  total?: number;
  items?: Document[];
}

export type CreateDocumentInput = {
  document?: Document;
}

export type CreateDocumentOutput = {
  documentId?: string;
}

export type UpdateDocumentInput = {
  documentId?: string;
  document?: Document;
}

export type UpdateDocumentOutput = Record<string, unknown>;

export type DeleteDocumentInput = {
  documentId?: string;
}

export type DeleteDocumentOutput = Record<string, unknown>;

export type DescribePathInput = {
  path?: string;
  preferredLocales?: string[];
}

export type DescribePathOutput = {
  document?: Document;
}

export type ListPathsInput = {
  preferredLocales?: string[];
  offset?: number;
  size?: number;
  filters?: ListPathsInput_Filter;
}

export type ListPathsInput_Filter = {
  query?: string;
  path?: ExpressionString[];
  label?: ExpressionEnum[];
}

export type ListPathsOutput = {
  total?: number;
  items?: Document[];
}

export type ListParentsInput = {
  path?: string;
  preferredLocales?: string[];
}

export type ListParentsOutput = {
  total?: number;
  items?: Document[];
}

