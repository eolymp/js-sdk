// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { ExpressionEnum, ExpressionID, ExpressionString } from "../wellknown/expression"
import { Document } from "./document"

interface Client {
  call<R, E, O>(method: string, args: R, opts: O): Promise<E>;
}

export class Helpdesk {
  private readonly cli: Client;

  constructor(cli: Client) {
    this.cli = cli;
  }

  DescribeDocument<O>(input: DescribeDocumentInput, opts: O): Promise<DescribeDocumentOutput> {
    return this.cli.call("eolymp.helpdesk.Helpdesk/DescribeDocument", input, opts);
  }

  ListDocuments<O>(input: ListDocumentsInput, opts: O): Promise<ListDocumentsOutput> {
    return this.cli.call("eolymp.helpdesk.Helpdesk/ListDocuments", input, opts);
  }

  CreateDocument<O>(input: CreateDocumentInput, opts: O): Promise<CreateDocumentOutput> {
    return this.cli.call("eolymp.helpdesk.Helpdesk/CreateDocument", input, opts);
  }

  UpdateDocument<O>(input: UpdateDocumentInput, opts: O): Promise<UpdateDocumentOutput> {
    return this.cli.call("eolymp.helpdesk.Helpdesk/UpdateDocument", input, opts);
  }

  DeleteDocument<O>(input: DeleteDocumentInput, opts: O): Promise<DeleteDocumentOutput> {
    return this.cli.call("eolymp.helpdesk.Helpdesk/DeleteDocument", input, opts);
  }

  DescribePath<O>(input: DescribePathInput, opts: O): Promise<DescribePathOutput> {
    return this.cli.call("eolymp.helpdesk.Helpdesk/DescribePath", input, opts);
  }

  ListPaths<O>(input: ListPathsInput, opts: O): Promise<ListPathsOutput> {
    return this.cli.call("eolymp.helpdesk.Helpdesk/ListPaths", input, opts);
  }

  ListParents<O>(input: ListParentsInput, opts: O): Promise<ListParentsOutput> {
    return this.cli.call("eolymp.helpdesk.Helpdesk/ListParents", input, opts);
  }
}

export type DescribeDocumentInput = {
  documentId?: string;
}

export type DescribeDocumentOutput = {
  document?: Document;
}

export type ListDocumentsInput = {
  searchQuery?: string;
  offset?: number;
  size?: number;
  filters?: ListDocumentsInput_Filter;
}

export type ListDocumentsInput_Filter = {
  id?: ExpressionID[];
  path?: ExpressionString[];
  locale?: ExpressionEnum[];
}

export type ListDocumentsOutput = {
  total?: number;
  items?: Document[];
}

export type CreateDocumentInput = {
  document?: Document;
}

export type CreateDocumentOutput = {
  documentId?: string;
}

export type UpdateDocumentInput = {
  documentId?: string;
  document?: Document;
}

export type UpdateDocumentOutput = Record<string, unknown>;

export type DeleteDocumentInput = {
  documentId?: string;
}

export type DeleteDocumentOutput = Record<string, unknown>;

export type DescribePathInput = {
  path?: string;
  preferredLocales?: string[];
}

export type DescribePathOutput = {
  document?: Document;
}

export type ListPathsInput = {
  preferredLocales?: string[];
  offset?: number;
  size?: number;
  filters?: ListPathsInput_Filter;
}

export type ListPathsInput_Filter = {
  query?: string;
  path?: ExpressionString[];
  label?: ExpressionEnum[];
}

export type ListPathsOutput = {
  total?: number;
  items?: Document[];
}

export type ListParentsInput = {
  path?: string;
  preferredLocales?: string[];
}

export type ListParentsOutput = {
  total?: number;
  items?: Document[];
}

