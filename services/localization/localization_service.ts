// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { ExpressionBool, ExpressionEnum, ExpressionID, ExpressionString } from "../wellknown/expression"
import { Term } from "./term"
import { Translation } from "./translation"

interface Client {
  call<R, E, O>(verb: string, url: string, args: R, opts?: any): Promise<E>;
}

export class LocalizationService {
  private readonly cli: Client;
  private readonly url: string;

  constructor(cli: Client, url: string = 'https://api.eolymp.com') {
    this.cli = cli;
    this.url = url;
  }

  CreateTerm(input: CreateTermInput, opts?: any): Promise<CreateTermOutput> {
    const path = "/terms";

    return this.cli.call("POST", this.url+path, input, opts);
  }

  ListTerms(input: ListTermsInput, opts?: any): Promise<ListTermsOutput> {
    const path = "/terms";

    return this.cli.call("GET", this.url+path, input, opts);
  }

  UpdateTerm(input: UpdateTermInput, opts?: any): Promise<UpdateTermOutput> {
    const path = "/terms/"+encodeURIComponent(input.termId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.termId);

    return this.cli.call("PUT", this.url+path, input, opts);
  }

  ApproveTerm(input: ApproveTermInput, opts?: any): Promise<ApproveTermOutput> {
    const path = "/terms/"+encodeURIComponent(input.termId||'')+"/approve";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.termId);

    return this.cli.call("POST", this.url+path, input, opts);
  }

  DeprecateTerm(input: DeprecateTermInput, opts?: any): Promise<DeprecateTermOutput> {
    const path = "/terms/"+encodeURIComponent(input.termId||'')+"/deprecate";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.termId);

    return this.cli.call("POST", this.url+path, input, opts);
  }

  DeleteTerm(input: DeleteTermInput, opts?: any): Promise<DeleteTermOutput> {
    const path = "/terms/"+encodeURIComponent(input.termId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.termId);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }

  DescribeTerm(input: DescribeTermInput, opts?: any): Promise<DescribeTermOutput> {
    const path = "/terms/"+encodeURIComponent(input.termId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.termId);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  ImportTerms(input: ImportTermsInput, opts?: any): Promise<ImportTermsOutput> {
    const path = "/terms";

    return this.cli.call("PUT", this.url+path, input, opts);
  }

  TranslateTerm(input: TranslateTermInput, opts?: any): Promise<TranslateTermOutput> {
    const path = "/terms/"+encodeURIComponent(input.termId||'')+"/translations";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.termId);

    return this.cli.call("POST", this.url+path, input, opts);
  }

  ListTranslations(input: ListTranslationsInput, opts?: any): Promise<ListTranslationsOutput> {
    const path = "/terms/"+encodeURIComponent(input.termId||'')+"/translations";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.termId);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  DeleteTranslation(input: DeleteTranslationInput, opts?: any): Promise<DeleteTranslationOutput> {
    const path = "/terms/"+encodeURIComponent(input.termId||'')+"/translations/"+encodeURIComponent(input.translationId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.termId);
    delete(input.translationId);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }

  UpdateTranslation(input: UpdateTranslationInput, opts?: any): Promise<UpdateTranslationOutput> {
    const path = "/terms/"+encodeURIComponent(input.termId||'')+"/translations/"+encodeURIComponent(input.translationId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.termId);
    delete(input.translationId);

    return this.cli.call("PUT", this.url+path, input, opts);
  }

  ApproveTranslation(input: ApproveTranslationInput, opts?: any): Promise<ApproveTranslationOutput> {
    const path = "/terms/"+encodeURIComponent(input.termId||'')+"/translations/"+encodeURIComponent(input.translationId||'')+"/approve";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.termId);
    delete(input.translationId);

    return this.cli.call("POST", this.url+path, input, opts);
  }

  RejectTranslation(input: RejectTranslationInput, opts?: any): Promise<RejectTranslationOutput> {
    const path = "/terms/"+encodeURIComponent(input.termId||'')+"/translations/"+encodeURIComponent(input.translationId||'')+"/reject";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.termId);
    delete(input.translationId);

    return this.cli.call("POST", this.url+path, input, opts);
  }

  ImportTranslations(input: ImportTranslationsInput, opts?: any): Promise<ImportTranslationsOutput> {
    const path = "/translations";

    return this.cli.call("PUT", this.url+path, input, opts);
  }

  ExportTranslations(input: ExportTranslationsInput, opts?: any): Promise<ImportTranslationsOutput> {
    const path = "/translations";

    return this.cli.call("GET", this.url+path, input, opts);
  }
}

export type CreateTermInput = {
  term?: Term;
}

export type CreateTermOutput = {
  termId?: string;
}

export type ImportTermsInput = {
  terms?: Term[];
  setDeprecation?: boolean;
  setOutdated?: boolean;
}

export type ImportTermsOutput = {
  importedCount?: number;
  deprecatedCount?: number;
}

export type ListTermsInput = {
  offset?: number;
  size?: number;
  filters?: ListTermsInput_Filter;
}

export type ListTermsInput_Filter = {
  id?: ExpressionID[];
  message?: ExpressionString[];
  status?: ExpressionEnum[];
  hasSuggestions?: ExpressionBool[];
}

export type ListTermsOutput = {
  total?: number;
  items?: Term[];
}

export type UpdateTermInput = {
  termId?: string;
  term?: Term;
}

export type UpdateTermOutput = Record<string, unknown>;

export type ApproveTermInput = {
  termId?: string;
}

export type ApproveTermOutput = Record<string, unknown>;

export type DeprecateTermInput = {
  termId?: string;
}

export type DeprecateTermOutput = Record<string, unknown>;

export type DeleteTermInput = {
  termId?: string;
}

export type DeleteTermOutput = Record<string, unknown>;

export type DescribeTermInput = {
  termId?: string;
}

export type DescribeTermOutput = {
  term?: Term;
}

export type TranslateTermInput = {
  termId?: string;
  translation?: Translation;
}

export type TranslateTermOutput = {
  translationId?: string;
}

export type ListTranslationsInput = {
  termId?: string;
  offset?: number;
  size?: number;
  filters?: ListTranslationsInput_Filter;
}

export type ListTranslationsInput_Filter = {
  id?: ExpressionID[];
  message?: ExpressionString[];
  status?: ExpressionEnum[];
}

export type ListTranslationsOutput = {
  total?: number;
  items?: Translation[];
}

export type UpdateTranslationInput = {
  termId?: string;
  translationId?: string;
  translation?: Translation;
}

export type UpdateTranslationOutput = Record<string, unknown>;

export type ApproveTranslationInput = {
  termId?: string;
  translationId?: string;
}

export type ApproveTranslationOutput = Record<string, unknown>;

export type RejectTranslationInput = {
  termId?: string;
  translationId?: string;
}

export type RejectTranslationOutput = Record<string, unknown>;

export type DeleteTranslationInput = {
  termId?: string;
  translationId?: string;
}

export type DeleteTranslationOutput = Record<string, unknown>;

export type DescribeTranslationInput = {
  termId?: string;
}

export type DescribeTranslationOutput = {
  term?: Term;
}

export type ImportTranslationsInput = {
  locale?: string;
  translations?: Record<string, string>;
}

export type ImportTranslationsOutput = {
  importedCount?: number;
  deprecatedCount?: number;
}

export type ExportTranslationsInput = {
  locale?: string;
}

export type ExportTranslationsOutput = {
  translations?: Record<string, string>;
}

