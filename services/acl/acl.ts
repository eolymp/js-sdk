// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { ExpressionEnum, ExpressionID } from "../wellknown/expression"

interface Client {
  call<R, E, O>(verb: string, url: string, args: R, opts?: any): Promise<E>;
}

export class Acl {
  private readonly cli: Client;
  private readonly url: string;

  constructor(cli: Client, url: string = 'https://api.eolymp.com') {
    this.cli = cli;
    this.url = url;
  }

  Grant(input: GrantInput, opts?: any): Promise<GrantOutput> {
    const path = "/acl/"+encodeURIComponent(input.userId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.userId);

    return this.cli.call("PUT", this.url+path, input, opts);
  }

  Revoke(input: RevokeInput, opts?: any): Promise<RevokeOutput> {
    const path = "/acl/"+encodeURIComponent(input.userId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.userId);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }

  Describe(input: DescribeInput, opts?: any): Promise<DescribeOutput> {
    const path = "/acl/"+encodeURIComponent(input.userId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.userId);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  List(input: ListInput, opts?: any): Promise<ListOutput> {
    const path = "/acl";

    return this.cli.call("GET", this.url+path, input, opts);
  }

  Introspect(input: IntrospectInput, opts?: any): Promise<IntrospectOutput> {
    const path = "/whoami";

    return this.cli.call("GET", this.url+path, input, opts);
  }
}

export type Grant = {
  id?: string;
  role?: string;
  userId?: string;
  entitlements?: string[];
}

export type GrantInput = {
  userId?: string;
  role?: string;
  entitlements?: string[];
}

export type GrantOutput = Record<string, unknown>;

export type RevokeInput = {
  userId?: string;
}

export type RevokeOutput = Record<string, unknown>;

export type DescribeInput = {
  userId?: string;
}

export type DescribeOutput = {
  grant?: Grant;
}

export type ListInput = {
  offset?: number;
  size?: number;
  filters?: ListInput_Filter;
}

export type ListInput_Filter = {
  id?: ExpressionID[];
  userId?: ExpressionID[];
  role?: ExpressionEnum[];
}

export type ListOutput = {
  total?: number;
  items?: Grant[];
}

export type IntrospectInput = Record<string, unknown>;

export type IntrospectOutput = {
  grant?: Grant;
}

