// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { Notification } from "./notification"
import { Preferences } from "./preferences"

interface Client {
  call<R, E, O>(verb: string, url: string, args: R, opts?: any): Promise<E>;
}

export class NotificationService {
  private readonly cli: Client;
  private readonly url: string;

  constructor(cli: Client, url: string = 'https://api.eolymp.com') {
    this.cli = cli;
    this.url = url;
  }

  DescribeNotification(input: DescribeNotificationInput, opts?: any): Promise<DescribeNotificationOutput> {
    const path = "/notifications/"+encodeURIComponent(input.notificationId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.notificationId);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  ReadNotification(input: ReadNotificationInput, opts?: any): Promise<ReadNotificationOutput> {
    const path = "/notifications/"+encodeURIComponent(input.notificationId||'')+"/read";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.notificationId);

    return this.cli.call("POST", this.url+path, input, opts);
  }

  DeleteNotification(input: DeleteNotificationInput, opts?: any): Promise<DeleteNotificationOutput> {
    const path = "/notifications/"+encodeURIComponent(input.notificationId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.notificationId);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }

  ListNotifications(input: ListNotificationsInput, opts?: any): Promise<ListNotificationsOutput> {
    const path = "/notifications";

    return this.cli.call("GET", this.url+path, input, opts);
  }

  DescribePreferences(input: DescribePreferencesInput, opts?: any): Promise<DescribePreferencesOutput> {
    const path = "/preferences/notifications";

    return this.cli.call("GET", this.url+path, input, opts);
  }

  UpdatePreferences(input: UpdatePreferencesInput, opts?: any): Promise<UpdatePreferencesOutput> {
    const path = "/preferences/notifications";

    return this.cli.call("POST", this.url+path, input, opts);
  }
}

export type NotificationEvent = {
  notification?: Notification;
}

export type CreateNotificationInput = {
  notification?: Notification;
}

export type CreateNotificationOutput = Record<string, unknown>;

export type DescribeNotificationInput = {
  notificationId?: string;
}

export type DescribeNotificationOutput = {
  notification?: Notification;
}

export type ReadNotificationInput = {
  notificationId?: string;
}

export type ReadNotificationOutput = Record<string, unknown>;

export type DeleteNotificationInput = {
  notificationId?: string;
}

export type DeleteNotificationOutput = Record<string, unknown>;

export type ListNotificationsInput = {
  size?: number;
  after?: string;
}

export type ListNotificationsOutput = {
  total?: number;
  items?: Notification[];
}

export type DescribePreferencesInput = {
  spaceId?: string;
}

export type DescribePreferencesOutput = {
  preferences?: Preferences;
}

export type UpdatePreferencesInput = {
  patch?: string[];
  spaceId?: string;
  preferences?: Preferences;
}

export type UpdatePreferencesOutput = Record<string, unknown>;

