// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { ExpressionID, ExpressionString } from "../wellknown/expression"
import { Quota } from "./quota"
import { User } from "./user"

interface Client {
  call<R, E>(method: string, args: R): Promise<E>;
}

export class Cognito {
  private readonly cli: Client;

  constructor(cli: Client) {
    this.cli = cli;
  }

  CreateToken(input: CreateTokenInput): Promise<CreateTokenOutput> {
    return this.cli.call("eolymp.cognito.Cognito/CreateToken", input);
  }

  IntrospectToken(input: IntrospectTokenInput): Promise<IntrospectTokenOutput> {
    return this.cli.call("eolymp.cognito.Cognito/IntrospectToken", input);
  }

  CreateAuthorization(input: CreateAuthorizationInput): Promise<CreateAuthorizationOutput> {
    return this.cli.call("eolymp.cognito.Cognito/CreateAuthorization", input);
  }

  RevokeToken(input: RevokeTokenInput): Promise<RevokeTokenOutput> {
    return this.cli.call("eolymp.cognito.Cognito/RevokeToken", input);
  }

  Signout(input: SignoutInput): Promise<SignoutOutput> {
    return this.cli.call("eolymp.cognito.Cognito/Signout", input);
  }

  CreateUser(input: CreateUserInput): Promise<CreateUserOutput> {
    return this.cli.call("eolymp.cognito.Cognito/CreateUser", input);
  }

  VerifyEmail(input: VerifyEmailInput): Promise<VerifyEmailOutput> {
    return this.cli.call("eolymp.cognito.Cognito/VerifyEmail", input);
  }

  UpdateEmail(input: UpdateEmailInput): Promise<UpdateEmailOutput> {
    return this.cli.call("eolymp.cognito.Cognito/UpdateEmail", input);
  }

  StartRecovery(input: StartRecoveryInput): Promise<StartRecoveryOutput> {
    return this.cli.call("eolymp.cognito.Cognito/StartRecovery", input);
  }

  CompleteRecovery(input: CompleteRecoverInput): Promise<CompleteRecoverOutput> {
    return this.cli.call("eolymp.cognito.Cognito/CompleteRecovery", input);
  }

  IntrospectUser(input: IntrospectUserInput): Promise<IntrospectUserOutput> {
    return this.cli.call("eolymp.cognito.Cognito/IntrospectUser", input);
  }

  DescribeUser(input: DescribeUserInput): Promise<DescribeUserOutput> {
    return this.cli.call("eolymp.cognito.Cognito/DescribeUser", input);
  }

  ListUsers(input: ListUsersInput): Promise<ListUsersOutput> {
    return this.cli.call("eolymp.cognito.Cognito/ListUsers", input);
  }

  IntrospectQuota(input: IntrospectQuotaInput): Promise<IntrospectQuotaOutput> {
    return this.cli.call("eolymp.cognito.Cognito/IntrospectQuota", input);
  }

  IntrospectRoles(input: IntrospectRolesInput): Promise<IntrospectRolesOutput> {
    return this.cli.call("eolymp.cognito.Cognito/IntrospectRoles", input);
  }

  ListRoles(input: ListRolesInput): Promise<ListRolesOutput> {
    return this.cli.call("eolymp.cognito.Cognito/ListRoles", input);
  }

  UpdateRoles(input: UpdateRolesInput): Promise<UpdateRolesOutput> {
    return this.cli.call("eolymp.cognito.Cognito/UpdateRoles", input);
  }

  ListEntitlements(input: ListEntitlementsInput): Promise<ListEntitlementsOutput> {
    return this.cli.call("eolymp.cognito.Cognito/ListEntitlements", input);
  }
}

export type CreateTokenInput = {
  grantType?: string;
  username?: string;
  password?: string;
  clientId?: string;
  clientSecret?: string;
  code?: string;
  codeVerifier?: string;
  scope?: string;
  refreshToken?: string;
}

export type CreateTokenOutput = {
  token?: string;
  type?: string;
  expiresAt?: string;
  scopes?: string[];
  refreshToken?: string;
  userId?: string;
  username?: string;
}

export type IntrospectTokenInput = {
  token?: string;
}

export type IntrospectTokenOutput = {
  active?: boolean;
  token?: string;
  type?: string;
  expiresAt?: string;
  scopes?: string[];
  userId?: string;
  username?: string;
}

export type CreateAuthorizationInput = {
  clientId?: string;
  codeChallenge?: string;
  codeChallengeMethod?: string;
  redirectUri?: string;
  responseType?: string;
  scope?: string;
  state?: string;
}

export type CreateAuthorizationOutput = {
  authorizationCode?: string;
  redirectUri?: string;
}

export type IntrospectQuotaInput = Record<string, unknown>;

export type IntrospectQuotaOutput = {
  contestsPerUser?: Quota;
  problemsPerContest?: Quota;
  participantsPerContest?: Quota;
  problemsPerUser?: Quota;
}

export type IntrospectUserInput = Record<string, unknown>;

export type IntrospectUserOutput = {
  user?: User;
}

export type DescribeUserInput = {
  userId?: string;
}

export type DescribeUserOutput = {
  user?: User;
}

export type ListUsersInput = {
  offset?: number;
  size?: number;
  filters?: ListUsersInput_Filter;
}

export type ListUsersInput_Filter = {
  id?: ExpressionID[];
  username?: ExpressionString[];
}

export type ListUsersOutput = {
  total?: number;
  items?: User[];
}

export type CreateUserInput = {
  username?: string;
  fullName?: string;
  email?: string;
  password?: string;
  captcha?: string;
  locale?: string;
}

export type CreateUserOutput = {
  userId?: string;
  emailConfirmationHint?: string;
}

export type NotifyUserInput = {
  userId?: string;
  template?: string;
  parameters?: Record<string, string>;
}

export type NotifyUserOutput = {
  notificationId?: string;
}

export type VerifyEmailInput = {
  userId?: string;
  secret?: string;
}

export type VerifyEmailOutput = Record<string, unknown>;

export type UpdateEmailInput = {
  email?: string;
}

export type UpdateEmailOutput = {
  emailConfirmationHint?: string;
}

export type StartRecoveryInput = {
  email?: string;
  captcha?: string;
  locale?: string;
}

export type StartRecoveryOutput = {
  emailRecoveryHint?: string;
}

export type CompleteRecoverInput = {
  userId?: string;
  secret?: string;
  password?: string;
}

export type CompleteRecoverOutput = Record<string, unknown>;

export type IntrospectRolesInput = Record<string, unknown>;

export type IntrospectRolesOutput = {
  roles?: string[];
}

export type ListRolesInput = {
  userId?: string;
}

export type ListRolesOutput = {
  roles?: string[];
}

export type UpdateRolesInput = {
  userId?: string;
  roles?: string[];
}

export type UpdateRolesOutput = Record<string, unknown>;

export type ListEntitlementsInput = Record<string, unknown>;

export type ListEntitlementsOutput = {
  entitlements?: string[];
}

export type RevokeTokenInput = {
  token?: string;
}

export type RevokeTokenOutput = Record<string, unknown>;

export type SignoutInput = {
  everywhere?: boolean;
}

export type SignoutOutput = Record<string, unknown>;

