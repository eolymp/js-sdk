// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { ExpressionID, ExpressionString } from "../wellknown/expression"
import { Attachment } from "./attachment"

interface Client {
  call<R, E, O>(verb: string, url: string, args: R, opts?: any): Promise<E>;
}

export class AttachmentService {
  private readonly cli: Client;
  private readonly url: string;

  constructor(cli: Client, url: string = 'https://api.eolymp.com') {
    this.cli = cli;
    this.url = url;
  }

  CreateAttachment(input: CreateAttachmentInput, opts?: any): Promise<CreateAttachmentOutput> {
    const path = "/attachments";

    return this.cli.call("POST", this.url+path, input, opts);
  }

  UpdateAttachment(input: UpdateAttachmentInput, opts?: any): Promise<UpdateAttachmentOutput> {
    const path = "/attachments/"+encodeURIComponent(input.attachmentId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.attachmentId);

    return this.cli.call("POST", this.url+path, input, opts);
  }

  DeleteAttachment(input: DeleteAttachmentInput, opts?: any): Promise<DeleteAttachmentOutput> {
    const path = "/attachments/"+encodeURIComponent(input.attachmentId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.attachmentId);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }

  ListAttachments(input: ListAttachmentsInput, opts?: any): Promise<ListAttachmentsOutput> {
    const path = "/attachments";

    return this.cli.call("GET", this.url+path, input, opts);
  }

  DescribeAttachment(input: DescribeAttachmentInput, opts?: any): Promise<DescribeAttachmentOutput> {
    const path = "/attachments/"+encodeURIComponent(input.attachmentId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.attachmentId);

    return this.cli.call("GET", this.url+path, input, opts);
  }
}

export type CreateAttachmentInput = {
  problemId?: string;
  attachment?: Attachment;
}

export type CreateAttachmentOutput = {
  attachmentId?: string;
}

export type UpdateAttachmentInput = {
  problemId?: string;
  attachmentId?: string;
  attachment?: Attachment;
}

export type UpdateAttachmentOutput = Record<string, unknown>;

export type DeleteAttachmentInput = {
  problemId?: string;
  attachmentId?: string;
}

export type DeleteAttachmentOutput = Record<string, unknown>;

export type ListAttachmentsInput = {
  problemId?: string;
  offset?: number;
  size?: number;
  filters?: ListAttachmentsInput_Filter;
  version?: number;
}

export type ListAttachmentsInput_Filter = {
  id?: ExpressionID[];
  name?: ExpressionString[];
}

export type ListAttachmentsOutput = {
  total?: number;
  items?: Attachment[];
}

export type DescribeAttachmentInput = {
  problemId?: string;
  attachmentId?: string;
  version?: number;
}

export type DescribeAttachmentOutput = {
  attachment?: Attachment;
}

