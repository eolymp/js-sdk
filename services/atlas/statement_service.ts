// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { Statement } from "./statement"

interface Client {
  call<R, E, O>(verb: string, url: string, args: R, opts?: any): Promise<E>;
}

export class StatementService {
  private readonly cli: Client;
  private readonly url: string;

  constructor(cli: Client, url: string = 'https://api.eolymp.com') {
    this.cli = cli;
    this.url = url;
  }

  CreateStatement(input: CreateStatementInput, opts?: any): Promise<CreateStatementOutput> {
    const path = "/statements";

    return this.cli.call("PUT", this.url+path, input, opts);
  }

  UpdateStatement(input: UpdateStatementInput, opts?: any): Promise<UpdateStatementOutput> {
    const path = "/statements/"+encodeURIComponent(input.statementId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.statementId);

    return this.cli.call("PUT", this.url+path, input, opts);
  }

  DeleteStatement(input: DeleteStatementInput, opts?: any): Promise<DeleteStatementOutput> {
    const path = "/statements/"+encodeURIComponent(input.statementId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.statementId);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }

  DescribeStatement(input: DescribeStatementInput, opts?: any): Promise<DescribeStatementOutput> {
    const path = "/statements/"+encodeURIComponent(input.statementId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.statementId);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  LookupStatement(input: LookupStatementInput, opts?: any): Promise<LookupStatementOutput> {
    const path = "/translate";

    return this.cli.call("GET", this.url+path, input, opts);
  }

  PreviewStatement(input: PreviewStatementInput, opts?: any): Promise<PreviewStatementOutput> {
    const path = "/renders";

    return this.cli.call("POST", this.url+path, input, opts);
  }

  ListStatements(input: ListStatementsInput, opts?: any): Promise<ListStatementsOutput> {
    const path = "/statements";

    return this.cli.call("GET", this.url+path, input, opts);
  }

  TranslateStatements(input: TranslateStatementsInput, opts?: any): Promise<TranslateStatementsOutput> {
    const path = "/statements:translate";

    return this.cli.call("POST", this.url+path, input, opts);
  }
}

export type StatementChangedEvent = {
  problemId?: string;
  before?: Statement;
  after?: Statement;
}

export type ListStatementsInput = {
  offset?: number;
  size?: number;
  render?: boolean;
  version?: number;
  extra?: string[];
}

export type ListStatementsOutput = {
  total?: number;
  items?: Statement[];
}

export type TranslateStatementsInput = {
  source?: string;
  target?: string[];
  targetAutomatic?: boolean;
  overrideManual?: boolean;
}

export type TranslateStatementsOutput = {
  jobId?: string;
}

export type DescribeStatementInput = {
  statementId?: string;
  render?: boolean;
  version?: number;
  extra?: string[];
}

export type DescribeStatementOutput = {
  statement?: Statement;
}

export type LookupStatementInput = {
  locale?: string;
  render?: boolean;
  version?: number;
  extra?: string[];
}

export type LookupStatementOutput = {
  statement?: Statement;
}

export type PreviewStatementInput = {
  statement?: Statement;
}

export type PreviewStatementOutput = {
  statement?: Statement;
}

export type CreateStatementInput = {
  statement?: Statement;
}

export type CreateStatementOutput = {
  statementId?: string;
}

export type UpdateStatementInput = {
  patch?: string[];
  statementId?: string;
  statement?: Statement;
}

export type UpdateStatementOutput = Record<string, unknown>;

export type DeleteStatementInput = {
  statementId?: string;
}

export type DeleteStatementOutput = Record<string, unknown>;

