// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { Runtime } from "../runtime/runtime"
import { Submission_Value } from "./submission"

interface Client {
  call<R, E, O>(verb: string, url: string, args: R, opts?: any): Promise<E>;
}

export class EditorService {
  private readonly cli: Client;
  private readonly url: string;

  constructor(cli: Client, url: string = 'https://api.eolymp.com') {
    this.cli = cli;
    this.url = url;
  }

  DescribeEditor(input: DescribeEditorInput, opts?: any): Promise<DescribeEditorOutput> {
    const path = "/editor";

    return this.cli.call("GET", this.url+path, input, opts);
  }

  DescribeEditorState(input: DescribeEditorStateInput, opts?: any): Promise<DescribeEditorStateOutput> {
    const path = "/editor/state";

    return this.cli.call("GET", this.url+path, input, opts);
  }

  UpdateEditorState(input: UpdateEditorStateInput, opts?: any): Promise<UpdateEditorStateOutput> {
    const path = "/editor/state";

    return this.cli.call("POST", this.url+path, input, opts);
  }

  PrintEditorCode(input: PrintEditorCodeInput, opts?: any): Promise<PrintEditorCodeOutput> {
    const path = "/editor/print";

    return this.cli.call("POST", this.url+path, input, opts);
  }
}

export type Editor = {
  state?: Editor_State;
  features?: string[];
  runtimes?: Runtime[];
  fields?: Editor_Field[];
}

export type Editor_State = {
  runtime?: string;
  sourceCode?: string;
  inputData?: string;
  values?: Submission_Value[];
}

export type Editor_Field = {
  name?: string;
  label?: string;
  type?: string;
}

export type DescribeEditorInput = Record<string, unknown>;

export type DescribeEditorOutput = {
  editor?: Editor;
}

export type DescribeEditorStateInput = Record<string, unknown>;

export type DescribeEditorStateOutput = {
  runtime?: string;
  sourceCode?: string;
  inputData?: string;
  values?: Submission_Value[];
  features?: string[];
}

export type UpdateEditorStateInput = {
  runtime?: string;
  sourceCode?: string;
  inputData?: string;
  values?: Submission_Value[];
}

export type UpdateEditorStateOutput = Record<string, unknown>;

export type PrintEditorCodeInput = {
  runtime?: string;
  sourceCode?: string;
}

export type PrintEditorCodeOutput = Record<string, unknown>;

