// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { ExpressionEnum, ExpressionID, ExpressionInt, ExpressionString, ExpressionTimestamp } from "../wellknown/expression"
import { DeleteProblemInput, DeleteProblemOutput, DescribeProblemInput, DescribeProblemOutput, UpdatePrivacyInput, UpdatePrivacyOutput, UpdateProblemInput, UpdateProblemOutput, UpdateVisibilityInput, UpdateVisibilityOutput } from "./library_service"
import { Version } from "./version"

interface Client {
  call<R, E, O>(verb: string, url: string, args: R, opts?: any): Promise<E>;
}

export class ProblemService {
  private readonly cli: Client;
  private readonly url: string;

  constructor(cli: Client, url: string = 'https://api.eolymp.com') {
    this.cli = cli;
    this.url = url;
  }

  DeleteProblem(input: DeleteProblemInput, opts?: any): Promise<DeleteProblemOutput> {
    const path = "/";

    return this.cli.call("DELETE", this.url+path, input, opts);
  }

  UpdateProblem(input: UpdateProblemInput, opts?: any): Promise<UpdateProblemOutput> {
    const path = "/";

    return this.cli.call("PUT", this.url+path, input, opts);
  }

  DescribeProblem(input: DescribeProblemInput, opts?: any): Promise<DescribeProblemOutput> {
    const path = "/";

    return this.cli.call("GET", this.url+path, input, opts);
  }

  UpdateVisibility(input: UpdateVisibilityInput, opts?: any): Promise<UpdateVisibilityOutput> {
    const path = "/visibility";

    return this.cli.call("POST", this.url+path, input, opts);
  }

  UpdatePrivacy(input: UpdatePrivacyInput, opts?: any): Promise<UpdatePrivacyOutput> {
    const path = "/privacy";

    return this.cli.call("POST", this.url+path, input, opts);
  }

  ListVersions(input: ListVersionsInput, opts?: any): Promise<ListVersionsOutput> {
    const path = "/versions";

    return this.cli.call("GET", this.url+path, input, opts);
  }
}

export type ListVersionsInput = {
  problemId?: string;
  offset?: number;
  size?: number;
  filters?: ListVersionsInput_Filter;
}

export type ListVersionsInput_Filter = {
  number?: ExpressionInt[];
  createdBy?: ExpressionID[];
  createdAt?: ExpressionTimestamp[];
  changeOp?: ExpressionEnum[];
  changePath?: ExpressionString[];
}

export type ListVersionsOutput = {
  total?: number;
  items?: Version[];
}

