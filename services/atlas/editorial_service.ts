// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { Editorial } from "./editorial"

interface Client {
  call<R, E, O>(verb: string, url: string, args: R, opts?: any): Promise<E>;
}

export class EditorialService {
  private readonly cli: Client;
  private readonly url: string;

  constructor(cli: Client, url: string = 'https://api.eolymp.com') {
    this.cli = cli;
    this.url = url;
  }

  CreateEditorial(input: CreateEditorialInput, opts?: any): Promise<CreateEditorialOutput> {
    const path = "/editorials";

    return this.cli.call("PUT", this.url+path, input, opts);
  }

  UpdateEditorial(input: UpdateEditorialInput, opts?: any): Promise<UpdateEditorialOutput> {
    const path = "/editorials/"+encodeURIComponent(input.editorialId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.editorialId);

    return this.cli.call("PUT", this.url+path, input, opts);
  }

  DeleteEditorial(input: DeleteEditorialInput, opts?: any): Promise<DeleteEditorialOutput> {
    const path = "/editorials/"+encodeURIComponent(input.editorialId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.editorialId);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }

  DescribeEditorial(input: DescribeEditorialInput, opts?: any): Promise<DescribeEditorialOutput> {
    const path = "/editorials/"+encodeURIComponent(input.editorialId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.editorialId);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  LookupEditorial(input: LookupEditorialInput, opts?: any): Promise<LookupEditorialOutput> {
    const path = "/editorial";

    return this.cli.call("GET", this.url+path, input, opts);
  }

  PreviewEditorial(input: PreviewEditorialInput, opts?: any): Promise<PreviewEditorialOutput> {
    const path = "/editorial/preview";

    return this.cli.call("POST", this.url+path, input, opts);
  }

  ListEditorials(input: ListEditorialsInput, opts?: any): Promise<ListEditorialsOutput> {
    const path = "/editorials";

    return this.cli.call("GET", this.url+path, input, opts);
  }
}

export type ListEditorialsInput = {
  render?: boolean;
  version?: number;
}

export type ListEditorialsOutput = {
  total?: number;
  items?: Editorial[];
}

export type DescribeEditorialInput = {
  editorialId?: string;
  render?: boolean;
  version?: number;
}

export type DescribeEditorialOutput = {
  editorial?: Editorial;
}

export type LookupEditorialInput = {
  locale?: string;
  render?: boolean;
  version?: number;
}

export type LookupEditorialOutput = {
  editorial?: Editorial;
}

export type PreviewEditorialInput = {
  editorial?: Editorial;
}

export type PreviewEditorialOutput = {
  editorial?: Editorial;
}

export type CreateEditorialInput = {
  editorial?: Editorial;
}

export type CreateEditorialOutput = {
  editorialId?: string;
}

export type UpdateEditorialInput = {
  patch?: string[];
  editorialId?: string;
  editorial?: Editorial;
}

export type UpdateEditorialOutput = Record<string, unknown>;

export type DeleteEditorialInput = {
  editorialId?: string;
}

export type DeleteEditorialOutput = Record<string, unknown>;

