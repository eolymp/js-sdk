// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { Interactor } from "../executor/interactor"
import { Verifier } from "../executor/verifier"
import { ExpressionBool, ExpressionEnum, ExpressionID, ExpressionInt, ExpressionString, ExpressionTimestamp } from "../wellknown/expression"
import { Attachment } from "./attachment"
import { Category } from "./category"
import { Change } from "./change"
import { Permission } from "./permission"
import { Problem } from "./problem"
import { Score } from "./score"
import { Solution } from "./solution"
import { Statement } from "./statement"
import { Submission } from "./submission"
import { Template } from "./template"
import { Test } from "./test"
import { Testset } from "./testset"

interface Client {
  call<R, E, O>(verb: string, url: string, args: R, opts: O): Promise<E>;
}

export class Atlas {
  private readonly cli: Client;
  private readonly url: string;

  constructor(url: string, cli: Client) {
    this.cli = cli;
    this.url = url;
  }

  CreateProblem<O>(input: CreateProblemInput, opts?: O): Promise<CreateProblemOutput> {
    const path = "/problems";

    return this.cli.call("POST", this.url + path, input, opts);
  }

  DeleteProblem<O>(input: DeleteProblemInput, opts?: O): Promise<DeleteProblemOutput> {
    const path = "/problems/"+encodeURIComponent(input.problemId);

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.problemId);

    return this.cli.call("DELETE", this.url + path, input, opts);
  }

  ListProblems<O>(input: ListProblemsInput, opts?: O): Promise<ListProblemsOutput> {
    const path = "/problems";

    return this.cli.call("GET", this.url + path, input, opts);
  }

  DescribeProblem<O>(input: DescribeProblemInput, opts?: O): Promise<DescribeProblemOutput> {
    const path = "/problems/"+encodeURIComponent(input.problemId);

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.problemId);

    return this.cli.call("GET", this.url + path, input, opts);
  }

  UpdateVisibility<O>(input: UpdateVisibilityInput, opts?: O): Promise<UpdateVisibilityOutput> {
    const path = "/problems/"+encodeURIComponent(input.problemId)+"/visibility";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.problemId);

    return this.cli.call("POST", this.url + path, input, opts);
  }

  UpdatePrivacy<O>(input: UpdatePrivacyInput, opts?: O): Promise<UpdatePrivacyOutput> {
    const path = "/problems/"+encodeURIComponent(input.problemId)+"/privacy";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.problemId);

    return this.cli.call("POST", this.url + path, input, opts);
  }

  ListExamples<O>(input: ListExamplesInput, opts?: O): Promise<ListExamplesOutput> {
    const path = "/problems/"+encodeURIComponent(input.problemId)+"/examples";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.problemId);

    return this.cli.call("GET", this.url + path, input, opts);
  }

  UpdateVerifier<O>(input: UpdateVerifierInput, opts?: O): Promise<UpdateVerifierOutput> {
    const path = "/problems/"+encodeURIComponent(input.problemId)+"/verifier";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.problemId);

    return this.cli.call("PUT", this.url + path, input, opts);
  }

  DescribeVerifier<O>(input: DescribeVerifierInput, opts?: O): Promise<DescribeVerifierOutput> {
    const path = "/problems/"+encodeURIComponent(input.problemId)+"/verifier";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.problemId);

    return this.cli.call("GET", this.url + path, input, opts);
  }

  UpdateInteractor<O>(input: UpdateInteractorInput, opts?: O): Promise<UpdateInteractorOutput> {
    const path = "/problems/"+encodeURIComponent(input.problemId)+"/interactor";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.problemId);

    return this.cli.call("PUT", this.url + path, input, opts);
  }

  DescribeInteractor<O>(input: DescribeInteractorInput, opts?: O): Promise<DescribeInteractorOutput> {
    const path = "/problems/"+encodeURIComponent(input.problemId)+"/interactor";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.problemId);

    return this.cli.call("GET", this.url + path, input, opts);
  }

  CreateStatement<O>(input: CreateStatementInput, opts?: O): Promise<CreateStatementOutput> {
    const path = "/problems/"+encodeURIComponent(input.problemId)+"/statements";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.problemId);

    return this.cli.call("PUT", this.url + path, input, opts);
  }

  UpdateStatement<O>(input: UpdateStatementInput, opts?: O): Promise<UpdateStatementOutput> {
    const path = "/problems/"+encodeURIComponent(input.problemId)+"/statements/"+encodeURIComponent(input.statementId);

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.problemId);
    delete(input.statementId);

    return this.cli.call("PUT", this.url + path, input, opts);
  }

  DeleteStatement<O>(input: DeleteStatementInput, opts?: O): Promise<DeleteStatementOutput> {
    const path = "/problems/"+encodeURIComponent(input.problemId)+"/statements/"+encodeURIComponent(input.statementId);

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.problemId);
    delete(input.statementId);

    return this.cli.call("DELETE", this.url + path, input, opts);
  }

  ListStatements<O>(input: ListStatementsInput, opts?: O): Promise<ListStatementsOutput> {
    const path = "/problems/"+encodeURIComponent(input.problemId)+"/statements";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.problemId);

    return this.cli.call("GET", this.url + path, input, opts);
  }

  DescribeStatement<O>(input: DescribeStatementInput, opts?: O): Promise<DescribeStatementOutput> {
    const path = "/problems/"+encodeURIComponent(input.problemId)+"/statements/"+encodeURIComponent(input.statementId);

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.problemId);
    delete(input.statementId);

    return this.cli.call("GET", this.url + path, input, opts);
  }

  CreateTestset<O>(input: CreateTestsetInput, opts?: O): Promise<CreateTestsetOutput> {
    const path = "/problems/"+encodeURIComponent(input.problemId)+"/testsets";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.problemId);

    return this.cli.call("POST", this.url + path, input, opts);
  }

  UpdateTestset<O>(input: UpdateTestsetInput, opts?: O): Promise<UpdateTestsetOutput> {
    const path = "/problems/"+encodeURIComponent(input.problemId)+"/testsets/"+encodeURIComponent(input.testsetId);

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.problemId);
    delete(input.testsetId);

    return this.cli.call("PUT", this.url + path, input, opts);
  }

  DeleteTestset<O>(input: DeleteTestsetInput, opts?: O): Promise<DeleteTestsetOutput> {
    const path = "/problems/"+encodeURIComponent(input.problemId)+"/testsets/"+encodeURIComponent(input.testsetId);

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.problemId);
    delete(input.testsetId);

    return this.cli.call("DELETE", this.url + path, input, opts);
  }

  ListTestsets<O>(input: ListTestsetsInput, opts?: O): Promise<ListTestsetsOutput> {
    const path = "/problems/"+encodeURIComponent(input.problemId)+"/testsets";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.problemId);

    return this.cli.call("GET", this.url + path, input, opts);
  }

  DescribeTestset<O>(input: DescribeTestsetInput, opts?: O): Promise<DescribeTestsetOutput> {
    const path = "/problems/"+encodeURIComponent(input.problemId)+"/testsets/"+encodeURIComponent(input.testsetId);

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.problemId);
    delete(input.testsetId);

    return this.cli.call("GET", this.url + path, input, opts);
  }

  CreateTest<O>(input: CreateTestInput, opts?: O): Promise<CreateTestOutput> {
    const path = "/problems/"+encodeURIComponent(input.problemId)+"/testsets/"+encodeURIComponent(input.testsetId)+"/tests";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.problemId);
    delete(input.testsetId);

    return this.cli.call("POST", this.url + path, input, opts);
  }

  UpdateTest<O>(input: UpdateTestInput, opts?: O): Promise<UpdateTestOutput> {
    const path = "/problems/"+encodeURIComponent(input.problemId)+"/testsets/"+encodeURIComponent(input.testsetId)+"/tests/"+encodeURIComponent(input.testId);

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.problemId);
    delete(input.testsetId);
    delete(input.testId);

    return this.cli.call("PUT", this.url + path, input, opts);
  }

  DeleteTest<O>(input: DeleteTestInput, opts?: O): Promise<DeleteTestOutput> {
    const path = "/problems/"+encodeURIComponent(input.problemId)+"/testsets/"+encodeURIComponent(input.testsetId)+"/tests/"+encodeURIComponent(input.testId);

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.problemId);
    delete(input.testsetId);
    delete(input.testId);

    return this.cli.call("DELETE", this.url + path, input, opts);
  }

  ListTests<O>(input: ListTestsInput, opts?: O): Promise<ListTestsOutput> {
    const path = "/problems/"+encodeURIComponent(input.problemId)+"/testsets/"+encodeURIComponent(input.testsetId)+"/tests";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.problemId);
    delete(input.testsetId);

    return this.cli.call("GET", this.url + path, input, opts);
  }

  DescribeTest<O>(input: DescribeTestInput, opts?: O): Promise<DescribeTestOutput> {
    const path = "/problems/"+encodeURIComponent(input.problemId)+"/testsets/"+encodeURIComponent(input.testsetId)+"/tests/"+encodeURIComponent(input.testId);

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.problemId);
    delete(input.testsetId);
    delete(input.testId);

    return this.cli.call("GET", this.url + path, input, opts);
  }

  GrantPermission<O>(input: GrantPermissionInput, opts?: O): Promise<GrantPermissionOutput> {
    const path = "/problems/"+encodeURIComponent(input.problemId)+"/permissions";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.problemId);

    return this.cli.call("POST", this.url + path, input, opts);
  }

  RevokePermission<O>(input: RevokePermissionInput, opts?: O): Promise<RevokePermissionOutput> {
    const path = "/problems/"+encodeURIComponent(input.problemId)+"/permissions/"+encodeURIComponent(input.userId);

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.problemId);
    delete(input.userId);

    return this.cli.call("DELETE", this.url + path, input, opts);
  }

  ListPermissions<O>(input: ListPermissionsInput, opts?: O): Promise<ListPermissionsOutput> {
    const path = "/problems/"+encodeURIComponent(input.problemId)+"/permissions";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.problemId);

    return this.cli.call("GET", this.url + path, input, opts);
  }

  CreateCodeTemplate<O>(input: CreateCodeTemplateInput, opts?: O): Promise<CreateCodeTemplateOutput> {
    const path = "/problems/"+encodeURIComponent(input.problemId)+"/templates";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.problemId);

    return this.cli.call("POST", this.url + path, input, opts);
  }

  UpdateCodeTemplate<O>(input: UpdateCodeTemplateInput, opts?: O): Promise<UpdateCodeTemplateOutput> {
    const path = "/problems/"+encodeURIComponent(input.problemId)+"/templates/"+encodeURIComponent(input.templateId);

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.problemId);
    delete(input.templateId);

    return this.cli.call("POST", this.url + path, input, opts);
  }

  DeleteCodeTemplate<O>(input: DeleteCodeTemplateInput, opts?: O): Promise<DeleteCodeTemplateOutput> {
    const path = "/problems/"+encodeURIComponent(input.problemId)+"/templates/"+encodeURIComponent(input.templateId);

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.problemId);
    delete(input.templateId);

    return this.cli.call("DELETE", this.url + path, input, opts);
  }

  ListCodeTemplates<O>(input: ListCodeTemplatesInput, opts?: O): Promise<ListCodeTemplatesOutput> {
    const path = "/problems/"+encodeURIComponent(input.problemId)+"/templates";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.problemId);

    return this.cli.call("GET", this.url + path, input, opts);
  }

  DescribeCodeTemplate<O>(input: DescribeCodeTemplateInput, opts?: O): Promise<DescribeCodeTemplateOutput> {
    const path = "/problems/"+encodeURIComponent(input.problemId)+"/templates/"+encodeURIComponent(input.templateId);

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.problemId);
    delete(input.templateId);

    return this.cli.call("GET", this.url + path, input, opts);
  }

  CreateAttachment<O>(input: CreateAttachmentInput, opts?: O): Promise<CreateAttachmentOutput> {
    const path = "/problems/"+encodeURIComponent(input.problemId)+"/attachments";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.problemId);

    return this.cli.call("POST", this.url + path, input, opts);
  }

  UpdateAttachment<O>(input: UpdateAttachmentInput, opts?: O): Promise<UpdateAttachmentOutput> {
    const path = "/problems/"+encodeURIComponent(input.problemId)+"/attachments/"+encodeURIComponent(input.attachmentId);

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.problemId);
    delete(input.attachmentId);

    return this.cli.call("POST", this.url + path, input, opts);
  }

  DeleteAttachment<O>(input: DeleteAttachmentInput, opts?: O): Promise<DeleteAttachmentOutput> {
    const path = "/problems/"+encodeURIComponent(input.problemId)+"/attachments/"+encodeURIComponent(input.attachmentId);

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.problemId);
    delete(input.attachmentId);

    return this.cli.call("DELETE", this.url + path, input, opts);
  }

  ListAttachments<O>(input: ListAttachmentsInput, opts?: O): Promise<ListAttachmentsOutput> {
    const path = "/problems/"+encodeURIComponent(input.problemId)+"/attachments";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.problemId);

    return this.cli.call("GET", this.url + path, input, opts);
  }

  DescribeAttachment<O>(input: DescribeAttachmentInput, opts?: O): Promise<DescribeAttachmentOutput> {
    const path = "/problems/"+encodeURIComponent(input.problemId)+"/attachments/"+encodeURIComponent(input.attachmentId);

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.problemId);
    delete(input.attachmentId);

    return this.cli.call("GET", this.url + path, input, opts);
  }

  DescribeChange<O>(input: DescribeChangeInput, opts?: O): Promise<DescribeChangeOutput> {
    const path = "/problems/"+encodeURIComponent(input.problemId)+"/changes/"+encodeURIComponent(input.changeId);

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.problemId);
    delete(input.changeId);

    return this.cli.call("GET", this.url + path, input, opts);
  }

  ListChanges<O>(input: ListChangesInput, opts?: O): Promise<ListChangesOutput> {
    const path = "/problems/"+encodeURIComponent(input.problemId)+"/changes";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.problemId);

    return this.cli.call("GET", this.url + path, input, opts);
  }

  ListProblemTop<O>(input: ListProblemTopInput, opts?: O): Promise<ListProblemTopOutput> {
    const path = "/problems/"+encodeURIComponent(input.problemId)+"/top";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.problemId);

    return this.cli.call("GET", this.url + path, input, opts);
  }

  DescribeProblemGrading<O>(input: DescribeProblemGradingInput, opts?: O): Promise<DescribeProblemGradingOutput> {
    const path = "/problems/"+encodeURIComponent(input.problemId)+"/grading";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.problemId);

    return this.cli.call("GET", this.url + path, input, opts);
  }

  CreateSolution<O>(input: CreateSolutionInput, opts?: O): Promise<CreateSolutionOutput> {
    const path = "/problems/"+encodeURIComponent(input.problemId)+"/solutions";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.problemId);

    return this.cli.call("POST", this.url + path, input, opts);
  }

  UpdateSolution<O>(input: UpdateSolutionInput, opts?: O): Promise<UpdateSolutionOutput> {
    const path = "/problems/"+encodeURIComponent(input.problemId)+"/solutions/"+encodeURIComponent(input.solutionId);

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.problemId);
    delete(input.solutionId);

    return this.cli.call("POST", this.url + path, input, opts);
  }

  DeleteSolution<O>(input: DeleteSolutionInput, opts?: O): Promise<DeleteSolutionOutput> {
    const path = "/problems/"+encodeURIComponent(input.problemId)+"/solutions/"+encodeURIComponent(input.solutionId);

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.problemId);
    delete(input.solutionId);

    return this.cli.call("DELETE", this.url + path, input, opts);
  }

  ListSolutions<O>(input: ListSolutionsInput, opts?: O): Promise<ListSolutionsOutput> {
    const path = "/problems/"+encodeURIComponent(input.problemId)+"/solutions";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.problemId);

    return this.cli.call("GET", this.url + path, input, opts);
  }

  DescribeSolution<O>(input: DescribeSolutionInput, opts?: O): Promise<DescribeSolutionOutput> {
    const path = "/problems/"+encodeURIComponent(input.problemId)+"/solutions/"+encodeURIComponent(input.solutionId);

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.problemId);
    delete(input.solutionId);

    return this.cli.call("GET", this.url + path, input, opts);
  }

  PublishSolution<O>(input: PublishSolutionInput, opts?: O): Promise<PublishSolutionOutput> {
    const path = "/problems/"+encodeURIComponent(input.problemId)+"/solutions/"+encodeURIComponent(input.solutionId)+"/publish";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.problemId);
    delete(input.solutionId);

    return this.cli.call("POST", this.url + path, input, opts);
  }

  UnpublishSolution<O>(input: UnpublishSolutionInput, opts?: O): Promise<UnpublishSolutionOutput> {
    const path = "/problems/"+encodeURIComponent(input.problemId)+"/solutions/"+encodeURIComponent(input.solutionId)+"/unpublish";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.problemId);
    delete(input.solutionId);

    return this.cli.call("POST", this.url + path, input, opts);
  }

  ApproveSolution<O>(input: ApproveSolutionInput, opts?: O): Promise<ApproveSolutionOutput> {
    const path = "/problems/"+encodeURIComponent(input.problemId)+"/solutions/"+encodeURIComponent(input.solutionId)+"/approve";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.problemId);
    delete(input.solutionId);

    return this.cli.call("POST", this.url + path, input, opts);
  }

  RefuseSolution<O>(input: RefuseSolutionInput, opts?: O): Promise<RefuseSolutionOutput> {
    const path = "/problems/"+encodeURIComponent(input.problemId)+"/solutions/"+encodeURIComponent(input.solutionId)+"/refuse";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.problemId);
    delete(input.solutionId);

    return this.cli.call("POST", this.url + path, input, opts);
  }

  CreateCategory<O>(input: CreateCategoryInput, opts?: O): Promise<CreateCategoryOutput> {
    const path = "/categories";

    return this.cli.call("POST", this.url + path, input, opts);
  }

  UpdateCategory<O>(input: UpdateCategoryInput, opts?: O): Promise<UpdateCategoryOutput> {
    const path = "/categories/"+encodeURIComponent(input.categoryId);

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.categoryId);

    return this.cli.call("POST", this.url + path, input, opts);
  }

  DeleteCategory<O>(input: DeleteCategoryInput, opts?: O): Promise<DeleteCategoryOutput> {
    const path = "/categories/"+encodeURIComponent(input.categoryId);

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.categoryId);

    return this.cli.call("DELETE", this.url + path, input, opts);
  }

  ListCategories<O>(input: ListCategoriesInput, opts?: O): Promise<ListCategoriesOutput> {
    const path = "/categories";

    return this.cli.call("GET", this.url + path, input, opts);
  }

  DescribeCategory<O>(input: DescribeCategoryInput, opts?: O): Promise<DescribeCategoryOutput> {
    const path = "/categories/"+encodeURIComponent(input.categoryId);

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.categoryId);

    return this.cli.call("GET", this.url + path, input, opts);
  }

  AssignCategory<O>(input: AssignCategoryInput, opts?: O): Promise<AssignCategoryOutput> {
    const path = "/categories/"+encodeURIComponent(input.categoryId)+"/problems/"+encodeURIComponent(input.problemId);

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.categoryId);
    delete(input.problemId);

    return this.cli.call("POST", this.url + path, input, opts);
  }

  UnassignCategory<O>(input: UnassignCategoryInput, opts?: O): Promise<UnassignCategoryOutput> {
    const path = "/categories/"+encodeURIComponent(input.categoryId)+"/problems/"+encodeURIComponent(input.problemId);

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.categoryId);
    delete(input.problemId);

    return this.cli.call("DELETE", this.url + path, input, opts);
  }

  CreateSubmission<O>(input: CreateSubmissionInput, opts?: O): Promise<CreateSubmissionOutput> {
    const path = "/problems/"+encodeURIComponent(input.problemId)+"/submissions";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.problemId);

    return this.cli.call("POST", this.url + path, input, opts);
  }

  DescribeSubmission<O>(input: DescribeSubmissionInput, opts?: O): Promise<DescribeSubmissionOutput> {
    const path = "/problems/"+encodeURIComponent(input.problemId)+"/submissions/"+encodeURIComponent(input.submissionId);

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.problemId);
    delete(input.submissionId);

    return this.cli.call("GET", this.url + path, input, opts);
  }

  RetestSubmission<O>(input: RetestSubmissionInput, opts?: O): Promise<RetestSubmissionOutput> {
    const path = "/problems/"+encodeURIComponent(input.problemId)+"/submissions/"+encodeURIComponent(input.submissionId)+"/retest";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.problemId);
    delete(input.submissionId);

    return this.cli.call("POST", this.url + path, input, opts);
  }

  DescribeScore<O>(input: DescribeScoreInput, opts?: O): Promise<DescribeScoreOutput> {
    const path = "/problems/"+encodeURIComponent(input.problemId)+"/scores/"+encodeURIComponent(input.userId);

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.problemId);
    delete(input.userId);

    return this.cli.call("GET", this.url + path, input, opts);
  }
}

export type ListProblemsInput = {
  offset?: number;
  size?: number;
  filters?: ListProblemsInput_Filter;
}

export type ListProblemsInput_Filter = {
  id?: ExpressionID[];
  categoryId?: ExpressionID[];
  isVisible?: ExpressionBool[];
  isPrivate?: ExpressionBool[];
  number?: ExpressionInt[];
}

export type ListProblemsOutput = {
  total?: number;
  items?: Problem[];
}

export type CreateProblemInput = {
  problem?: Problem;
  statement?: Statement;
}

export type CreateProblemOutput = {
  problemId?: string;
}

export type DeleteProblemInput = {
  problemId?: string;
}

export type DeleteProblemOutput = Record<string, unknown>;

export type DescribeProblemInput = {
  problemId?: string;
  problemErn?: string;
}

export type DescribeProblemOutput = {
  problem?: Problem;
}

export type ListStatementsInput = {
  problemId?: string;
}

export type ListStatementsOutput = {
  total?: number;
  items?: Statement[];
}

export type DescribeStatementInput = {
  problemId?: string;
  statementId?: string;
}

export type DescribeStatementOutput = {
  statement?: Statement;
}

export type CreateStatementInput = {
  problemId?: string;
  statement?: Statement;
}

export type CreateStatementOutput = {
  statementId?: string;
}

export type UpdateStatementInput = {
  problemId?: string;
  statementId?: string;
  statement?: Statement;
}

export type UpdateStatementOutput = Record<string, unknown>;

export type DeleteStatementInput = {
  problemId?: string;
  statementId?: string;
}

export type DeleteStatementOutput = Record<string, unknown>;

export type UpdateVerifierInput = {
  problemId?: string;
  verifier?: Verifier;
}

export type UpdateVerifierOutput = Record<string, unknown>;

export type DescribeVerifierInput = {
  problemId?: string;
}

export type DescribeVerifierOutput = {
  verifier?: Verifier;
}

export type UpdateInteractorInput = {
  problemId?: string;
  interactor?: Interactor;
}

export type UpdateInteractorOutput = Record<string, unknown>;

export type DescribeInteractorInput = {
  problemId?: string;
}

export type DescribeInteractorOutput = {
  interactor?: Interactor;
}

export type ListTestsetsInput = {
  problemId?: string;
}

export type ListTestsetsOutput = {
  total?: number;
  items?: Testset[];
}

export type DescribeTestsetInput = {
  problemId?: string;
  testsetId?: string;
}

export type DescribeTestsetOutput = {
  testset?: Testset;
}

export type CreateTestsetInput = {
  problemId?: string;
  testset?: Testset;
}

export type CreateTestsetOutput = {
  id?: string;
}

export type UpdateTestsetInput = {
  problemId?: string;
  testsetId?: string;
  testset?: Testset;
}

export type UpdateTestsetOutput = Record<string, unknown>;

export type DeleteTestsetInput = {
  problemId?: string;
  testsetId?: string;
}

export type DeleteTestsetOutput = Record<string, unknown>;

export type ListExamplesInput = {
  problemId?: string;
}

export type ListExamplesOutput = {
  examples?: Test[];
}

export type ListTestsInput = {
  problemId?: string;
  testsetId?: string;
}

export type ListTestsOutput = {
  total?: number;
  items?: Test[];
}

export type DescribeTestInput = {
  problemId?: string;
  testsetId?: string;
  testId?: string;
}

export type DescribeTestOutput = {
  test?: Test;
}

export type CreateTestInput = {
  problemId?: string;
  testsetId?: string;
  test?: Test;
}

export type CreateTestOutput = {
  testId?: string;
}

export type UpdateTestInput = {
  problemId?: string;
  testsetId?: string;
  testId?: string;
  test?: Test;
}

export type UpdateTestOutput = Record<string, unknown>;

export type DeleteTestInput = {
  problemId?: string;
  testsetId?: string;
  testId?: string;
}

export type DeleteTestOutput = Record<string, unknown>;

export type ListPermissionsInput = {
  problemId?: string;
}

export type ListPermissionsOutput = {
  items?: Permission[];
}

export type GrantPermissionInput = {
  problemId?: string;
  permission?: Permission;
}

export type GrantPermissionOutput = Record<string, unknown>;

export type RevokePermissionInput = {
  problemId?: string;
  userId?: string;
}

export type RevokePermissionOutput = Record<string, unknown>;

export type CreateCodeTemplateInput = {
  problemId?: string;
  template?: Template;
}

export type CreateCodeTemplateOutput = {
  templateId?: string;
}

export type UpdateCodeTemplateInput = {
  problemId?: string;
  templateId?: string;
  template?: Template;
}

export type UpdateCodeTemplateOutput = Record<string, unknown>;

export type DeleteCodeTemplateInput = {
  problemId?: string;
  templateId?: string;
}

export type DeleteCodeTemplateOutput = Record<string, unknown>;

export type ListCodeTemplatesInput = {
  problemId?: string;
}

export type ListCodeTemplatesOutput = {
  total?: number;
  items?: Template[];
}

export type DescribeCodeTemplateInput = {
  problemId?: string;
  templateId?: string;
  templateErn?: string;
}

export type DescribeCodeTemplateOutput = {
  template?: Template;
}

export type CreateAttachmentInput = {
  problemId?: string;
  attachment?: Attachment;
}

export type CreateAttachmentOutput = {
  attachmentId?: string;
}

export type UpdateAttachmentInput = {
  problemId?: string;
  attachmentId?: string;
  attachment?: Attachment;
}

export type UpdateAttachmentOutput = Record<string, unknown>;

export type DeleteAttachmentInput = {
  problemId?: string;
  attachmentId?: string;
}

export type DeleteAttachmentOutput = Record<string, unknown>;

export type ListAttachmentsInput = {
  problemId?: string;
  offset?: number;
  size?: number;
  filters?: ListAttachmentsInput_Filter;
}

export type ListAttachmentsInput_Filter = {
  id?: ExpressionID[];
  name?: ExpressionString[];
}

export type ListAttachmentsOutput = {
  total?: number;
  items?: Attachment[];
}

export type DescribeAttachmentInput = {
  problemId?: string;
  attachmentId?: string;
}

export type DescribeAttachmentOutput = {
  attachment?: Attachment;
}

export type DescribeChangeInput = {
  problemId?: string;
  changeId?: string;
}

export type DescribeChangeOutput = {
  change?: Change;
}

export type ListChangesInput = {
  problemId?: string;
  offset?: number;
  size?: number;
  filters?: ListChangesInput_Filter;
}

export type ListChangesInput_Filter = {
  id?: ExpressionID[];
  ipAddress?: ExpressionID[];
  userId?: ExpressionID[];
  timestamp?: ExpressionTimestamp[];
  type?: ExpressionEnum[];
}

export type ListChangesOutput = {
  total?: number;
  items?: Change[];
}

export type ListProblemTopInput = {
  problemId?: string;
}

export type ListProblemTopOutput = {
  items?: Submission[];
}

export type DescribeProblemGradingInput = {
  problemId?: string;
}

export type DescribeProblemGradingOutput = {
  ranges?: DescribeProblemGradingOutput_Range[];
}

export type DescribeProblemGradingOutput_Range = {
  grade?: number;
  upperBound?: number;
}

export type CreateSolutionInput = {
  problemId?: string;
  solution?: Solution;
}

export type CreateSolutionOutput = {
  solutionId?: string;
}

export type UpdateSolutionInput = {
  problemId?: string;
  solutionId?: string;
  solution?: Solution;
}

export type UpdateSolutionOutput = Record<string, unknown>;

export type DeleteSolutionInput = {
  problemId?: string;
  solutionId?: string;
}

export type DeleteSolutionOutput = Record<string, unknown>;

export type ListSolutionsInput = {
  problemId?: string;
  offset?: number;
  size?: number;
  filters?: ListSolutionsInput_Filter;
}

export type ListSolutionsInput_Filter = {
  id?: ExpressionID[];
  problemId?: ExpressionID[];
  authorId?: ExpressionID[];
  moderationStatus?: ExpressionEnum[];
  published?: ExpressionBool[];
  lang?: ExpressionEnum[];
}

export type ListSolutionsOutput = {
  total?: number;
  items?: Solution[];
}

export type DescribeSolutionInput = {
  problemId?: string;
  solutionId?: string;
}

export type DescribeSolutionOutput = {
  solution?: Solution;
}

export type PublishSolutionInput = {
  problemId?: string;
  solutionId?: string;
}

export type PublishSolutionOutput = Record<string, unknown>;

export type UnpublishSolutionInput = {
  problemId?: string;
  solutionId?: string;
}

export type UnpublishSolutionOutput = Record<string, unknown>;

export type ApproveSolutionInput = {
  problemId?: string;
  solutionId?: string;
}

export type ApproveSolutionOutput = Record<string, unknown>;

export type RefuseSolutionInput = {
  problemId?: string;
  solutionId?: string;
  comment?: string;
}

export type RefuseSolutionOutput = Record<string, unknown>;

export type ListCategoriesInput = {
  offset?: number;
  size?: number;
  filters?: ListCategoriesInput_Filter;
}

export type ListCategoriesInput_Filter = {
  id?: ExpressionID[];
  parentId?: ExpressionID[];
  problemId?: ExpressionID[];
  isVisible?: ExpressionBool[];
}

export type ListCategoriesOutput = {
  total?: number;
  items?: Category[];
}

export type CreateCategoryInput = {
  category?: Category;
}

export type CreateCategoryOutput = {
  categoryId?: string;
}

export type UpdateCategoryInput = {
  categoryId?: string;
  category?: Category;
}

export type UpdateCategoryOutput = Record<string, unknown>;

export type DeleteCategoryInput = {
  categoryId?: string;
}

export type DeleteCategoryOutput = Record<string, unknown>;

export type DescribeCategoryInput = {
  categoryId?: string;
}

export type DescribeCategoryOutput = {
  category?: Category;
}

export type AssignCategoryInput = {
  categoryId?: string;
  problemId?: string;
  index?: number;
}

export type AssignCategoryOutput = Record<string, unknown>;

export type UnassignCategoryInput = {
  categoryId?: string;
  problemId?: string;
}

export type UnassignCategoryOutput = Record<string, unknown>;

export type CreateSubmissionInput = {
  problemId?: string;
  lang?: string;
  source?: string;
}

export type CreateSubmissionOutput = {
  submissionId?: string;
}

export type DescribeSubmissionInput = {
  problemId?: string;
  submissionId?: string;
}

export type DescribeSubmissionOutput = {
  submission?: Submission;
}

export type RetestSubmissionInput = {
  problemId?: string;
  submissionId?: string;
  debug?: boolean;
}

export type RetestSubmissionOutput = Record<string, unknown>;

export type DescribeScoreInput = {
  problemId?: string;
  userId?: string;
}

export type DescribeScoreOutput = {
  score?: Score;
}

export type UpdateVisibilityInput = {
  problemId?: string;
  visible?: boolean;
}

export type UpdateVisibilityOutput = Record<string, unknown>;

export type UpdatePrivacyInput = {
  problemId?: string;
  private?: boolean;
}

export type UpdatePrivacyOutput = Record<string, unknown>;

