// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { ExpressionEnum, ExpressionID, ExpressionString } from "../wellknown/expression"
import { Solution } from "./solution"

interface Client {
  call<R, E, O>(verb: string, url: string, args: R, opts?: any): Promise<E>;
}

export class SolutionService {
  private readonly cli: Client;
  private readonly url: string;

  constructor(cli: Client, url: string = 'https://api.eolymp.com') {
    this.cli = cli;
    this.url = url;
  }

  CreateSolution(input: CreateSolutionInput, opts?: any): Promise<CreateSolutionOutput> {
    const path = "/solutions";

    return this.cli.call("PUT", this.url+path, input, opts);
  }

  UpdateSolution(input: UpdateSolutionInput, opts?: any): Promise<UpdateSolutionOutput> {
    const path = "/solutions/"+encodeURIComponent(input.solutionId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.solutionId);

    return this.cli.call("PUT", this.url+path, input, opts);
  }

  DeleteSolution(input: DeleteSolutionInput, opts?: any): Promise<DeleteSolutionOutput> {
    const path = "/solutions/"+encodeURIComponent(input.solutionId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.solutionId);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }

  DescribeSolution(input: DescribeSolutionInput, opts?: any): Promise<DescribeSolutionOutput> {
    const path = "/solutions/"+encodeURIComponent(input.solutionId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.solutionId);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  ListSolutions(input: ListSolutionsInput, opts?: any): Promise<ListSolutionsOutput> {
    const path = "/solutions";

    return this.cli.call("GET", this.url+path, input, opts);
  }
}

export type ListSolutionsInput = {
  problemId?: string;
  version?: number;
  offset?: number;
  size?: number;
  filters?: ListSolutionsInput_Filter;
  sort?: string;
  order?: string;
}

export type ListSolutionsInput_Filter = {
  query?: string;
  id?: ExpressionID[];
  type?: ExpressionEnum[];
  name?: ExpressionString[];
  runtime?: ExpressionEnum[];
}

export type ListSolutionsOutput = {
  total?: number;
  items?: Solution[];
}

export type DescribeSolutionInput = {
  problemId?: string;
  solutionId?: string;
  version?: number;
}

export type DescribeSolutionOutput = {
  solution?: Solution;
}

export type CreateSolutionInput = {
  problemId?: string;
  solution?: Solution;
}

export type CreateSolutionOutput = {
  solutionId?: string;
}

export type UpdateSolutionInput = {
  patch?: string[];
  problemId?: string;
  solutionId?: string;
  solution?: Solution;
}

export type UpdateSolutionOutput = Record<string, unknown>;

export type DeleteSolutionInput = {
  problemId?: string;
  solutionId?: string;
}

export type DeleteSolutionOutput = Record<string, unknown>;

