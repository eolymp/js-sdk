// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { Script } from "./script"

interface Client {
  call<R, E, O>(verb: string, url: string, args: R, opts?: any): Promise<E>;
}

export class ScriptService {
  private readonly cli: Client;
  private readonly url: string;

  constructor(cli: Client, url: string = 'https://api.eolymp.com') {
    this.cli = cli;
    this.url = url;
  }

  CreateScript(input: CreateScriptInput, opts?: any): Promise<CreateScriptOutput> {
    const path = "/scripts";

    return this.cli.call("PUT", this.url+path, input, opts);
  }

  UpdateScript(input: UpdateScriptInput, opts?: any): Promise<UpdateScriptOutput> {
    const path = "/scripts/"+encodeURIComponent(input.scriptId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.scriptId);

    return this.cli.call("PUT", this.url+path, input, opts);
  }

  DeleteScript(input: DeleteScriptInput, opts?: any): Promise<DeleteScriptOutput> {
    const path = "/scripts/"+encodeURIComponent(input.scriptId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.scriptId);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }

  DescribeScript(input: DescribeScriptInput, opts?: any): Promise<DescribeScriptOutput> {
    const path = "/scripts/"+encodeURIComponent(input.scriptId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.scriptId);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  ListScripts(input: ListScriptsInput, opts?: any): Promise<ListScriptsOutput> {
    const path = "/scripts";

    return this.cli.call("GET", this.url+path, input, opts);
  }
}

export type ListScriptsInput = {
  problemId?: string;
  render?: boolean;
  version?: number;
}

export type ListScriptsOutput = {
  total?: number;
  items?: Script[];
}

export type DescribeScriptInput = {
  problemId?: string;
  scriptId?: string;
  render?: boolean;
  version?: number;
}

export type DescribeScriptOutput = {
  script?: Script;
}

export type LookupScriptInput = {
  problemId?: string;
  locale?: string;
  render?: boolean;
  version?: number;
}

export type LookupScriptOutput = {
  script?: Script;
}

export type PreviewScriptInput = {
  problemId?: string;
  script?: Script;
}

export type PreviewScriptOutput = {
  script?: Script;
}

export type CreateScriptInput = {
  problemId?: string;
  script?: Script;
}

export type CreateScriptOutput = {
  scriptId?: string;
}

export type UpdateScriptInput = {
  patch?: string[];
  problemId?: string;
  scriptId?: string;
  script?: Script;
}

export type UpdateScriptOutput = Record<string, unknown>;

export type DeleteScriptInput = {
  problemId?: string;
  scriptId?: string;
}

export type DeleteScriptOutput = Record<string, unknown>;

