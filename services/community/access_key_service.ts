// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { AccessKey } from "./access_key"

interface Client {
  call<R, E, O>(verb: string, url: string, args: R, opts?: any): Promise<E>;
}

export class AccessKeyService {
  private readonly cli: Client;
  private readonly url: string;

  constructor(cli: Client, url: string = 'https://api.eolymp.com') {
    this.cli = cli;
    this.url = url;
  }

  CreateAccessKey(input: CreateAccessKeyInput, opts?: any): Promise<CreateAccessKeyOutput> {
    const path = "/access-keys";

    return this.cli.call("POST", this.url+path, input, opts);
  }

  DeleteAccessKey(input: DeleteAccessKeyInput, opts?: any): Promise<DeleteAccessKeyOutput> {
    const path = "/access-keys/"+encodeURIComponent(input.keyId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.keyId);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }

  ListAccessKeys(input: ListAccessKeysInput, opts?: any): Promise<ListAccessKeysOutput> {
    const path = "/access-keys";

    return this.cli.call("GET", this.url+path, input, opts);
  }
}

export type CreateAccessKeyInput = {
  name?: string;
  scope?: string;
  expiresIn?: number;
}

export type CreateAccessKeyOutput = {
  keyId?: string;
  secret?: string;
}

export type DeleteAccessKeyInput = {
  keyId?: string;
}

export type DeleteAccessKeyOutput = Record<string, unknown>;

export type ListAccessKeysInput = {
  offset?: number;
  size?: number;
}

export type ListAccessKeysOutput = {
  total?: number;
  items?: AccessKey[];
}

