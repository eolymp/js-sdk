// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { ExpressionBool, ExpressionID, ExpressionString } from "../wellknown/expression"
import { Attribute } from "./attribute"
import { Member, Member_Value } from "./member"

interface Client {
  call<R, E>(method: string, args: R): Promise<E>;
}

export class Community {
  private readonly cli: Client;

  constructor(cli: Client) {
    this.cli = cli;
  }

  JoinSpace(input: JoinSpaceInput): Promise<JoinSpaceOutput> {
    return this.cli.call("eolymp.community.Community/JoinSpace", input);
  }

  LeaveSpace(input: LeaveSpaceInput): Promise<LeaveSpaceOutput> {
    return this.cli.call("eolymp.community.Community/LeaveSpace", input);
  }

  AddMember(input: AddMemberInput): Promise<AddMemberOutput> {
    return this.cli.call("eolymp.community.Community/AddMember", input);
  }

  UpdateMember(input: UpdateMemberInput): Promise<UpdateMemberOutput> {
    return this.cli.call("eolymp.community.Community/UpdateMember", input);
  }

  RemoveMember(input: RemoveMemberInput): Promise<RemoveMemberOutput> {
    return this.cli.call("eolymp.community.Community/RemoveMember", input);
  }

  DescribeMember(input: DescribeMemberInput): Promise<DescribeMemberOutput> {
    return this.cli.call("eolymp.community.Community/DescribeMember", input);
  }

  IntrospectMember(input: IntrospectMemberInput): Promise<IntrospectMemberOutput> {
    return this.cli.call("eolymp.community.Community/IntrospectMember", input);
  }

  ListMembers(input: ListMembersInput): Promise<ListMembersOutput> {
    return this.cli.call("eolymp.community.Community/ListMembers", input);
  }

  AddAttribute(input: AddAttributeInput): Promise<AddAttributeOutput> {
    return this.cli.call("eolymp.community.Community/AddAttribute", input);
  }

  UpdateAttribute(input: UpdateAttributeInput): Promise<UpdateAttributeOutput> {
    return this.cli.call("eolymp.community.Community/UpdateAttribute", input);
  }

  RemoveAttribute(input: RemoveAttributeInput): Promise<RemoveAttributeOutput> {
    return this.cli.call("eolymp.community.Community/RemoveAttribute", input);
  }

  DescribeAttribute(input: DescribeAttributeInput): Promise<DescribeAttributeOutput> {
    return this.cli.call("eolymp.community.Community/DescribeAttribute", input);
  }

  ListAttributes(input: ListAttributesInput): Promise<ListAttributesOutput> {
    return this.cli.call("eolymp.community.Community/ListAttributes", input);
  }
}

export type JoinSpaceInput = {
  name?: string;
  values?: Member_Value[];
}

export type JoinSpaceOutput = {
  memberId?: string;
}

export type LeaveSpaceInput = Record<string, unknown>;

export type LeaveSpaceOutput = Record<string, unknown>;

export type AddMemberInput = {
  member?: Member;
}

export type AddMemberOutput = {
  memberId?: string;
}

export type UpdateMemberInput = {
  memberId?: string;
  member?: Member;
}

export type UpdateMemberOutput = Record<string, unknown>;

export type RemoveMemberInput = {
  memberId?: string;
}

export type RemoveMemberOutput = Record<string, unknown>;

export type DescribeMemberInput = {
  memberId?: string;
}

export type DescribeMemberOutput = {
  member?: Member;
}

export type IntrospectMemberInput = Record<string, unknown>;

export type IntrospectMemberOutput = {
  member?: Member;
}

export type ListMembersInput = {
  offset?: number;
  size?: number;
  filters?: ListMembersInput_Filter;
}

export type ListMembersInput_Filter = {
  id?: ExpressionID[];
  userId?: ExpressionID[];
  disabled?: ExpressionBool[];
  name?: ExpressionString[];
}

export type ListMembersOutput = {
  total?: number;
  items?: Member[];
}

export type AddAttributeInput = {
  attributeKey?: string;
  attribute?: Attribute;
}

export type AddAttributeOutput = Record<string, unknown>;

export type UpdateAttributeInput = {
  attributeKey?: string;
  attribute?: Attribute;
}

export type UpdateAttributeOutput = Record<string, unknown>;

export type RemoveAttributeInput = {
  attributeKey?: string;
}

export type RemoveAttributeOutput = Record<string, unknown>;

export type DescribeAttributeInput = {
  attributeKey?: string;
}

export type DescribeAttributeOutput = {
  attribute?: Attribute;
}

export type ListAttributesInput = Record<string, unknown>;

export type ListAttributesOutput = {
  total?: number;
  items?: Attribute[];
}

