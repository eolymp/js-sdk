// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { ExpressionBool, ExpressionEnum, ExpressionID, ExpressionString } from "../wellknown/expression"
import { Attribute } from "./attribute"
import { Identity } from "./identity"
import { IdentityProvider_OIDC } from "./idp"
import { Member, Member_Value } from "./member"

interface Client {
  call<R, E, O>(verb: string, url: string, args: R, opts?: any): Promise<E>;
}

export class Community {
  private readonly cli: Client;
  private readonly url: string;

  constructor(cli: Client, url: string = 'https://api.eolymp.com') {
    this.cli = cli;
    this.url = url;
  }

  JoinSpace(input: JoinSpaceInput, opts?: any): Promise<JoinSpaceOutput> {
    const path = "/members/_self";

    return this.cli.call("POST", this.url+path, input, opts);
  }

  LeaveSpace(input: LeaveSpaceInput, opts?: any): Promise<LeaveSpaceOutput> {
    const path = "/members/_self";

    return this.cli.call("DELETE", this.url+path, input, opts);
  }

  RegisterMember(input: RegisterMemberInput, opts?: any): Promise<RegisterMemberOutput> {
    const path = "/members/_self/attributes";

    return this.cli.call("POST", this.url+path, input, opts);
  }

  IntrospectMember(input: IntrospectMemberInput, opts?: any): Promise<IntrospectMemberOutput> {
    const path = "/members/_self";

    return this.cli.call("GET", this.url+path, input, opts);
  }

  AddMember(input: AddMemberInput, opts?: any): Promise<AddMemberOutput> {
    const path = "/members";

    return this.cli.call("POST", this.url+path, input, opts);
  }

  UpdateMember(input: UpdateMemberInput, opts?: any): Promise<UpdateMemberOutput> {
    const path = "/members/"+encodeURIComponent(input.memberId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.memberId);

    return this.cli.call("POST", this.url+path, input, opts);
  }

  RemoveMember(input: RemoveMemberInput, opts?: any): Promise<RemoveMemberOutput> {
    const path = "/members/"+encodeURIComponent(input.memberId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.memberId);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }

  DescribeMember(input: DescribeMemberInput, opts?: any): Promise<DescribeMemberOutput> {
    const path = "/members/"+encodeURIComponent(input.memberId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.memberId);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  ListMembers(input: ListMembersInput, opts?: any): Promise<ListMembersOutput> {
    const path = "/members";

    return this.cli.call("GET", this.url+path, input, opts);
  }

  AddMemberIdentity(input: AddMemberIdentityInput, opts?: any): Promise<AddMemberIdentityOutput> {
    const path = "/members/"+encodeURIComponent(input.memberId||'')+"/identities";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.memberId);

    return this.cli.call("POST", this.url+path, input, opts);
  }

  UpdateMemberIdentity(input: UpdateMemberIdentityInput, opts?: any): Promise<UpdateMemberIdentityOutput> {
    const path = "/members/"+encodeURIComponent(input.memberId||'')+"/identities/"+encodeURIComponent(input.identityId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.memberId);
    delete(input.identityId);

    return this.cli.call("PUT", this.url+path, input, opts);
  }

  RemoveMemberIdentity(input: RemoveMemberIdentityInput, opts?: any): Promise<RemoveMemberIdentityOutput> {
    const path = "/members/"+encodeURIComponent(input.memberId||'')+"/identities/"+encodeURIComponent(input.identityId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.memberId);
    delete(input.identityId);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }

  AddAttribute(input: AddAttributeInput, opts?: any): Promise<AddAttributeOutput> {
    const path = "/attributes";

    return this.cli.call("POST", this.url+path, input, opts);
  }

  UpdateAttribute(input: UpdateAttributeInput, opts?: any): Promise<UpdateAttributeOutput> {
    const path = "/attributes/"+encodeURIComponent(input.attributeKey||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.attributeKey);

    return this.cli.call("POST", this.url+path, input, opts);
  }

  RemoveAttribute(input: RemoveAttributeInput, opts?: any): Promise<RemoveAttributeOutput> {
    const path = "/attributes/"+encodeURIComponent(input.attributeKey||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.attributeKey);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }

  DescribeAttribute(input: DescribeAttributeInput, opts?: any): Promise<DescribeAttributeOutput> {
    const path = "/attributes/"+encodeURIComponent(input.attributeKey||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.attributeKey);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  ListAttributes(input: ListAttributesInput, opts?: any): Promise<ListAttributesOutput> {
    const path = "/attributes";

    return this.cli.call("GET", this.url+path, input, opts);
  }

  DescribeIdentityProvider(input: DescribeIdentityProviderInput, opts?: any): Promise<DescribeIdentityProviderOutput> {
    const path = "/idp";

    return this.cli.call("GET", this.url+path, input, opts);
  }

  ConfigureIdentityProvider(input: ConfigureIdentityProviderInput, opts?: any): Promise<ConfigureIdentityProviderOutput> {
    const path = "/idp";

    return this.cli.call("PUT", this.url+path, input, opts);
  }
}

export type JoinSpaceInput = {
  name?: string;
  values?: Member_Value[];
}

export type JoinSpaceOutput = {
  ern?: string;
  memberId?: string;
}

export type RegisterMemberInput = {
  values?: Member_Value[];
}

export type RegisterMemberOutput = Record<string, unknown>;

export type LeaveSpaceInput = Record<string, unknown>;

export type LeaveSpaceOutput = Record<string, unknown>;

export type AddMemberInput = {
  member?: Member;
}

export type AddMemberOutput = {
  ern?: string;
  memberId?: string;
}

export type UpdateMemberInput = {
  patch?: string[];
  memberId?: string;
  member?: Member;
}

export type UpdateMemberOutput = Record<string, unknown>;

export type RemoveMemberInput = {
  memberId?: string;
}

export type RemoveMemberOutput = Record<string, unknown>;

export type DescribeMemberInput = {
  memberId?: string;
}

export type DescribeMemberOutput = {
  member?: Member;
}

export type IntrospectMemberInput = Record<string, unknown>;

export type IntrospectMemberOutput = {
  member?: Member;
}

export type ListMembersInput = {
  offset?: number;
  size?: number;
  filters?: ListMembersInput_Filter;
}

export type ListMembersInput_Filter = {
  id?: ExpressionID[];
  userId?: ExpressionID[];
  disabled?: ExpressionBool[];
  name?: ExpressionString[];
  identityName?: ExpressionString[];
  identityNickname?: ExpressionString[];
  identityEmail?: ExpressionString[];
}

export type ListMembersOutput = {
  total?: number;
  items?: Member[];
}

export type AddMemberIdentityInput = {
  memberId?: string;
  identity?: Identity;
}

export type AddMemberIdentityOutput = {
  identityId?: string;
}

export type UpdateMemberIdentityInput = {
  memberId?: string;
  identityId?: string;
  identity?: Identity;
}

export type UpdateMemberIdentityOutput = Record<string, unknown>;

export type RemoveMemberIdentityInput = {
  memberId?: string;
  identityId?: string;
}

export type RemoveMemberIdentityOutput = Record<string, unknown>;

export type AddAttributeInput = {
  attributeKey?: string;
  attribute?: Attribute;
}

export type AddAttributeOutput = {
  ern?: string;
}

export type UpdateAttributeInput = {
  attributeKey?: string;
  attribute?: Attribute;
}

export type UpdateAttributeOutput = Record<string, unknown>;

export type RemoveAttributeInput = {
  attributeKey?: string;
}

export type RemoveAttributeOutput = Record<string, unknown>;

export type DescribeAttributeInput = {
  attributeKey?: string;
}

export type DescribeAttributeOutput = {
  attribute?: Attribute;
}

export type ListAttributesInput = {
  offset?: number;
  size?: number;
  filters?: ListAttributesInput_Filter;
}

export type ListAttributesInput_Filter = {
  id?: ExpressionID[];
  key?: ExpressionEnum[];
  hidden?: ExpressionBool[];
  required?: ExpressionBool[];
  type?: ExpressionEnum[];
}

export type ListAttributesOutput = {
  total?: number;
  items?: Attribute[];
}

export type DescribeIdentityProviderInput = Record<string, unknown>;

export type DescribeIdentityProviderOutput = {
  local?: boolean;
  oidc?: IdentityProvider_OIDC;
}

export type ConfigureIdentityProviderInput = {
  local?: boolean;
  oidc?: IdentityProvider_OIDC;
}

export type ConfigureIdentityProviderOutput = Record<string, unknown>;

