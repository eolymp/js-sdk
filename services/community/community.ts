// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { ExpressionBool, ExpressionEnum, ExpressionID, ExpressionString } from "../wellknown/expression"
import { Attribute } from "./attribute"
import { Member, Member_Value } from "./member"

interface Client {
  call<R, E, O>(method: string, args: R, opts: O): Promise<E>;
}

export class Community {
  private readonly cli: Client;

  constructor(cli: Client) {
    this.cli = cli;
  }

  JoinSpace<O>(input: JoinSpaceInput, opts: O): Promise<JoinSpaceOutput> {
    return this.cli.call("eolymp.community.Community/JoinSpace", input, opts);
  }

  LeaveSpace<O>(input: LeaveSpaceInput, opts: O): Promise<LeaveSpaceOutput> {
    return this.cli.call("eolymp.community.Community/LeaveSpace", input, opts);
  }

  RegisterMember<O>(input: RegisterMemberInput, opts: O): Promise<RegisterMemberOutput> {
    return this.cli.call("eolymp.community.Community/RegisterMember", input, opts);
  }

  IntrospectMember<O>(input: IntrospectMemberInput, opts: O): Promise<IntrospectMemberOutput> {
    return this.cli.call("eolymp.community.Community/IntrospectMember", input, opts);
  }

  AddMember<O>(input: AddMemberInput, opts: O): Promise<AddMemberOutput> {
    return this.cli.call("eolymp.community.Community/AddMember", input, opts);
  }

  UpdateMember<O>(input: UpdateMemberInput, opts: O): Promise<UpdateMemberOutput> {
    return this.cli.call("eolymp.community.Community/UpdateMember", input, opts);
  }

  RemoveMember<O>(input: RemoveMemberInput, opts: O): Promise<RemoveMemberOutput> {
    return this.cli.call("eolymp.community.Community/RemoveMember", input, opts);
  }

  DescribeMember<O>(input: DescribeMemberInput, opts: O): Promise<DescribeMemberOutput> {
    return this.cli.call("eolymp.community.Community/DescribeMember", input, opts);
  }

  ListMembers<O>(input: ListMembersInput, opts: O): Promise<ListMembersOutput> {
    return this.cli.call("eolymp.community.Community/ListMembers", input, opts);
  }

  AddAttribute<O>(input: AddAttributeInput, opts: O): Promise<AddAttributeOutput> {
    return this.cli.call("eolymp.community.Community/AddAttribute", input, opts);
  }

  UpdateAttribute<O>(input: UpdateAttributeInput, opts: O): Promise<UpdateAttributeOutput> {
    return this.cli.call("eolymp.community.Community/UpdateAttribute", input, opts);
  }

  RemoveAttribute<O>(input: RemoveAttributeInput, opts: O): Promise<RemoveAttributeOutput> {
    return this.cli.call("eolymp.community.Community/RemoveAttribute", input, opts);
  }

  DescribeAttribute<O>(input: DescribeAttributeInput, opts: O): Promise<DescribeAttributeOutput> {
    return this.cli.call("eolymp.community.Community/DescribeAttribute", input, opts);
  }

  ListAttributes<O>(input: ListAttributesInput, opts: O): Promise<ListAttributesOutput> {
    return this.cli.call("eolymp.community.Community/ListAttributes", input, opts);
  }
}

export type JoinSpaceInput = {
  name?: string;
  values?: Member_Value[];
}

export type JoinSpaceOutput = {
  memberId?: string;
}

export type RegisterMemberInput = {
  values?: Member_Value[];
}

export type RegisterMemberOutput = Record<string, unknown>;

export type LeaveSpaceInput = Record<string, unknown>;

export type LeaveSpaceOutput = Record<string, unknown>;

export type AddMemberInput = {
  member?: Member;
}

export type AddMemberOutput = {
  memberId?: string;
}

export type UpdateMemberInput = {
  memberId?: string;
  member?: Member;
}

export type UpdateMemberOutput = Record<string, unknown>;

export type RemoveMemberInput = {
  memberId?: string;
}

export type RemoveMemberOutput = Record<string, unknown>;

export type DescribeMemberInput = {
  memberId?: string;
}

export type DescribeMemberOutput = {
  member?: Member;
}

export type IntrospectMemberInput = Record<string, unknown>;

export type IntrospectMemberOutput = {
  member?: Member;
}

export type ListMembersInput = {
  offset?: number;
  size?: number;
  filters?: ListMembersInput_Filter;
}

export type ListMembersInput_Filter = {
  id?: ExpressionID[];
  userId?: ExpressionID[];
  disabled?: ExpressionBool[];
  name?: ExpressionString[];
}

export type ListMembersOutput = {
  total?: number;
  items?: Member[];
}

export type AddAttributeInput = {
  attributeKey?: string;
  attribute?: Attribute;
}

export type AddAttributeOutput = Record<string, unknown>;

export type UpdateAttributeInput = {
  attributeKey?: string;
  attribute?: Attribute;
}

export type UpdateAttributeOutput = Record<string, unknown>;

export type RemoveAttributeInput = {
  attributeKey?: string;
}

export type RemoveAttributeOutput = Record<string, unknown>;

export type DescribeAttributeInput = {
  attributeKey?: string;
}

export type DescribeAttributeOutput = {
  attribute?: Attribute;
}

export type ListAttributesInput = {
  offset?: number;
  size?: number;
  filters?: ListAttributesInput_Filter;
}

export type ListAttributesInput_Filter = {
  id?: ExpressionID[];
  key?: ExpressionEnum[];
  hidden?: ExpressionBool[];
  required?: ExpressionBool[];
  type?: ExpressionEnum[];
}

export type ListAttributesOutput = {
  total?: number;
  items?: Attribute[];
}

