// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { ExpressionEnum, ExpressionID, ExpressionTimestamp } from "../wellknown/expression"
import { Session } from "./session"

interface Client {
  call<R, E, O>(verb: string, url: string, args: R, opts?: any): Promise<E>;
}

export class SessionService {
  private readonly cli: Client;
  private readonly url: string;

  constructor(cli: Client, url: string = 'https://api.eolymp.com') {
    this.cli = cli;
    this.url = url;
  }

  DescribeSession(input: DescribeSessionInput, opts?: any): Promise<DescribeSessionOutput> {
    const path = "/sessions/"+encodeURIComponent(input.sessionId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.sessionId);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  ListSessions(input: ListSessionsInput, opts?: any): Promise<ListSessionsOutput> {
    const path = "/sessions";

    return this.cli.call("GET", this.url+path, input, opts);
  }

  TerminateSession(input: TerminateSessionInput, opts?: any): Promise<TerminateSessionOutput> {
    const path = "/sessions/"+encodeURIComponent(input.sessionId||'')+"/terminate";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.sessionId);

    return this.cli.call("POST", this.url+path, input, opts);
  }

  TerminateAllSessions(input: TerminateAllSessionsInput, opts?: any): Promise<TerminateAllSessionsOutput> {
    const path = "/sessions:terminate-all";

    return this.cli.call("POST", this.url+path, input, opts);
  }
}

export type DescribeSessionInput = {
  sessionId?: string;
}

export type DescribeSessionOutput = {
  session?: Session;
}

export type ListSessionsInput = {
  offset?: number;
  size?: number;
  filters?: ListSessionsInput_Filter;
}

export type ListSessionsInput_Filter = {
  id?: ExpressionID[];
  ipAddress?: ExpressionEnum[];
  firstSeenAt?: ExpressionTimestamp[];
  lastSeenAt?: ExpressionTimestamp[];
}

export type ListSessionsOutput = {
  total?: number;
  items?: Session[];
}

export type TerminateSessionInput = {
  sessionId?: string;
}

export type TerminateSessionOutput = Record<string, unknown>;

export type TerminateAllSessionsInput = {
  sessionId?: string;
}

export type TerminateAllSessionsOutput = {
  session?: Session;
}

