// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { Penalty } from "./penalty"

interface Client {
  call<R, E, O>(verb: string, url: string, args: R, opts?: any): Promise<E>;
}

export class PenaltyService {
  private readonly cli: Client;
  private readonly url: string;

  constructor(cli: Client, url: string = 'https://api.eolymp.com') {
    this.cli = cli;
    this.url = url;
  }

  CreatePenalty(input: CreatePenaltyInput, opts?: any): Promise<CreatePenaltyOutput> {
    const path = "/penalties";

    return this.cli.call("POST", this.url+path, input, opts);
  }

  CancelPenalty(input: CancelPenaltyInput, opts?: any): Promise<CancelPenaltyOutput> {
    const path = "/penalties/"+encodeURIComponent(input.penaltyId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.penaltyId);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }

  DescribePenalty(input: DescribePenaltyInput, opts?: any): Promise<DescribePenaltyOutput> {
    const path = "/penalties/"+encodeURIComponent(input.penaltyId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.penaltyId);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  ListPenalties(input: ListPenaltiesInput, opts?: any): Promise<ListPenaltiesOutput> {
    const path = "/penalties";

    return this.cli.call("GET", this.url+path, input, opts);
  }
}

export type CreatePenaltyInput = {
  penalty?: Penalty;
  dontNotify?: boolean;
}

export type CreatePenaltyOutput = {
  penaltyId?: string;
}

export type CancelPenaltyInput = {
  penaltyId?: string;
}

export type CancelPenaltyOutput = Record<string, unknown>;

export type DescribePenaltyInput = {
  penaltyId?: string;
}

export type DescribePenaltyOutput = Record<string, unknown>;

export type ListPenaltiesInput = {
  offset?: number;
  size?: number;
}

export type ListPenaltiesOutput = {
  total?: number;
  items?: Penalty[];
}

