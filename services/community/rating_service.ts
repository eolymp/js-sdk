// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { ExpressionID, ExpressionTimestamp } from "../wellknown/expression"
import { RatingPoint } from "./rating_point"

interface Client {
  call<R, E, O>(verb: string, url: string, args: R, opts?: any): Promise<E>;
}

export class RatingService {
  private readonly cli: Client;
  private readonly url: string;

  constructor(cli: Client, url: string = 'https://api.eolymp.com') {
    this.cli = cli;
    this.url = url;
  }

  SetRating(input: SetRatingInput, opts?: any): Promise<SetRatingOutput> {
    const path = "/rating";

    return this.cli.call("POST", this.url+path, input, opts);
  }

  DeleteRating(input: DeleteRatingInput, opts?: any): Promise<DeleteRatingOutput> {
    const path = "/rating/"+encodeURIComponent(input.ratingId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.ratingId);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }

  DescribeRating(input: DescribeRatingInput, opts?: any): Promise<DescribeRatingOutput> {
    const path = "/rating/"+encodeURIComponent(input.ratingId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.ratingId);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  ListRating(input: ListRatingInput, opts?: any): Promise<ListRatingOutput> {
    const path = "/rating";

    return this.cli.call("GET", this.url+path, input, opts);
  }
}

export type SetRatingInput = {
  ratingId?: string;
  rating?: RatingPoint;
}

export type SetRatingOutput = {
  ratingId?: string;
}

export type DeleteRatingInput = {
  ratingId?: string;
  point?: RatingPoint;
}

export type DeleteRatingOutput = Record<string, unknown>;

export type DescribeRatingInput = {
  ratingId?: string;
}

export type DescribeRatingOutput = {
  point?: RatingPoint;
}

export type ListRatingInput = {
  offset?: number;
  size?: number;
  filters?: ListRatingInput_Filter;
  sort?: string;
  order?: string;
}

export type ListRatingInput_Filter = {
  id?: ExpressionID[];
  ref?: ExpressionID[];
  timestamp?: ExpressionTimestamp[];
}

export type ListRatingOutput = {
  total?: number;
  items?: RatingPoint[];
}

