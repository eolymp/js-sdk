// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { ExpressionBool, ExpressionID, ExpressionInt, ExpressionString } from "../wellknown/expression"
import { Credit_Grant, Credit_Transaction } from "./credit"

interface Client {
  call<R, E, O>(verb: string, url: string, args: R, opts?: any): Promise<E>;
}

export class CreditService {
  private readonly cli: Client;
  private readonly url: string;

  constructor(cli: Client, url: string = 'https://api.eolymp.com') {
    this.cli = cli;
    this.url = url;
  }

  DescribeBalance(input: DescribeBalanceInput, opts?: any): Promise<DescribeBalanceOutput> {
    const path = "/credit/balance";

    return this.cli.call("GET", this.url+path, input, opts);
  }

  GrantCredit(input: GrantCreditInput, opts?: any): Promise<GrantCreditOutput> {
    const path = "/credit/grants";

    return this.cli.call("POST", this.url+path, input, opts);
  }

  CancelCredit(input: CancelCreditInput, opts?: any): Promise<CancelCreditOutput> {
    const path = "/credit/grants/"+encodeURIComponent(input.grantId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.grantId);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }

  ListCreditGrants(input: ListCreditGrantsInput, opts?: any): Promise<ListCreditGrantsOutput> {
    const path = "/credit/grants";

    return this.cli.call("GET", this.url+path, input, opts);
  }

  RedeemCredit(input: RedeemCreditInput, opts?: any): Promise<RedeemCreditOutput> {
    const path = "/credit/redeem";

    return this.cli.call("POST", this.url+path, input, opts);
  }

  ListCreditTransactions(input: ListCreditTransactionsInput, opts?: any): Promise<ListCreditTransactionsOutput> {
    const path = "/credit/grants";

    return this.cli.call("GET", this.url+path, input, opts);
  }

  RefundCredit(input: RefundCreditInput, opts?: any): Promise<RefundCreditOutput> {
    const path = "/credit/transactions/"+encodeURIComponent(input.transactionId||'')+"/refund";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.transactionId);

    return this.cli.call("POST", this.url+path, input, opts);
  }
}

export type DescribeBalanceInput = Record<string, unknown>;

export type DescribeBalanceOutput = {
  balance?: number;
}

export type GrantCreditInput = {
  grant?: Credit_Grant;
}

export type GrantCreditOutput = {
  grantId?: string;
}

export type CancelCreditInput = {
  grantId?: string;
}

export type CancelCreditOutput = Record<string, unknown>;

export type ListCreditGrantsInput = {
  offset?: number;
  size?: number;
  filters?: ListCreditGrantsInput_Filter;
}

export type ListCreditGrantsInput_Filter = {
  id?: ExpressionID[];
  reference?: ExpressionID[];
  note?: ExpressionString[];
  amount?: ExpressionInt[];
  active?: ExpressionBool[];
}

export type ListCreditGrantsOutput = {
  total?: number;
  items?: Credit_Grant[];
}

export type RedeemCreditInput = {
  amount?: number;
  reference?: string;
  note?: string;
}

export type RedeemCreditOutput = {
  transactionId?: string;
}

export type ListCreditTransactionsInput = {
  offset?: number;
  size?: number;
  filters?: ListCreditTransactionsInput_Filter;
}

export type ListCreditTransactionsInput_Filter = {
  id?: ExpressionID[];
}

export type ListCreditTransactionsOutput = {
  total?: number;
  items?: Credit_Transaction[];
}

export type RefundCreditInput = {
  transactionId?: string;
  amount?: number;
}

export type RefundCreditOutput = Record<string, unknown>;

