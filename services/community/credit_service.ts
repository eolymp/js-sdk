// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { ExpressionBool, ExpressionID, ExpressionInt, ExpressionString } from "../wellknown/expression"
import { Credit } from "./credit"

interface Client {
  call<R, E, O>(verb: string, url: string, args: R, opts?: any): Promise<E>;
}

export class CreditService {
  private readonly cli: Client;
  private readonly url: string;

  constructor(cli: Client, url: string = 'https://api.eolymp.com') {
    this.cli = cli;
    this.url = url;
  }

  DescribeBalance(input: DescribeBalanceInput, opts?: any): Promise<DescribeBalanceOutput> {
    const path = "/balance";

    return this.cli.call("GET", this.url+path, input, opts);
  }

  ListCredits(input: ListCreditsInput, opts?: any): Promise<ListCreditsOutput> {
    const path = "/credits";

    return this.cli.call("GET", this.url+path, input, opts);
  }

  RecordCredit(input: RecordCreditInput, opts?: any): Promise<RecordCreditOutput> {
    const path = "/credits";

    return this.cli.call("POST", this.url+path, input, opts);
  }

  DeleteCredit(input: DeleteCreditInput, opts?: any): Promise<DeleteCreditOutput> {
    const path = "/credits/"+encodeURIComponent(input.creditId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.creditId);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }
}

export type DescribeBalanceInput = Record<string, unknown>;

export type DescribeBalanceOutput = {
  balance?: number;
}

export type ListCreditsInput = {
  offset?: number;
  size?: number;
  filters?: ListCreditsInput_Filter;
}

export type ListCreditsInput_Filter = {
  id?: ExpressionID[];
  reference?: ExpressionID[];
  note?: ExpressionString[];
  amount?: ExpressionInt[];
  active?: ExpressionBool[];
}

export type ListCreditsOutput = {
  total?: number;
  items?: Credit[];
}

export type RecordCreditInput = {
  credit?: Credit;
}

export type RecordCreditOutput = {
  creditId?: string;
}

export type DeleteCreditInput = {
  creditId?: string;
}

export type DeleteCreditOutput = Record<string, unknown>;

