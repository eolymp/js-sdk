// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { ExpressionID, ExpressionString, ExpressionTimestamp } from "../wellknown/expression"
import { RankingEvent } from "./ranking_event"
import { RankingPoint } from "./ranking_point"

interface Client {
  call<R, E, O>(verb: string, url: string, args: R, opts?: any): Promise<E>;
}

export class RankingService {
  private readonly cli: Client;
  private readonly url: string;

  constructor(cli: Client, url: string = 'https://api.eolymp.com') {
    this.cli = cli;
    this.url = url;
  }

  CreateRankingEvent(input: CreateRankingEventInput, opts?: any): Promise<CreateRankingEventOutput> {
    const path = "/ranking-events";

    return this.cli.call("POST", this.url+path, input, opts);
  }

  UpdateRankingEvent(input: UpdateRankingEventInput, opts?: any): Promise<UpdateRankingEventOutput> {
    const path = "/ranking-events/"+encodeURIComponent(input.eventId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.eventId);

    return this.cli.call("POST", this.url+path, input, opts);
  }

  DeleteRankingEvent(input: DeleteRankingEventInput, opts?: any): Promise<DeleteRankingEventOutput> {
    const path = "/ranking-events/"+encodeURIComponent(input.eventId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.eventId);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }

  DescribeRankingEvent(input: DescribeRankingEventInput, opts?: any): Promise<DescribeRankingEventOutput> {
    const path = "/ranking-events/"+encodeURIComponent(input.eventId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.eventId);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  ListRankingEvents(input: ListRankingEventsInput, opts?: any): Promise<ListRankingEventsOutput> {
    const path = "/ranking-events";

    return this.cli.call("GET", this.url+path, input, opts);
  }

  UpdateRankingPoint(input: UpdateRankingPointInput, opts?: any): Promise<UpdateRankingPointOutput> {
    const path = "/ranking-series/"+encodeURIComponent(input.memberId||'')+"/points/"+encodeURIComponent(input.eventId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.memberId);
    delete(input.eventId);

    return this.cli.call("PUT", this.url+path, input, opts);
  }

  DeleteRankingPoint(input: DeleteRankingPointInput, opts?: any): Promise<DeleteRankingPointOutput> {
    const path = "/ranking-series/"+encodeURIComponent(input.memberId||'')+"/points/"+encodeURIComponent(input.eventId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.memberId);
    delete(input.eventId);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }

  DescribeRankingPoint(input: DescribeRankingPointInput, opts?: any): Promise<DescribeRankingPointOutput> {
    const path = "/ranking-series/"+encodeURIComponent(input.memberId||'')+"/points/"+encodeURIComponent(input.eventId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.memberId);
    delete(input.eventId);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  ListRankingPoints(input: ListRankingPointsInput, opts?: any): Promise<ListRankingPointsOutput> {
    const path = "/ranking-series/"+encodeURIComponent(input.memberId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.memberId);

    return this.cli.call("GET", this.url+path, input, opts);
  }
}

export type CreateRankingEventInput = {
  event?: RankingEvent;
}

export type CreateRankingEventOutput = {
  eventId?: string;
}

export type UpdateRankingEventInput = {
  patch?: string[];
  eventId?: string;
  event?: RankingEvent;
}

export type UpdateRankingEventOutput = Record<string, unknown>;

export type DeleteRankingEventInput = {
  eventId?: string;
}

export type DeleteRankingEventOutput = Record<string, unknown>;

export type DescribeRankingEventInput = {
  eventId?: string;
}

export type DescribeRankingEventOutput = {
  event?: RankingEvent;
}

export type ListRankingEventsInput = {
  offset?: number;
  size?: number;
  filters?: ListRankingEventsInput_Filter;
  sort?: string;
  order?: string;
}

export type ListRankingEventsInput_Filter = {
  id?: ExpressionID[];
  name?: ExpressionString[];
  timestamp?: ExpressionTimestamp[];
  contestId?: ExpressionID[];
}

export type ListRankingEventsOutput = {
  total?: number;
  items?: RankingEvent[];
}

export type UpdateRankingPointInput = {
  memberId?: string;
  eventId?: string;
  point?: RankingPoint;
}

export type UpdateRankingPointOutput = Record<string, unknown>;

export type DeleteRankingPointInput = {
  memberId?: string;
  eventId?: string;
  point?: RankingPoint;
}

export type DeleteRankingPointOutput = Record<string, unknown>;

export type DescribeRankingPointInput = {
  memberId?: string;
  eventId?: string;
}

export type DescribeRankingPointOutput = {
  point?: RankingPoint;
}

export type ListRankingPointsInput = {
  offset?: number;
  size?: number;
  filters?: ListRankingPointsInput_Filter;
  sort?: string;
  order?: string;
}

export type ListRankingPointsInput_Filter = {
  id?: ExpressionID[];
  eventId?: ExpressionID[];
}

export type ListRankingPointsOutput = {
  total?: number;
  items?: RankingPoint[];
}

