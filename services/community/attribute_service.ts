// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { ExpressionBool, ExpressionEnum, ExpressionID } from "../wellknown/expression"
import { Attribute } from "./attribute"

interface Client {
  call<R, E, O>(verb: string, url: string, args: R, opts?: any): Promise<E>;
}

export class AttributeService {
  private readonly cli: Client;
  private readonly url: string;

  constructor(cli: Client, url: string = 'https://api.eolymp.com') {
    this.cli = cli;
    this.url = url;
  }

  CreateAttribute(input: CreateAttributeInput, opts?: any): Promise<CreateAttributeOutput> {
    const path = "/attributes";

    return this.cli.call("POST", this.url+path, input, opts);
  }

  UpdateAttribute(input: UpdateAttributeInput, opts?: any): Promise<UpdateAttributeOutput> {
    const path = "/attributes/"+encodeURIComponent(input.attributeKey||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.attributeKey);

    return this.cli.call("POST", this.url+path, input, opts);
  }

  RemoveAttribute(input: RemoveAttributeInput, opts?: any): Promise<RemoveAttributeOutput> {
    const path = "/attributes/"+encodeURIComponent(input.attributeKey||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.attributeKey);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }

  DescribeAttribute(input: DescribeAttributeInput, opts?: any): Promise<DescribeAttributeOutput> {
    const path = "/attributes/"+encodeURIComponent(input.attributeKey||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.attributeKey);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  ListAttributes(input: ListAttributesInput, opts?: any): Promise<ListAttributesOutput> {
    const path = "/attributes";

    return this.cli.call("GET", this.url+path, input, opts);
  }
}

export type CreateAttributeInput = {
  attributeKey?: string;
  attribute?: Attribute;
}

export type CreateAttributeOutput = Record<string, unknown>;

export type UpdateAttributeInput = {
  patch?: string[];
  attributeKey?: string;
  attribute?: Attribute;
}

export type UpdateAttributeOutput = Record<string, unknown>;

export type RemoveAttributeInput = {
  attributeKey?: string;
}

export type RemoveAttributeOutput = Record<string, unknown>;

export type DescribeAttributeInput = {
  attributeKey?: string;
}

export type DescribeAttributeOutput = {
  attribute?: Attribute;
}

export type ListAttributesInput = {
  offset?: number;
  size?: number;
  filters?: ListAttributesInput_Filter;
}

export type ListAttributesInput_Filter = {
  id?: ExpressionID[];
  key?: ExpressionEnum[];
  hidden?: ExpressionBool[];
  required?: ExpressionBool[];
  type?: ExpressionEnum[];
}

export type ListAttributesOutput = {
  total?: number;
  items?: Attribute[];
}

