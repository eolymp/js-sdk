// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { ExpressionID, ExpressionString } from "../wellknown/expression"
import { Group } from "./group"

interface Client {
  call<R, E, O>(verb: string, url: string, args: R, opts?: any): Promise<E>;
}

export class GroupService {
  private readonly cli: Client;
  private readonly url: string;

  constructor(cli: Client, url: string = 'https://api.eolymp.com') {
    this.cli = cli;
    this.url = url;
  }

  CreateGroup(input: CreateGroupInput, opts?: any): Promise<CreateGroupOutput> {
    const path = "/groups";

    return this.cli.call("POST", this.url+path, input, opts);
  }

  UpdateGroup(input: UpdateGroupInput, opts?: any): Promise<UpdateGroupOutput> {
    const path = "/groups/"+encodeURIComponent(input.groupId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.groupId);

    return this.cli.call("POST", this.url+path, input, opts);
  }

  DeleteGroup(input: DeleteGroupInput, opts?: any): Promise<DeleteGroupOutput> {
    const path = "/groups/"+encodeURIComponent(input.groupId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.groupId);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }

  DescribeGroup(input: DescribeGroupInput, opts?: any): Promise<DescribeGroupOutput> {
    const path = "/groups/"+encodeURIComponent(input.groupId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.groupId);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  ListGroups(input: ListGroupsInput, opts?: any): Promise<ListGroupsOutput> {
    const path = "/groups";

    return this.cli.call("GET", this.url+path, input, opts);
  }
}

export type GroupChangedEvent = {
  before?: Group;
  after?: Group;
}

export type CreateGroupInput = {
  group?: Group;
}

export type CreateGroupOutput = {
  groupId?: string;
}

export type UpdateGroupInput = {
  patch?: string[];
  groupId?: string;
  group?: Group;
}

export type UpdateGroupOutput = Record<string, unknown>;

export type DeleteGroupInput = {
  groupId?: string;
}

export type DeleteGroupOutput = Record<string, unknown>;

export type DescribeGroupInput = {
  groupId?: string;
}

export type DescribeGroupOutput = {
  group?: Group;
}

export type ListGroupsInput = {
  offset?: number;
  size?: number;
  filters?: ListGroupsInput_Filter;
}

export type ListGroupsInput_Filter = {
  query?: string;
  id?: ExpressionID[];
  key?: ExpressionID[];
  name?: ExpressionString[];
}

export type ListGroupsOutput = {
  total?: number;
  items?: Group[];
}

