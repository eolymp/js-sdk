// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { ExpressionEnum, ExpressionID } from "../wellknown/expression"
import { Task } from "./task"

interface Client {
  call<R, E, O>(verb: string, url: string, args: R, opts?: any): Promise<E>;
}

export class Polyglot {
  private readonly cli: Client;
  private readonly url: string;

  constructor(cli: Client, url: string = 'https://api.eolymp.com') {
    this.cli = cli;
    this.url = url;
  }

  CreateTask(input: CreateTaskInput, opts?: any): Promise<CreateTaskOutput> {
    const path = "/polyglot/tasks";

    return this.cli.call("POST", this.url+path, input, opts);
  }

  DescribeTask(input: DescribeTaskInput, opts?: any): Promise<DescribeTaskOutput> {
    const path = "/polyglot/tasks/"+encodeURIComponent(input.taskId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.taskId);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  ListTasks(input: ListTasksInput, opts?: any): Promise<ListTasksOutput> {
    const path = "/polyglot/tasks";

    return this.cli.call("GET", this.url+path, input, opts);
  }
}

export type CreateTaskInput = {
  type?: string;
  inputs?: Record<string, string>;
}

export type CreateTaskOutput = {
  taskId?: string;
}

export type DescribeTaskInput = {
  taskId?: string;
}

export type DescribeTaskOutput = {
  task?: Task;
}

export type ListTasksInput = {
  offset?: number;
  size?: number;
  filters?: ListTasksInput_Filter;
}

export type ListTasksInput_Filter = {
  id?: ExpressionID[];
  type?: ExpressionEnum[];
  status?: ExpressionEnum[];
}

export type ListTasksOutput = {
  total?: number;
  items?: Task[];
}

