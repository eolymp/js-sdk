// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.


interface Client {
  call<R, E, O>(verb: string, url: string, args: R, opts: O): Promise<E>;
}

export class Acl {
  private readonly cli: Client;
  private readonly url: string;

  constructor(cli: Client, url: string = 'https://api.eolymp.com') {
    this.cli = cli;
    this.url = url;
  }

  GrantPermission<O>(input: GrantPermissionInput, opts?: O): Promise<GrantPermissionOutput> {
    const path = "/permissions/"+encodeURIComponent(input.userId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.userId);

    return this.cli.call("PUT", this.url+path, input, opts);
  }

  RevokePermission<O>(input: RevokePermissionInput, opts?: O): Promise<RevokePermissionOutput> {
    const path = "/permissions/"+encodeURIComponent(input.userId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.userId);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }

  DescribePermission<O>(input: DescribePermissionInput, opts?: O): Promise<DescribePermissionOutput> {
    const path = "/permissions/"+encodeURIComponent(input.userId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.userId);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  ListPermissions<O>(input: ListPermissionsInput, opts?: O): Promise<ListPermissionsOutput> {
    const path = "/permissions";

    return this.cli.call("GET", this.url+path, input, opts);
  }
}

export type Permission = {
  userId?: string;
  role?: string;
}

export type GrantPermissionInput = {
  userId?: string;
  role?: string;
}

export type GrantPermissionOutput = Record<string, unknown>;

export type RevokePermissionInput = {
  userId?: string;
}

export type RevokePermissionOutput = Record<string, unknown>;

export type DescribePermissionInput = {
  userId?: string;
}

export type DescribePermissionOutput = {
  role?: string;
}

export type ListPermissionsInput = Record<string, unknown>;

export type ListPermissionsOutput = {
  total?: number;
  items?: Permission[];
}

