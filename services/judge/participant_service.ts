// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { ExpressionEnum, ExpressionFloat, ExpressionID, ExpressionString, ExpressionTimestamp } from "../wellknown/expression"
import { Participant } from "./participant"

interface Client {
  call<R, E, O>(verb: string, url: string, args: R, opts?: any): Promise<E>;
}

export class ParticipantService {
  private readonly cli: Client;
  private readonly url: string;

  constructor(cli: Client, url: string = 'https://api.eolymp.com') {
    this.cli = cli;
    this.url = url;
  }

  AddParticipant(input: AddParticipantInput, opts?: any): Promise<AddParticipantOutput> {
    const path = "/participants";

    return this.cli.call("POST", this.url+path, input, opts);
  }

  EnableParticipant(input: EnableParticipantInput, opts?: any): Promise<EnableParticipantOutput> {
    const path = "/participants/"+encodeURIComponent(input.participantId||'')+"/enable";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.participantId);

    return this.cli.call("POST", this.url+path, input, opts);
  }

  DisableParticipant(input: DisableParticipantInput, opts?: any): Promise<DisableParticipantOutput> {
    const path = "/participants/"+encodeURIComponent(input.participantId||'')+"/disable";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.participantId);

    return this.cli.call("POST", this.url+path, input, opts);
  }

  UpdateParticipant(input: UpdateParticipantInput, opts?: any): Promise<UpdateParticipantOutput> {
    const path = "/participants/"+encodeURIComponent(input.participantId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.participantId);

    return this.cli.call("PUT", this.url+path, input, opts);
  }

  RemoveParticipant(input: RemoveParticipantInput, opts?: any): Promise<RemoveParticipantOutput> {
    const path = "/participants/"+encodeURIComponent(input.participantId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.participantId);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }

  ListParticipants(input: ListParticipantsInput, opts?: any): Promise<ListParticipantsOutput> {
    const path = "/participants";

    return this.cli.call("GET", this.url+path, input, opts);
  }

  DescribeParticipant(input: DescribeParticipantInput, opts?: any): Promise<DescribeParticipantOutput> {
    const path = "/participants/"+encodeURIComponent(input.participantId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.participantId);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  IntrospectParticipant(input: IntrospectParticipantInput, opts?: any): Promise<IntrospectParticipantOutput> {
    const path = "/introspect";

    return this.cli.call("GET", this.url+path, input, opts);
  }

  JoinContest(input: JoinContestInput, opts?: any): Promise<JoinContestOutput> {
    const path = "/join";

    return this.cli.call("POST", this.url+path, input, opts);
  }

  StartContest(input: StartContestInput, opts?: any): Promise<StartContestOutput> {
    const path = "/start";

    return this.cli.call("POST", this.url+path, input, opts);
  }

  VerifyPasscode(input: VerifyPasscodeInput, opts?: any): Promise<VerifyPasscodeOutput> {
    const path = "/verify-passcode";

    return this.cli.call("POST", this.url+path, input, opts);
  }

  EnterPasscode(input: EnterPasscodeInput, opts?: any): Promise<EnterPasscodeOutput> {
    const path = "/enter-passcode";

    return this.cli.call("POST", this.url+path, input, opts);
  }

  ResetPasscode(input: ResetPasscodeInput, opts?: any): Promise<ResetPasscodeOutput> {
    const path = "/participants/"+encodeURIComponent(input.participantId||'')+"/passcode";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.participantId);

    return this.cli.call("POST", this.url+path, input, opts);
  }

  SetPasscode(input: SetPasscodeInput, opts?: any): Promise<SetPasscodeOutput> {
    const path = "/participants/"+encodeURIComponent(input.participantId||'')+"/passcode";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.participantId);

    return this.cli.call("PUT", this.url+path, input, opts);
  }

  RemovePasscode(input: RemovePasscodeInput, opts?: any): Promise<RemovePasscodeOutput> {
    const path = "/participants/"+encodeURIComponent(input.participantId||'')+"/passcode";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.participantId);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }
}

export type AddParticipantInput = {
  contestId?: string;
  participant?: Participant;
}

export type AddParticipantOutput = {
  participantId?: string;
}

export type EnableParticipantInput = {
  contestId?: string;
  participantId?: string;
}

export type EnableParticipantOutput = Record<string, unknown>;

export type DisableParticipantInput = {
  contestId?: string;
  participantId?: string;
}

export type DisableParticipantOutput = Record<string, unknown>;

export type UpdateParticipantInput = {
  patch?: string[];
  contestId?: string;
  participantId?: string;
  participant?: Participant;
}

export type UpdateParticipantOutput = Record<string, unknown>;

export type RemoveParticipantInput = {
  contestId?: string;
  participantId?: string;
}

export type RemoveParticipantOutput = Record<string, unknown>;

export type VerifyPasscodeInput = {
  contestId?: string;
}

export type VerifyPasscodeOutput = {
  required?: boolean;
  valid?: boolean;
}

export type EnterPasscodeInput = {
  contestId?: string;
  passcode?: string;
}

export type EnterPasscodeOutput = Record<string, unknown>;

export type ResetPasscodeInput = {
  contestId?: string;
  participantId?: string;
}

export type ResetPasscodeOutput = {
  passcode?: string;
}

export type SetPasscodeInput = {
  contestId?: string;
  participantId?: string;
  passcode?: string;
}

export type SetPasscodeOutput = Record<string, unknown>;

export type RemovePasscodeInput = {
  contestId?: string;
  participantId?: string;
}

export type RemovePasscodeOutput = Record<string, unknown>;

export type ListParticipantsInput = {
  contestId?: string;
  offset?: number;
  size?: number;
  filters?: ListParticipantsInput_Filter;
  sort?: string;
  order?: string;
}

export type ListParticipantsInput_Filter = {
  id?: ExpressionID[];
  memberId?: ExpressionID[];
  name?: ExpressionString[];
  status?: ExpressionEnum[];
  score?: ExpressionFloat[];
  penalty?: ExpressionFloat[];
  startedAt?: ExpressionTimestamp[];
  completeAt?: ExpressionTimestamp[];
}

export type ListParticipantsOutput = {
  total?: number;
  items?: Participant[];
}

export type JoinContestInput = {
  contestId?: string;
}

export type JoinContestOutput = Record<string, unknown>;

export type StartContestInput = {
  contestId?: string;
}

export type StartContestOutput = Record<string, unknown>;

export type IntrospectParticipantInput = {
  contestId?: string;
}

export type IntrospectParticipantOutput = {
  participant?: Participant;
}

export type DescribeParticipantInput = {
  contestId?: string;
  participantId?: string;
}

export type DescribeParticipantOutput = {
  participant?: Participant;
}

