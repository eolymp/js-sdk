// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { Certification } from "./contest_certification"
import { Environment } from "./contest_environment"
import { Taxonomy } from "./contest_taxonomy"

interface Client {
  call<R, E, O>(verb: string, url: string, args: R, opts?: any): Promise<E>;
}

export class ConfigurationService {
  private readonly cli: Client;
  private readonly url: string;

  constructor(cli: Client, url: string = 'https://api.eolymp.com') {
    this.cli = cli;
    this.url = url;
  }

  DescribeEnvironment(input: DescribeEnvironmentInput, opts?: any): Promise<DescribeEnvironmentOutput> {
    const path = "/contests/"+encodeURIComponent(input.contestId||'')+"/environment";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.contestId);

    return this.cli.call("POST", this.url+path, input, opts);
  }

  ConfigureEnvironment(input: ConfigureEnvironmentInput, opts?: any): Promise<ConfigureEnvironmentOutput> {
    const path = "/contests/"+encodeURIComponent(input.contestId||'')+"/environment";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.contestId);

    return this.cli.call("POST", this.url+path, input, opts);
  }

  DescribeCertification(input: DescribeCertificationInput, opts?: any): Promise<DescribeCertificationOutput> {
    const path = "/contests/"+encodeURIComponent(input.contestId||'')+"/certification";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.contestId);

    return this.cli.call("POST", this.url+path, input, opts);
  }

  ConfigureCertification(input: ConfigureCertificationInput, opts?: any): Promise<ConfigureCertificationOutput> {
    const path = "/contests/"+encodeURIComponent(input.contestId||'')+"/certification";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.contestId);

    return this.cli.call("POST", this.url+path, input, opts);
  }

  DescribeTaxonomy(input: DescribeTaxonomyInput, opts?: any): Promise<DescribeTaxonomyOutput> {
    const path = "/contests/"+encodeURIComponent(input.contestId||'')+"/taxonomy";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.contestId);

    return this.cli.call("POST", this.url+path, input, opts);
  }

  ConfigureTaxonomy(input: ConfigureTaxonomyInput, opts?: any): Promise<ConfigureTaxonomyOutput> {
    const path = "/contests/"+encodeURIComponent(input.contestId||'')+"/taxonomy";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.contestId);

    return this.cli.call("POST", this.url+path, input, opts);
  }
}

export type DescribeEnvironmentInput = {
  contestId?: string;
}

export type DescribeEnvironmentOutput = {
  environment?: Environment;
}

export type ConfigureEnvironmentInput = {
  contestId?: string;
  environment?: Environment;
}

export type ConfigureEnvironmentOutput = Record<string, unknown>;

export type DescribeCertificationInput = {
  contestId?: string;
}

export type DescribeCertificationOutput = {
  certification?: Certification;
}

export type ConfigureCertificationInput = {
  contestId?: string;
  certification?: Certification;
}

export type ConfigureCertificationOutput = Record<string, unknown>;

export type DescribeTaxonomyInput = {
  contestId?: string;
}

export type DescribeTaxonomyOutput = {
  taxonomy?: Taxonomy;
}

export type ConfigureTaxonomyInput = {
  contestId?: string;
  taxonomy?: Taxonomy;
}

export type ConfigureTaxonomyOutput = Record<string, unknown>;

