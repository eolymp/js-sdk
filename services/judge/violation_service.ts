// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { ExpressionBool, ExpressionEnum, ExpressionID, ExpressionString } from "../wellknown/expression"
import { Violation } from "./violation"

interface Client {
  call<R, E, O>(verb: string, url: string, args: R, opts?: any): Promise<E>;
}

export class ViolationService {
  private readonly cli: Client;
  private readonly url: string;

  constructor(cli: Client, url: string = 'https://api.eolymp.com') {
    this.cli = cli;
    this.url = url;
  }

  CreateViolation(input: CreateViolationInput, opts?: any): Promise<CreateViolationOutput> {
    const path = "/violations";

    return this.cli.call("POST", this.url+path, input, opts);
  }

  UpdateViolation(input: UpdateViolationInput, opts?: any): Promise<UpdateViolationOutput> {
    const path = "/violations/"+encodeURIComponent(input.violationId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.violationId);

    return this.cli.call("POST", this.url+path, input, opts);
  }

  DeleteViolation(input: DeleteViolationInput, opts?: any): Promise<DeleteViolationOutput> {
    const path = "/violations/"+encodeURIComponent(input.violationId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.violationId);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }

  DescribeViolation(input: DescribeViolationInput, opts?: any): Promise<DescribeViolationOutput> {
    const path = "/violations/"+encodeURIComponent(input.violationId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.violationId);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  ListViolations(input: ListViolationsInput, opts?: any): Promise<ListViolationsOutput> {
    const path = "/violations";

    return this.cli.call("GET", this.url+path, input, opts);
  }
}

export type CreateViolationInput = {
  violation?: Violation;
  dontNotify?: boolean;
}

export type CreateViolationOutput = {
  violationId?: string;
}

export type UpdateViolationInput = {
  patch?: string[];
  violationId?: string;
  violation?: Violation;
}

export type UpdateViolationOutput = Record<string, unknown>;

export type DeleteViolationInput = {
  violationId?: string;
}

export type DeleteViolationOutput = Record<string, unknown>;

export type DescribeViolationInput = {
  violationId?: string;
}

export type DescribeViolationOutput = {
  violation?: Violation;
}

export type ListViolationsInput = {
  offset?: number;
  size?: number;
  filters?: ListViolationsInput_Filter;
}

export type ListViolationsInput_Filter = {
  id?: ExpressionID[];
  status?: ExpressionEnum[];
  type?: ExpressionEnum[];
  summary?: ExpressionString[];
  automatic?: ExpressionBool[];
  participantId?: ExpressionID[];
  submissionId?: ExpressionID[];
  createdBy?: ExpressionID[];
  confirmedBy?: ExpressionID[];
}

export type ListViolationsOutput = {
  total?: number;
  items?: Violation[];
}

