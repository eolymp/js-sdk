// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.


interface Client {
  call<R, E, O>(verb: string, url: string, args: R, opts?: any): Promise<E>;
}

export class PasscodeService {
  private readonly cli: Client;
  private readonly url: string;

  constructor(cli: Client, url: string = 'https://api.eolymp.com') {
    this.cli = cli;
    this.url = url;
  }

  VerifyPasscode(input: VerifyPasscodeInput, opts?: any): Promise<VerifyPasscodeOutput> {
    const path = "/verify-passcode";

    return this.cli.call("POST", this.url+path, input, opts);
  }

  EnterPasscode(input: EnterPasscodeInput, opts?: any): Promise<EnterPasscodeOutput> {
    const path = "/enter-passcode";

    return this.cli.call("POST", this.url+path, input, opts);
  }

  ResetPasscode(input: ResetPasscodeInput, opts?: any): Promise<ResetPasscodeOutput> {
    const path = "/participants/"+encodeURIComponent(input.memberId||'')+"/passcode";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.memberId);

    return this.cli.call("POST", this.url+path, input, opts);
  }

  SetPasscode(input: SetPasscodeInput, opts?: any): Promise<SetPasscodeOutput> {
    const path = "/participants/"+encodeURIComponent(input.memberId||'')+"/passcode";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.memberId);

    return this.cli.call("PUT", this.url+path, input, opts);
  }

  RemovePasscode(input: RemovePasscodeInput, opts?: any): Promise<RemovePasscodeOutput> {
    const path = "/participants/"+encodeURIComponent(input.memberId||'')+"/passcode";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.memberId);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }
}

export type VerifyPasscodeInput = {
  contestId?: string;
}

export type VerifyPasscodeOutput = {
  required?: boolean;
  valid?: boolean;
}

export type EnterPasscodeInput = {
  contestId?: string;
  passcode?: string;
}

export type EnterPasscodeOutput = Record<string, unknown>;

export type ResetPasscodeInput = {
  contestId?: string;
  memberId?: string;
}

export type ResetPasscodeOutput = {
  passcode?: string;
}

export type SetPasscodeInput = {
  contestId?: string;
  memberId?: string;
  passcode?: string;
}

export type SetPasscodeOutput = Record<string, unknown>;

export type RemovePasscodeInput = {
  contestId?: string;
  memberId?: string;
}

export type RemovePasscodeOutput = Record<string, unknown>;

