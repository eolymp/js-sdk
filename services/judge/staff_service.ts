// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { ExpressionEnum, ExpressionID } from "../wellknown/expression"
import { Staff } from "./staff"

interface Client {
  call<R, E, O>(verb: string, url: string, args: R, opts?: any): Promise<E>;
}

export class StaffService {
  private readonly cli: Client;
  private readonly url: string;

  constructor(cli: Client, url: string = 'https://api.eolymp.com') {
    this.cli = cli;
    this.url = url;
  }

  CreateStaffMember(input: CreateStaffMemberInput, opts?: any): Promise<CreateStaffMemberOutput> {
    const path = "/staff-members";

    return this.cli.call("POST", this.url+path, input, opts);
  }

  UpdateStaffMember(input: UpdateStaffMemberInput, opts?: any): Promise<UpdateStaffMemberOutput> {
    const path = "/staff-members/"+encodeURIComponent(input.staffId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.staffId);

    return this.cli.call("PUT", this.url+path, input, opts);
  }

  DeleteStaffMember(input: DeleteStaffMemberInput, opts?: any): Promise<DeleteStaffMemberOutput> {
    const path = "/staff-members/"+encodeURIComponent(input.staffId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.staffId);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }

  DescribeStaffMember(input: DescribeStaffMemberInput, opts?: any): Promise<DescribeStaffMemberOutput> {
    const path = "/staff-members/"+encodeURIComponent(input.staffId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.staffId);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  ListStaffMembers(input: ListStaffMembersInput, opts?: any): Promise<ListStaffMembersOutput> {
    const path = "/staff-members";

    return this.cli.call("GET", this.url+path, input, opts);
  }
}

export type StaffChangedEvent = {
  contestId?: string;
  before?: Staff;
  after?: Staff;
}

export type CreateStaffMemberInput = {
  contestId?: string;
  staff?: Staff;
}

export type CreateStaffMemberOutput = {
  staffId?: string;
}

export type UpdateStaffMemberInput = {
  patch?: string[];
  contestId?: string;
  staffId?: string;
  staff?: Staff;
}

export type UpdateStaffMemberOutput = Record<string, unknown>;

export type DeleteStaffMemberInput = {
  contestId?: string;
  staffId?: string;
}

export type DeleteStaffMemberOutput = Record<string, unknown>;

export type DescribeStaffMemberInput = {
  contestId?: string;
  staffId?: string;
}

export type DescribeStaffMemberOutput = {
  staff?: Staff;
}

export type ListStaffMembersInput = {
  contestId?: string;
  offset?: number;
  size?: number;
  search?: string;
  filters?: ListStaffMembersInput_Filter;
  sort?: string;
  order?: string;
}

export type ListStaffMembersInput_Filter = {
  id?: ExpressionID[];
  memberId?: ExpressionID[];
  role?: ExpressionEnum[];
}

export type ListStaffMembersOutput = {
  total?: number;
  items?: Staff[];
}

