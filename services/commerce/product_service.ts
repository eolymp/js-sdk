// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { ExpressionBool, ExpressionID, ExpressionInt, ExpressionString } from "../wellknown/expression"
import { Product, Product_Extra } from "./product"

interface Client {
  call<R, E, O>(verb: string, url: string, args: R, opts?: any): Promise<E>;
}

export class ProductService {
  private readonly cli: Client;
  private readonly url: string;

  constructor(cli: Client, url: string = 'https://api.eolymp.com') {
    this.cli = cli;
    this.url = url;
  }

  DescribeProduct(input: DescribeProductInput, opts?: any): Promise<DescribeProductOutput> {
    const path = "/products/"+encodeURIComponent(input.productId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.productId);

    return this.cli.call("POST", this.url+path, input, opts);
  }

  ListProducts(input: ListProductsInput, opts?: any): Promise<ListProductsOutput> {
    const path = "/products";

    return this.cli.call("GET", this.url+path, input, opts);
  }
}

export type DescribeProductInput = {
  productId?: string;
  locale?: string;
  extra?: string[];
}

export type DescribeProductOutput = {
  product?: Product;
}

export type ListProductsInput = {
  offset?: number;
  size?: number;
  search?: string;
  filters?: ListProductsInput_Filter;
  sort?: string;
  order?: string;
  locale?: string;
  extra?: Product_Extra[];
}

export type ListProductsInput_Filter = {
  id?: ExpressionID[];
  name?: ExpressionString[];
  outOfStock?: ExpressionBool[];
  price?: ExpressionInt[];
}

export type ListProductsOutput = {
  total?: number;
  items?: Product[];
}

