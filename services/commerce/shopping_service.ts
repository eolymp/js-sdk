// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { Address } from "./address"
import { ShoppingCart } from "./shopping_cart"

interface Client {
  call<R, E, O>(verb: string, url: string, args: R, opts?: any): Promise<E>;
}

export class ShoppingService {
  private readonly cli: Client;
  private readonly url: string;

  constructor(cli: Client, url: string = 'https://api.eolymp.com') {
    this.cli = cli;
    this.url = url;
  }

  DescribeShoppingCart(input: DescribeShoppingCartInput, opts?: any): Promise<DescribeShoppingCartOutput> {
    const path = "/store/cart";

    return this.cli.call("GET", this.url+path, input, opts);
  }

  CreateShoppingCartItem(input: CreateShoppingCartItemInput, opts?: any): Promise<CreateShoppingCartItemOutput> {
    const path = "/store/cart/items";

    return this.cli.call("POST", this.url+path, input, opts);
  }

  UpdateShoppingCartItem(input: UpdateShoppingCartItemInput, opts?: any): Promise<UpdateShoppingCartItemOutput> {
    const path = "/store/cart/items/"+encodeURIComponent(input.itemId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.itemId);

    return this.cli.call("PUT", this.url+path, input, opts);
  }

  DeleteShoppingCartItem(input: DeleteShoppingCartItemInput, opts?: any): Promise<DeleteShoppingCartItemOutput> {
    const path = "/store/cart/items/"+encodeURIComponent(input.itemId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.itemId);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }

  UpdateShippingAddress(input: UpdateShippingAddressInput, opts?: any): Promise<UpdateShippingAddressOutput> {
    const path = "/store/cart/shipping-address";

    return this.cli.call("POST", this.url+path, input, opts);
  }

  UpdateBillingAddress(input: UpdateBillingAddressInput, opts?: any): Promise<UpdateBillingAddressOutput> {
    const path = "/store/cart/billing-address";

    return this.cli.call("POST", this.url+path, input, opts);
  }

  PlaceOrder(input: PlaceOrderInput, opts?: any): Promise<PlaceOrderOutput> {
    const path = "/store/cart:order";

    return this.cli.call("POST", this.url+path, input, opts);
  }
}

export type DescribeShoppingCartInput = Record<string, unknown>;

export type DescribeShoppingCartOutput = {
  cart?: ShoppingCart;
}

export type CreateShoppingCartItemInput = {
  productId?: string;
  variantId?: string;
  quantity?: number;
}

export type CreateShoppingCartItemOutput = {
  itemId?: string;
}

export type UpdateShoppingCartItemInput = {
  itemId?: string;
  quantity?: number;
}

export type UpdateShoppingCartItemOutput = Record<string, unknown>;

export type DeleteShoppingCartItemInput = {
  itemId?: string;
}

export type DeleteShoppingCartItemOutput = Record<string, unknown>;

export type UpdateShippingAddressInput = {
  address?: Address;
}

export type UpdateShippingAddressOutput = Record<string, unknown>;

export type UpdateBillingAddressInput = {
  address?: Address;
  sameAsShipping?: boolean;
}

export type UpdateBillingAddressOutput = Record<string, unknown>;

export type PlaceOrderInput = Record<string, unknown>;

export type PlaceOrderOutput = {
  orderId?: string;
  orderNumber?: string;
}

