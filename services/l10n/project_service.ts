// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { ExpressionID } from "../wellknown/expression"
import { Project } from "./project"

interface Client {
  call<R, E, O>(verb: string, url: string, args: R, opts?: any): Promise<E>;
}

export class ProjectService {
  private readonly cli: Client;
  private readonly url: string;

  constructor(cli: Client, url: string = 'https://api.eolymp.com') {
    this.cli = cli;
    this.url = url;
  }

  ListProjects(input: ListProjectsInput, opts?: any): Promise<ListProjectsOutput> {
    const path = "/projects";

    return this.cli.call("GET", this.url+path, input, opts);
  }

  DescribeProject(input: DescribeProjectInput, opts?: any): Promise<DescribeProjectOutput> {
    const path = "/projects/"+encodeURIComponent(input.projectId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.projectId);

    return this.cli.call("GET", this.url+path, input, opts);
  }
}

export type ListProjectsInput = {
  offset?: number;
  size?: number;
  filters?: ListProjectsInput_Filter;
}

export type ListProjectsInput_Filter = {
  id?: ExpressionID[];
}

export type ListProjectsOutput = {
  total?: number;
  items?: Project[];
}

export type DescribeProjectInput = {
  projectId?: string;
}

export type DescribeProjectOutput = {
  project?: Project;
}

