// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { DeleteMessageInput, DeleteMessageOutput, DescribeMessageInput, DescribeMessageOutput, ListMessageChangesInput, ListMessageChangesOutput, ListMessagesInput, ListMessagesOutput, PostMessageInput, PostMessageOutput, UpdateMessageInput, UpdateMessageOutput, VoteMessageInput, VoteMessageOutput } from "./message_service"
import { UpdateSubscriptionInput, UpdateSubscriptionOutput } from "./subscription_service"
import { Thread } from "./thread"

interface Client {
  call<R, E, O>(verb: string, url: string, args: R, opts?: any): Promise<E>;
}

export class ThreadService {
  private readonly cli: Client;
  private readonly url: string;

  constructor(cli: Client, url: string = 'https://api.eolymp.com') {
    this.cli = cli;
    this.url = url;
  }

  DescribeThread(input: DescribeThreadInput, opts?: any): Promise<DescribeThreadOutput> {
    const path = "/thread";

    return this.cli.call("GET", this.url+path, input, opts);
  }

  VoteThread(input: VoteThreadInput, opts?: any): Promise<VoteThreadOutput> {
    const path = "/thread/vote";

    return this.cli.call("POST", this.url+path, input, opts);
  }

  UpdateSubscription(input: UpdateSubscriptionInput, opts?: any): Promise<UpdateSubscriptionOutput> {
    const path = "/thread/subscription";

    return this.cli.call("PUT", this.url+path, input, opts);
  }

  DescribeMessage(input: DescribeMessageInput, opts?: any): Promise<DescribeMessageOutput> {
    const path = "/thread/messages/"+encodeURIComponent(input.messageId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.messageId);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  ListMessages(input: ListMessagesInput, opts?: any): Promise<ListMessagesOutput> {
    const path = "/thread/messages";

    return this.cli.call("GET", this.url+path, input, opts);
  }

  PostMessage(input: PostMessageInput, opts?: any): Promise<PostMessageOutput> {
    const path = "/thread/messages";

    return this.cli.call("POST", this.url+path, input, opts);
  }

  UpdateMessage(input: UpdateMessageInput, opts?: any): Promise<UpdateMessageOutput> {
    const path = "/thread/messages/"+encodeURIComponent(input.messageId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.messageId);

    return this.cli.call("PUT", this.url+path, input, opts);
  }

  DeleteMessage(input: DeleteMessageInput, opts?: any): Promise<DeleteMessageOutput> {
    const path = "/messages/"+encodeURIComponent(input.messageId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.messageId);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }

  VoteMessage(input: VoteMessageInput, opts?: any): Promise<VoteMessageOutput> {
    const path = "/messages/"+encodeURIComponent(input.messageId||'')+"/vote";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.messageId);

    return this.cli.call("POST", this.url+path, input, opts);
  }

  ListMessageChanges(input: ListMessageChangesInput, opts?: any): Promise<ListMessageChangesOutput> {
    const path = "/messages/"+encodeURIComponent(input.messageId||'')+"/changes";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.messageId);

    return this.cli.call("GET", this.url+path, input, opts);
  }
}

export type DescribeThreadInput = {
  locale?: string;
}

export type DescribeThreadOutput = {
  thread?: Thread;
}

export type VoteThreadInput = {
  messageId?: string;
  vote?: number;
}

export type VoteThreadOutput = {
  voteCount?: number;
}

