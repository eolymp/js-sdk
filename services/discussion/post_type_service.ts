// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { PostType } from "./post_type"

interface Client {
  call<R, E, O>(verb: string, url: string, args: R, opts?: any): Promise<E>;
}

export class PostTypeService {
  private readonly cli: Client;
  private readonly url: string;

  constructor(cli: Client, url: string = 'https://api.eolymp.com') {
    this.cli = cli;
    this.url = url;
  }

  DescribePostType(input: DescribePostTypeInput, opts?: any): Promise<DescribePostTypeOutput> {
    const path = "/post-types/"+encodeURIComponent(input.typeId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.typeId);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  ListPostTypes(input: ListPostTypesInput, opts?: any): Promise<ListPostTypesOutput> {
    const path = "/post-types";

    return this.cli.call("GET", this.url+path, input, opts);
  }

  CreatePostType(input: CreatePostTypeInput, opts?: any): Promise<CreatePostTypeOutput> {
    const path = "/post-types";

    return this.cli.call("POST", this.url+path, input, opts);
  }

  UpdatePostType(input: UpdatePostTypeInput, opts?: any): Promise<UpdatePostTypeOutput> {
    const path = "/post-types/"+encodeURIComponent(input.typeId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.typeId);

    return this.cli.call("PUT", this.url+path, input, opts);
  }

  DeletePostType(input: DeletePostTypeInput, opts?: any): Promise<DeletePostTypeOutput> {
    const path = "/post-types/"+encodeURIComponent(input.typeId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.typeId);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }
}

export type DescribePostTypeInput = {
  typeId?: string;
  locale?: string;
  extra?: string[];
}

export type DescribePostTypeOutput = {
  type?: PostType;
}

export type ListPostTypesInput = {
  offset?: number;
  size?: number;
  locale?: string;
  extra?: string[];
}

export type ListPostTypesOutput = {
  total?: number;
  items?: PostType[];
}

export type CreatePostTypeInput = {
  type?: PostType;
}

export type CreatePostTypeOutput = {
  typeId?: string;
}

export type UpdatePostTypeInput = {
  typeId?: string;
  type?: PostType;
}

export type UpdatePostTypeOutput = Record<string, unknown>;

export type DeletePostTypeInput = {
  typeId?: string;
}

export type DeletePostTypeOutput = Record<string, unknown>;

