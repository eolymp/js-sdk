// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { ExpressionID } from "../wellknown/expression"
import { Discussion } from "./discussion"

interface Client {
  call<R, E, O>(verb: string, url: string, args: R, opts?: any): Promise<E>;
}

export class DiscussionService {
  private readonly cli: Client;
  private readonly url: string;

  constructor(cli: Client, url: string = 'https://api.eolymp.com') {
    this.cli = cli;
    this.url = url;
  }

  DescribeDiscussion(input: DescribeDiscussionInput, opts?: any): Promise<DescribeDiscussionOutput> {
    const path = "/discussions/"+encodeURIComponent(input.discussionId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.discussionId);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  ListDiscussions(input: ListDiscussionsInput, opts?: any): Promise<ListDiscussionsOutput> {
    const path = "/discussions";

    return this.cli.call("GET", this.url+path, input, opts);
  }

  CreateDiscussion(input: CreateDiscussionInput, opts?: any): Promise<CreateDiscussionOutput> {
    const path = "/discussions";

    return this.cli.call("POST", this.url+path, input, opts);
  }

  UpdateDiscussion(input: UpdateDiscussionInput, opts?: any): Promise<UpdateDiscussionOutput> {
    const path = "/discussions/"+encodeURIComponent(input.discussionId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.discussionId);

    return this.cli.call("PUT", this.url+path, input, opts);
  }

  DeleteDiscussion(input: DeleteDiscussionInput, opts?: any): Promise<DeleteDiscussionOutput> {
    const path = "/discussions/"+encodeURIComponent(input.discussionId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.discussionId);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }

  VoteDiscussion(input: VoteDiscussionInput, opts?: any): Promise<VoteDiscussionOutput> {
    const path = "/discussions/"+encodeURIComponent(input.discussionId||'')+"/vote";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.discussionId);

    return this.cli.call("POST", this.url+path, input, opts);
  }
}

export type DescribeDiscussionInput = {
  discussionId?: string;
  render?: boolean;
}

export type DescribeDiscussionOutput = {
  discussion?: Discussion;
}

export type ListDiscussionsInput = {
  render?: boolean;
  offset?: number;
  size?: number;
  filters?: ListDiscussionsInput_Filter;
}

export type ListDiscussionsInput_Filter = {
  query?: string;
  id?: ExpressionID[];
}

export type ListDiscussionsOutput = {
  total?: number;
  items?: Discussion[];
}

export type CreateDiscussionInput = {
  discussion?: Discussion;
}

export type CreateDiscussionOutput = {
  discussionId?: string;
}

export type UpdateDiscussionInput = {
  discussionId?: string;
  discussion?: Discussion;
}

export type UpdateDiscussionOutput = Record<string, unknown>;

export type DeleteDiscussionInput = {
  discussionId?: string;
}

export type DeleteDiscussionOutput = Record<string, unknown>;

export type VoteDiscussionInput = {
  discussionId?: string;
  vote?: number;
}

export type VoteDiscussionOutput = {
  voteCount?: number;
}

