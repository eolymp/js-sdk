// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { Content } from "../ecm/content"
import { ExpressionID, ExpressionInt, ExpressionTimestamp } from "../wellknown/expression"
import { Message } from "./message"

interface Client {
  call<R, E, O>(verb: string, url: string, args: R, opts?: any): Promise<E>;
}

export class MessageService {
  private readonly cli: Client;
  private readonly url: string;

  constructor(cli: Client, url: string = 'https://api.eolymp.com') {
    this.cli = cli;
    this.url = url;
  }

  DescribeMessage(input: DescribeMessageInput, opts?: any): Promise<DescribeMessageOutput> {
    const path = "/messages/"+encodeURIComponent(input.messageId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.messageId);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  ListMessages(input: ListMessagesInput, opts?: any): Promise<ListMessagesOutput> {
    const path = "/messages";

    return this.cli.call("GET", this.url+path, input, opts);
  }

  PostMessage(input: PostMessageInput, opts?: any): Promise<PostMessageOutput> {
    const path = "/messages";

    return this.cli.call("POST", this.url+path, input, opts);
  }

  UpdateMessage(input: UpdateMessageInput, opts?: any): Promise<UpdateMessageOutput> {
    const path = "/messages/"+encodeURIComponent(input.messageId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.messageId);

    return this.cli.call("PUT", this.url+path, input, opts);
  }

  DeleteMessage(input: DeleteMessageInput, opts?: any): Promise<DeleteMessageOutput> {
    const path = "/messages/"+encodeURIComponent(input.messageId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.messageId);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }

  VoteMessage(input: VoteMessageInput, opts?: any): Promise<VoteMessageOutput> {
    const path = "/messages/"+encodeURIComponent(input.messageId||'')+"/vote";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.messageId);

    return this.cli.call("POST", this.url+path, input, opts);
  }

  ListMessageChanges(input: ListMessageChangesInput, opts?: any): Promise<ListMessageChangesOutput> {
    const path = "/messages/"+encodeURIComponent(input.messageId||'')+"/changes";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.messageId);

    return this.cli.call("GET", this.url+path, input, opts);
  }
}

export type DescribeMessageInput = {
  messageId?: string;
  render?: boolean;
  extra?: string[];
}

export type DescribeMessageOutput = {
  message?: Message;
}

export type ListMessagesInput = {
  render?: boolean;
  after?: string;
  size?: number;
  sort?: string;
  order?: string;
  filters?: ListMessagesInput_Filter;
  extra?: string[];
}

export type ListMessagesInput_Filter = {
  query?: string;
  id?: ExpressionID[];
  replyTo?: ExpressionID[];
  memberId?: ExpressionID[];
  threadId?: ExpressionID[];
  voteCount?: ExpressionInt[];
  replyCount?: ExpressionInt[];
  postedAt?: ExpressionTimestamp[];
}

export type ListMessagesOutput = {
  total?: number;
  items?: Message[];
}

export type PostMessageInput = {
  message?: Message;
  replyTo?: string;
}

export type PostMessageOutput = {
  messageId?: string;
}

export type UpdateMessageInput = {
  messageId?: string;
  message?: Message;
}

export type UpdateMessageOutput = Record<string, unknown>;

export type DeleteMessageInput = {
  messageId?: string;
}

export type DeleteMessageOutput = Record<string, unknown>;

export type VoteMessageInput = {
  messageId?: string;
  vote?: number;
}

export type VoteMessageOutput = {
  voteCount?: number;
}

export type ListMessageChangesInput = {
  messageId?: string;
}

export type ListMessageChangesOutput = {
  history?: ListMessageChangesOutput_Record[];
}

export type ListMessageChangesOutput_Record = {
  revision?: number;
  timestamp?: string;
  message?: Content;
}

