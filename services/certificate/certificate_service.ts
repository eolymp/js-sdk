// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { Certificate } from "./certificate"

interface Client {
  call<R, E, O>(verb: string, url: string, args: R, opts?: any): Promise<E>;
}

export class CertificateService {
  private readonly cli: Client;
  private readonly url: string;

  constructor(cli: Client, url: string = 'https://api.eolymp.com') {
    this.cli = cli;
    this.url = url;
  }

  CreateCertificate(input: CreateCertificateInput, opts?: any): Promise<CreateCertificateOutput> {
    const path = "/certificates";

    return this.cli.call("POST", this.url+path, input, opts);
  }

  VoidCertificate(input: VoidCertificateInput, opts?: any): Promise<VoidCertificateOutput> {
    const path = "/certificates/"+encodeURIComponent(input.certificateId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.certificateId);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }

  DescribeCertificate(input: DescribeCertificateInput, opts?: any): Promise<DescribeCertificateOutput> {
    const path = "/certificates/"+encodeURIComponent(input.certificateId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.certificateId);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  ListCertificates(input: ListCertificatesInput, opts?: any): Promise<ListCertificatesOutput> {
    const path = "/members/"+encodeURIComponent(input.memberId||'')+"/certificates";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.memberId);

    return this.cli.call("GET", this.url+path, input, opts);
  }
}

export type CreateCertificateInput = {
  certificate?: Certificate;
}

export type CreateCertificateOutput = {
  certificateId?: string;
  downloadUrl?: string;
}

export type VoidCertificateInput = {
  certificateId?: string;
}

export type VoidCertificateOutput = Record<string, unknown>;

export type DescribeCertificateInput = {
  certificateId?: string;
}

export type DescribeCertificateOutput = {
  certificate?: Certificate;
}

export type ListCertificatesInput = {
  offset?: number;
  size?: number;
  memberId?: string;
}

export type ListCertificatesOutput = {
  total?: number;
  items?: Certificate[];
}

