// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { Policy } from "./policy"

interface Client {
  call<R, E, O>(verb: string, url: string, args: R, opts: O): Promise<E>;
}

export class Guardian {
  private readonly cli: Client;
  private readonly url: string;

  constructor(cli: Client, url: string = 'https://api.eolymp.com') {
    this.cli = cli;
    this.url = url;
  }

  ListPolicies<O>(input: ListPoliciesInput, opts?: O): Promise<ListPoliciesOutput> {
    const path = "/policies";

    return this.cli.call("GET", this.url+path, input, opts);
  }

  DescribePolicy<O>(input: DescribePolicyInput, opts?: O): Promise<DescribePolicyOutput> {
    const path = "/policies/"+encodeURIComponent(input.id||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.id);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  DefinePolicy<O>(input: DefinePolicyInput, opts?: O): Promise<DefinePolicyOutput> {
    const path = "/policies/"+encodeURIComponent(input.id||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.id);

    return this.cli.call("PUT", this.url+path, input, opts);
  }

  DeletePolicy<O>(input: DeletePolicyInput, opts?: O): Promise<DeletePolicyOutput> {
    const path = "/policies/"+encodeURIComponent(input.id||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.id);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }

  Evaluate<O>(input: EvaluateInput, opts?: O): Promise<EvaluateOutput> {
    const path = "/evaluate";

    return this.cli.call("DELETE", this.url+path, input, opts);
  }
}

export type ListPoliciesInput = {
  offset?: number;
  size?: number;
}

export type ListPoliciesOutput = {
  total?: number;
  items?: Policy[];
}

export type DescribePolicyInput = {
  id?: string;
}

export type DescribePolicyOutput = {
  policy?: Policy;
}

export type DefinePolicyInput = {
  id?: string;
  policy?: Policy;
}

export type DefinePolicyOutput = Record<string, unknown>;

export type DeletePolicyInput = {
  id?: string;
}

export type DeletePolicyOutput = Record<string, unknown>;

export type EvaluateInput = {
  resource?: string;
  args?: string[];
}

export type EvaluateOutput = {
  actions?: Record<string, string>;
}

