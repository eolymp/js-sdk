// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { ExpressionEnum, ExpressionID, ExpressionString } from "../wellknown/expression"
import { Enum } from "./enum"
import { Value, Value_Translation } from "./enum_value"

interface Client {
  call<R, E, O>(verb: string, url: string, args: R, opts?: any): Promise<E>;
}

export class EnumService {
  private readonly cli: Client;
  private readonly url: string;

  constructor(cli: Client, url: string = 'https://api.eolymp.com') {
    this.cli = cli;
    this.url = url;
  }

  CreateEnum(input: CreateEnumInput, opts?: any): Promise<CreateEnumOutput> {
    const path = "/enums";

    return this.cli.call("POST", this.url+path, input, opts);
  }

  DeleteEnum(input: DeleteEnumInput, opts?: any): Promise<DeleteEnumOutput> {
    const path = "/enums/"+encodeURIComponent(input.enumId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.enumId);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }

  UpdateEnum(input: UpdateEnumInput, opts?: any): Promise<UpdateEnumOutput> {
    const path = "/enums/"+encodeURIComponent(input.enumId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.enumId);

    return this.cli.call("PUT", this.url+path, input, opts);
  }

  DescribeEnum(input: DescribeEnumInput, opts?: any): Promise<DescribeEnumOutput> {
    const path = "/enums/"+encodeURIComponent(input.enumId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.enumId);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  ListEnums(input: ListEnumsInput, opts?: any): Promise<ListEnumsOutput> {
    const path = "/enums";

    return this.cli.call("GET", this.url+path, input, opts);
  }

  CreateValue(input: CreateValueInput, opts?: any): Promise<CreateValueOutput> {
    const path = "/enums/"+encodeURIComponent(input.enumId||'')+"/items";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.enumId);

    return this.cli.call("POST", this.url+path, input, opts);
  }

  DeleteValue(input: DeleteValueInput, opts?: any): Promise<DeleteValueOutput> {
    const path = "/enums/"+encodeURIComponent(input.enumId||'')+"/values/"+encodeURIComponent(input.valueId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.enumId);
    delete(input.valueId);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }

  UpdateValue(input: UpdateValueInput, opts?: any): Promise<UpdateValueOutput> {
    const path = "/enums/"+encodeURIComponent(input.enumId||'')+"/values/"+encodeURIComponent(input.valueId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.enumId);
    delete(input.valueId);

    return this.cli.call("PUT", this.url+path, input, opts);
  }

  DescribeValue(input: DescribeValueInput, opts?: any): Promise<DescribeValueOutput> {
    const path = "/enums/"+encodeURIComponent(input.enumId||'')+"/values/"+encodeURIComponent(input.valueId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.enumId);
    delete(input.valueId);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  ListValues(input: ListValuesInput, opts?: any): Promise<ListValuesOutput> {
    const path = "/enums/"+encodeURIComponent(input.enumId||'')+"/items";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.enumId);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  TranslateValue(input: TranslateValueInput, opts?: any): Promise<TranslateValueOutput> {
    const path = "/enums/"+encodeURIComponent(input.enumId||'')+"/values/"+encodeURIComponent(input.valueId||'')+"/translations/"+encodeURIComponent(input.locale||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.enumId);
    delete(input.valueId);
    delete(input.locale);

    return this.cli.call("PUT", this.url+path, input, opts);
  }

  DeleteTranslation(input: DeleteTranslationInput, opts?: any): Promise<DeleteTranslationOutput> {
    const path = "/enums/"+encodeURIComponent(input.enumId||'')+"/values/"+encodeURIComponent(input.valueId||'')+"/translations/"+encodeURIComponent(input.locale||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.enumId);
    delete(input.valueId);
    delete(input.locale);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }

  ListTranslations(input: ListTranslationsInput, opts?: any): Promise<ListTranslationsOutput> {
    const path = "/enums/"+encodeURIComponent(input.enumId||'')+"/values/"+encodeURIComponent(input.valueId||'')+"/translations";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.enumId);
    delete(input.valueId);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }
}

export type CreateEnumInput = {
  enum?: Enum;
}

export type CreateEnumOutput = {
  enumId?: string;
}

export type DeleteEnumInput = {
  enumId?: string;
}

export type DeleteEnumOutput = Record<string, unknown>;

export type UpdateEnumInput = {
  patch?: string[];
  enumId?: string;
  enum?: Enum;
}

export type UpdateEnumOutput = Record<string, unknown>;

export type DescribeEnumInput = {
  enumId?: string;
}

export type DescribeEnumOutput = {
  enum?: Enum;
}

export type ListEnumsInput = {
  offset?: number;
  size?: number;
  filters?: ListEnumsInput_Filter;
}

export type ListEnumsInput_Filter = {
  query?: string;
  id?: ExpressionID[];
  name?: ExpressionString[];
}

export type ListEnumsOutput = {
  total?: number;
  items?: Enum[];
}

export type CreateValueInput = {
  enumId?: string;
  value?: Value;
}

export type CreateValueOutput = {
  valueId?: string;
}

export type DeleteValueInput = {
  enumId?: string;
  valueId?: string;
}

export type DeleteValueOutput = Record<string, unknown>;

export type UpdateValueInput = {
  patch?: string[];
  enumId?: string;
  valueId?: string;
  value?: Value;
}

export type UpdateValueOutput = Record<string, unknown>;

export type DescribeValueInput = {
  enumId?: string;
  valueId?: string;
  locale?: string;
}

export type DescribeValueOutput = {
  value?: Value;
}

export type ListValuesInput = {
  enumId?: string;
  offset?: number;
  size?: number;
  filters?: ListValuesInput_Filter;
  locale?: string;
}

export type ListValuesInput_Filter = {
  query?: string;
  id?: ExpressionID[];
  name?: ExpressionString[];
}

export type ListValuesOutput = {
  total?: number;
  items?: Value[];
}

export type TranslateValueInput = {
  enumId?: string;
  valueId?: string;
  locale?: string;
  translation?: Value_Translation;
}

export type TranslateValueOutput = Record<string, unknown>;

export type DeleteTranslationInput = {
  enumId?: string;
  valueId?: string;
  locale?: string;
}

export type DeleteTranslationOutput = Record<string, unknown>;

export type ListTranslationsInput = {
  enumId?: string;
  valueId?: string;
  offset?: number;
  size?: number;
  filters?: ListTranslationsInput_Filter;
}

export type ListTranslationsInput_Filter = {
  locale?: ExpressionEnum[];
}

export type ListTranslationsOutput = {
  total?: number;
  items?: Value_Translation[];
}

