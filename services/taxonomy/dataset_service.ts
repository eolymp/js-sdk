// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { ExpressionEnum, ExpressionID, ExpressionString } from "../wellknown/expression"
import { Dataset } from "./dataset"
import { Entry, Entry_Translation } from "./dataset_entry"

interface Client {
  call<R, E, O>(verb: string, url: string, args: R, opts?: any): Promise<E>;
}

export class DatasetService {
  private readonly cli: Client;
  private readonly url: string;

  constructor(cli: Client, url: string = 'https://api.eolymp.com') {
    this.cli = cli;
    this.url = url;
  }

  CreateDataset(input: CreateDatasetInput, opts?: any): Promise<CreateDatasetOutput> {
    const path = "/datasets";

    return this.cli.call("POST", this.url+path, input, opts);
  }

  DeleteDataset(input: DeleteDatasetInput, opts?: any): Promise<DeleteDatasetOutput> {
    const path = "/datasets/"+encodeURIComponent(input.datasetId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.datasetId);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }

  UpdateDataset(input: UpdateDatasetInput, opts?: any): Promise<UpdateDatasetOutput> {
    const path = "/datasets/"+encodeURIComponent(input.datasetId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.datasetId);

    return this.cli.call("PUT", this.url+path, input, opts);
  }

  DescribeDataset(input: DescribeDatasetInput, opts?: any): Promise<DescribeDatasetOutput> {
    const path = "/datasets/"+encodeURIComponent(input.datasetId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.datasetId);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  ListDatasets(input: ListDatasetsInput, opts?: any): Promise<ListDatasetsOutput> {
    const path = "/datasets";

    return this.cli.call("GET", this.url+path, input, opts);
  }

  CreateEntry(input: CreateEntryInput, opts?: any): Promise<CreateEntryOutput> {
    const path = "/datasets/"+encodeURIComponent(input.datasetId||'')+"/items";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.datasetId);

    return this.cli.call("POST", this.url+path, input, opts);
  }

  DeleteEntry(input: DeleteEntryInput, opts?: any): Promise<DeleteEntryOutput> {
    const path = "/datasets/"+encodeURIComponent(input.datasetId||'')+"/items/"+encodeURIComponent(input.entryId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.datasetId);
    delete(input.entryId);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }

  UpdateEntry(input: UpdateEntryInput, opts?: any): Promise<UpdateEntryOutput> {
    const path = "/datasets/"+encodeURIComponent(input.datasetId||'')+"/items/"+encodeURIComponent(input.entryId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.datasetId);
    delete(input.entryId);

    return this.cli.call("PUT", this.url+path, input, opts);
  }

  DescribeEntry(input: DescribeEntryInput, opts?: any): Promise<DescribeEntryOutput> {
    const path = "/datasets/"+encodeURIComponent(input.datasetId||'')+"/items/"+encodeURIComponent(input.entryId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.datasetId);
    delete(input.entryId);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  ListEntries(input: ListEntriesInput, opts?: any): Promise<ListEntriesOutput> {
    const path = "/datasets/"+encodeURIComponent(input.datasetId||'')+"/items";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.datasetId);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  TranslateEntry(input: TranslateEntryInput, opts?: any): Promise<TranslateEntryOutput> {
    const path = "/datasets/"+encodeURIComponent(input.datasetId||'')+"/items/"+encodeURIComponent(input.entryId||'')+"/translations/"+encodeURIComponent(input.locale||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.datasetId);
    delete(input.entryId);
    delete(input.locale);

    return this.cli.call("PUT", this.url+path, input, opts);
  }

  DeleteTranslation(input: DeleteTranslationInput, opts?: any): Promise<DeleteTranslationOutput> {
    const path = "/datasets/"+encodeURIComponent(input.datasetId||'')+"/items/"+encodeURIComponent(input.entryId||'')+"/translations/"+encodeURIComponent(input.locale||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.datasetId);
    delete(input.entryId);
    delete(input.locale);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }

  ListTranslations(input: ListTranslationsInput, opts?: any): Promise<ListTranslationsOutput> {
    const path = "/datasets/"+encodeURIComponent(input.datasetId||'')+"/items/"+encodeURIComponent(input.entryId||'')+"/translations";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.datasetId);
    delete(input.entryId);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }
}

export type CreateDatasetInput = {
  dataset?: Dataset;
}

export type CreateDatasetOutput = {
  datasetId?: string;
}

export type DeleteDatasetInput = {
  datasetId?: string;
}

export type DeleteDatasetOutput = Record<string, unknown>;

export type UpdateDatasetInput = {
  patch?: string[];
  datasetId?: string;
  dataset?: Dataset;
}

export type UpdateDatasetOutput = Record<string, unknown>;

export type DescribeDatasetInput = {
  datasetId?: string;
}

export type DescribeDatasetOutput = {
  dataset?: Dataset;
}

export type ListDatasetsInput = {
  offset?: number;
  size?: number;
  filters?: ListDatasetsInput_Filter;
}

export type ListDatasetsInput_Filter = {
  query?: string;
  id?: ExpressionID[];
  name?: ExpressionString[];
}

export type ListDatasetsOutput = {
  total?: number;
  items?: Dataset[];
}

export type CreateEntryInput = {
  datasetId?: string;
  entry?: Entry;
}

export type CreateEntryOutput = {
  entryId?: string;
}

export type DeleteEntryInput = {
  datasetId?: string;
  entryId?: string;
}

export type DeleteEntryOutput = Record<string, unknown>;

export type UpdateEntryInput = {
  patch?: string[];
  datasetId?: string;
  entryId?: string;
  entry?: Entry;
}

export type UpdateEntryOutput = Record<string, unknown>;

export type DescribeEntryInput = {
  datasetId?: string;
  entryId?: string;
  locale?: string;
}

export type DescribeEntryOutput = {
  entry?: Entry;
}

export type ListEntriesInput = {
  datasetId?: string;
  offset?: number;
  size?: number;
  filters?: ListEntriesInput_Filter;
  locale?: string;
}

export type ListEntriesInput_Filter = {
  query?: string;
  id?: ExpressionID[];
  name?: ExpressionString[];
}

export type ListEntriesOutput = {
  total?: number;
  items?: Entry[];
}

export type TranslateEntryInput = {
  entryId?: string;
  locale?: string;
  translation?: Entry_Translation;
}

export type TranslateEntryOutput = Record<string, unknown>;

export type DeleteTranslationInput = {
  datasetId?: string;
  entryId?: string;
  locale?: string;
}

export type DeleteTranslationOutput = Record<string, unknown>;

export type ListTranslationsInput = {
  datasetId?: string;
  entryId?: string;
  offset?: number;
  size?: number;
  filters?: ListTranslationsInput_Filter;
}

export type ListTranslationsInput_Filter = {
  locale?: ExpressionEnum[];
}

export type ListTranslationsOutput = {
  total?: number;
  items?: Entry_Translation[];
}

