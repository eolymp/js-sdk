// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { Certificate } from "./certificate"
import { Claims } from "./claims"

interface Client {
  call<R, E, O>(verb: string, url: string, args: R, opts?: any): Promise<E>;
}

export class OAuth2Service {
  private readonly cli: Client;
  private readonly url: string;

  constructor(cli: Client, url: string = 'https://api.eolymp.com') {
    this.cli = cli;
    this.url = url;
  }
}

export type IssueTokenInput = {
  grantType?: string;
  username?: string;
  password?: string;
  clientId?: string;
  clientSecret?: string;
  code?: string;
  codeVerifier?: string;
  scope?: string;
  refreshToken?: string;
  redirectUri?: string;
}

export type IssueTokenOutput = {
  accessToken?: string;
  tokenType?: string;
  expiresIn?: number;
  refreshToken?: string;
  scope?: string;
  claims?: Claims;
  idToken?: string;
}

export type IntrospectTokenInput = {
  token?: string;
}

export type IntrospectTokenOutput = {
  active?: boolean;
  scope?: string;
  expire?: string;
  claims?: Claims;
}

export type RevokeTokenInput = {
  token?: string;
}

export type RevokeTokenOutput = Record<string, unknown>;

export type RequestAuthInput = {
  clientId?: string;
  codeChallenge?: string;
  codeChallengeMethod?: string;
  redirectUri?: string;
  responseType?: string;
  scope?: string;
  state?: string;
}

export type RequestAuthOutput = {
  authorizationCode?: string;
  redirectUri?: string;
}

export type UserInfoInput = Record<string, unknown>;

export type UserInfoOutput = {
  claims?: Claims;
}

export type ListCertificatesInput = Record<string, unknown>;

export type ListCertificatesOutput = {
  items?: Certificate[];
}

export type RegisterClientInput = {
  redirectUris?: string[];
  tokenEndpointAuthMethod?: string;
  grantTypes?: string[];
  responseTypes?: string[];
  clientName?: string;
  clientUri?: string;
  logoUri?: string;
  scope?: string;
  contacts?: string[];
  tosUri?: string;
  policyUri?: string;
  jwksUri?: string;
  softwareId?: string;
  softwareVersion?: string;
  softwareStatement?: string;
}

export type RegisterClientOutput = {
  clientId?: string;
  clientSecret?: string;
  clientIdIssuedAt?: string;
  clientSecretExpiresAt?: string;
}

