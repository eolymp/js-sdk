// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { ExpressionID } from "../wellknown/expression"
import { Scoreboard, Scoreboard_Contest, Scoreboard_Row } from "./scoreboard"

interface Client {
  call<R, E>(method: string, args: R): Promise<E>;
}

export class Ranker {
  private readonly cli: Client;

  constructor(cli: Client) {
    this.cli = cli;
  }

  CreateScoreboard(input: CreateScoreboardInput): Promise<CreateScoreboardOutput> {
    return this.cli.call("eolymp.ranker.Ranker/CreateScoreboard", input);
  }

  UpdateScoreboard(input: UpdateScoreboardInput): Promise<UpdateScoreboardOutput> {
    return this.cli.call("eolymp.ranker.Ranker/UpdateScoreboard", input);
  }

  RebuildScoreboard(input: RebuildScoreboardInput): Promise<RebuildScoreboardOutput> {
    return this.cli.call("eolymp.ranker.Ranker/RebuildScoreboard", input);
  }

  AssignContest(input: AssignContestInput): Promise<AssignContestOutput> {
    return this.cli.call("eolymp.ranker.Ranker/AssignContest", input);
  }

  UnassignContest(input: UnassignContestInput): Promise<UnassignContestOutput> {
    return this.cli.call("eolymp.ranker.Ranker/UnassignContest", input);
  }

  DeleteScoreboard(input: DeleteScoreboardInput): Promise<DeleteScoreboardOutput> {
    return this.cli.call("eolymp.ranker.Ranker/DeleteScoreboard", input);
  }

  LookupScoreboard(input: LookupScoreboardInput): Promise<LookupScoreboardOutput> {
    return this.cli.call("eolymp.ranker.Ranker/LookupScoreboard", input);
  }

  DescribeScoreboard(input: DescribeScoreboardInput): Promise<DescribeScoreboardOutput> {
    return this.cli.call("eolymp.ranker.Ranker/DescribeScoreboard", input);
  }

  ListScoreboards(input: ListScoreboardsInput): Promise<ListScoreboardsOutput> {
    return this.cli.call("eolymp.ranker.Ranker/ListScoreboards", input);
  }

  ListScoreboardRows(input: ListScoreboardRowsInput): Promise<ListScoreboardRowsOutput> {
    return this.cli.call("eolymp.ranker.Ranker/ListScoreboardRows", input);
  }
}

export type CreateScoreboardInput = {
  scoreboard?: Scoreboard;
}

export type CreateScoreboardOutput = {
  scoreboardId?: string;
}

export type UpdateScoreboardInput = {
  scoreboardId?: string;
  scoreboard?: Scoreboard;
}

export type UpdateScoreboardOutput = Record<string, unknown>;

export type RebuildScoreboardInput = {
  scoreboardId?: string;
}

export type RebuildScoreboardOutput = Record<string, unknown>;

export type AssignContestInput = {
  scoreboardId?: string;
  contest?: Scoreboard_Contest;
}

export type AssignContestOutput = Record<string, unknown>;

export type UnassignContestInput = {
  scoreboardId?: string;
  contestId?: string;
}

export type UnassignContestOutput = Record<string, unknown>;

export type DeleteScoreboardInput = {
  scoreboardId?: string;
}

export type DeleteScoreboardOutput = Record<string, unknown>;

export type LookupScoreboardInput = {
  key?: string;
}

export type LookupScoreboardOutput = {
  scoreboard?: Scoreboard;
}

export type DescribeScoreboardInput = {
  scoreboardId?: string;
}

export type DescribeScoreboardOutput = {
  scoreboard?: Scoreboard;
}

export type ListScoreboardsInput = {
  offset?: number;
  size?: number;
  filters?: ListScoreboardsInput_Filter;
}

export type ListScoreboardsInput_Filter = {
  id?: ExpressionID[];
}

export type ListScoreboardsOutput = {
  total?: number;
  items?: Scoreboard[];
}

export type ListScoreboardRowsInput = {
  scoreboardId?: string;
}

export type ListScoreboardRowsOutput = {
  total?: number;
  items?: Scoreboard_Row[];
}

