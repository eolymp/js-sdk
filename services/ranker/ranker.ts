// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { ExpressionID } from "../wellknown/expression"
import { Activity } from "./activity"
import { Scoreboard, Scoreboard_Column, Scoreboard_Row } from "./scoreboard"

interface Client {
  call<R, E, O>(verb: string, url: string, args: R, opts: O): Promise<E>;
}

export class Ranker {
  private readonly cli: Client;
  private readonly url: string;

  constructor(cli: Client, url: string = 'https://api.eolymp.com') {
    this.cli = cli;
    this.url = url;
  }

  CreateScoreboard<O>(input: CreateScoreboardInput, opts?: O): Promise<CreateScoreboardOutput> {
    const path = "/scoreboards";

    return this.cli.call("POST", this.url + path, input, opts);
  }

  UpdateScoreboard<O>(input: UpdateScoreboardInput, opts?: O): Promise<UpdateScoreboardOutput> {
    const path = "/scoreboards/"+encodeURIComponent(input.scoreboardId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.scoreboardId);

    return this.cli.call("PUT", this.url + path, input, opts);
  }

  RebuildScoreboard<O>(input: RebuildScoreboardInput, opts?: O): Promise<RebuildScoreboardOutput> {
    const path = "/scoreboards/"+encodeURIComponent(input.scoreboardId||'')+"/rebuild";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.scoreboardId);

    return this.cli.call("POST", this.url + path, input, opts);
  }

  DeleteScoreboard<O>(input: DeleteScoreboardInput, opts?: O): Promise<DeleteScoreboardOutput> {
    const path = "/scoreboards/"+encodeURIComponent(input.scoreboardId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.scoreboardId);

    return this.cli.call("DELETE", this.url + path, input, opts);
  }

  DescribeScoreboard<O>(input: DescribeScoreboardInput, opts?: O): Promise<DescribeScoreboardOutput> {
    const path = "/scoreboards/"+encodeURIComponent(input.scoreboardId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.scoreboardId);

    return this.cli.call("GET", this.url + path, input, opts);
  }

  ListScoreboards<O>(input: ListScoreboardsInput, opts?: O): Promise<ListScoreboardsOutput> {
    const path = "/scoreboards";

    return this.cli.call("GET", this.url + path, input, opts);
  }

  DescribeScoreboardRow<O>(input: DescribeScoreboardRowInput, opts?: O): Promise<DescribeScoreboardRowOutput> {
    const path = "/scoreboards/"+encodeURIComponent(input.scoreboardId||'')+"/rows/"+encodeURIComponent(input.memberId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.scoreboardId);
    delete(input.memberId);

    return this.cli.call("GET", this.url + path, input, opts);
  }

  ListScoreboardRows<O>(input: ListScoreboardRowsInput, opts?: O): Promise<ListScoreboardRowsOutput> {
    const path = "/scoreboards/"+encodeURIComponent(input.scoreboardId||'')+"/rows";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.scoreboardId);

    return this.cli.call("GET", this.url + path, input, opts);
  }

  AddScoreboardColumn<O>(input: AddScoreboardColumnInput, opts?: O): Promise<AddScoreboardColumnOutput> {
    const path = "/scoreboards/"+encodeURIComponent(input.scoreboardId||'')+"/columns";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.scoreboardId);

    return this.cli.call("POST", this.url + path, input, opts);
  }

  DeleteScoreboardColumn<O>(input: DeleteScoreboardColumnInput, opts?: O): Promise<DeleteScoreboardColumnOutput> {
    const path = "/scoreboards/"+encodeURIComponent(input.scoreboardId||'')+"/columns/"+encodeURIComponent(input.columnId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.scoreboardId);
    delete(input.columnId);

    return this.cli.call("DELETE", this.url + path, input, opts);
  }

  DescribeScoreboardColumn<O>(input: DescribeScoreboardColumnInput, opts?: O): Promise<DescribeScoreboardColumnOutput> {
    const path = "/scoreboards/"+encodeURIComponent(input.scoreboardId||'')+"/columns/"+encodeURIComponent(input.columnId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.scoreboardId);
    delete(input.columnId);

    return this.cli.call("GET", this.url + path, input, opts);
  }

  ListScoreboardColumns<O>(input: ListScoreboardColumnsInput, opts?: O): Promise<ListScoreboardColumnsOutput> {
    const path = "/scoreboards/"+encodeURIComponent(input.scoreboardId||'')+"/columns";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.scoreboardId);

    return this.cli.call("GET", this.url + path, input, opts);
  }

  ListActivities<O>(input: ListActivitiesInput, opts?: O): Promise<ListActivitiesOutput> {
    const path = "/scoreboards/"+encodeURIComponent(input.scoreboardId||'')+"/activities";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.scoreboardId);

    return this.cli.call("GET", this.url + path, input, opts);
  }
}

export type CreateScoreboardInput = {
  scoreboard?: Scoreboard;
}

export type CreateScoreboardOutput = {
  scoreboardId?: string;
}

export type UpdateScoreboardInput = {
  scoreboardId?: string;
  scoreboard?: Scoreboard;
}

export type UpdateScoreboardOutput = Record<string, unknown>;

export type RebuildScoreboardInput = {
  scoreboardId?: string;
}

export type RebuildScoreboardOutput = {
  activityId?: string;
}

export type DeleteScoreboardInput = {
  scoreboardId?: string;
}

export type DeleteScoreboardOutput = Record<string, unknown>;

export type DescribeScoreboardInput = {
  scoreboardId?: string;
  scoreboardKey?: string;
}

export type DescribeScoreboardOutput = {
  scoreboard?: Scoreboard;
}

export type ListScoreboardsInput = {
  offset?: number;
  size?: number;
  filters?: ListScoreboardsInput_Filter;
}

export type ListScoreboardsInput_Filter = {
  id?: ExpressionID[];
}

export type ListScoreboardsOutput = {
  total?: number;
  items?: Scoreboard[];
}

export type DescribeScoreboardRowInput = {
  scoreboardId?: string;
  memberId?: string;
}

export type DescribeScoreboardRowOutput = {
  row?: Scoreboard_Row;
}

export type ListScoreboardRowsInput = {
  scoreboardId?: string;
  offset?: number;
  size?: number;
  filters?: ListScoreboardRowsInput_Filter;
}

export type ListScoreboardRowsInput_Filter = {
  memberId?: ExpressionID[];
}

export type ListScoreboardRowsOutput = {
  total?: number;
  items?: Scoreboard_Row[];
}

export type AddScoreboardColumnInput = {
  scoreboardId?: string;
  column?: Scoreboard_Column;
}

export type AddScoreboardColumnOutput = {
  columnId?: string;
}

export type DeleteScoreboardColumnInput = {
  scoreboardId?: string;
  columnId?: string;
}

export type DeleteScoreboardColumnOutput = Record<string, unknown>;

export type DescribeScoreboardColumnInput = {
  scoreboardId?: string;
  columnId?: string;
}

export type DescribeScoreboardColumnOutput = {
  column?: Scoreboard_Column;
}

export type ListScoreboardColumnsInput = {
  scoreboardId?: string;
}

export type ListScoreboardColumnsOutput = {
  total?: number;
  items?: Scoreboard_Column[];
}

export type ListActivitiesInput = {
  scoreboardId?: string;
  offset?: number;
  size?: number;
}

export type ListActivitiesOutput = {
  total?: number;
  items?: Activity[];
}

