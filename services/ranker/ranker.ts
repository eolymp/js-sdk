// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { ExpressionEnum, ExpressionID, ExpressionInt, ExpressionString } from "../wellknown/expression"
import { Activity } from "./activity"
import { Scoreboard, Scoreboard_Action, Scoreboard_Column, Scoreboard_Row } from "./scoreboard"

interface Client {
  call<R, E, O>(verb: string, url: string, args: R, opts?: any): Promise<E>;
}

export class Ranker {
  private readonly cli: Client;
  private readonly url: string;

  constructor(cli: Client, url: string = 'https://api.eolymp.com') {
    this.cli = cli;
    this.url = url;
  }

  CreateScoreboard(input: CreateScoreboardInput, opts?: any): Promise<CreateScoreboardOutput> {
    const path = "/scoreboards";

    return this.cli.call("POST", this.url+path, input, opts);
  }

  UpdateScoreboard(input: UpdateScoreboardInput, opts?: any): Promise<UpdateScoreboardOutput> {
    const path = "/scoreboards/"+encodeURIComponent(input.scoreboardId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.scoreboardId);

    return this.cli.call("PUT", this.url+path, input, opts);
  }

  RebuildScoreboard(input: RebuildScoreboardInput, opts?: any): Promise<RebuildScoreboardOutput> {
    const path = "/scoreboards/"+encodeURIComponent(input.scoreboardId||'')+"/rebuild";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.scoreboardId);

    return this.cli.call("POST", this.url+path, input, opts);
  }

  DeleteScoreboard(input: DeleteScoreboardInput, opts?: any): Promise<DeleteScoreboardOutput> {
    const path = "/scoreboards/"+encodeURIComponent(input.scoreboardId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.scoreboardId);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }

  DescribeScoreboard(input: DescribeScoreboardInput, opts?: any): Promise<DescribeScoreboardOutput> {
    const path = "/scoreboards/"+encodeURIComponent(input.scoreboardId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.scoreboardId);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  ListScoreboards(input: ListScoreboardsInput, opts?: any): Promise<ListScoreboardsOutput> {
    const path = "/scoreboards";

    return this.cli.call("GET", this.url+path, input, opts);
  }

  DescribeScoreboardRow(input: DescribeScoreboardRowInput, opts?: any): Promise<DescribeScoreboardRowOutput> {
    const path = "/scoreboards/"+encodeURIComponent(input.scoreboardId||'')+"/rows/"+encodeURIComponent(input.memberId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.scoreboardId);
    delete(input.memberId);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  ListScoreboardRows(input: ListScoreboardRowsInput, opts?: any): Promise<ListScoreboardRowsOutput> {
    const path = "/scoreboards/"+encodeURIComponent(input.scoreboardId||'')+"/rows";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.scoreboardId);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  AddScoreboardColumn(input: AddScoreboardColumnInput, opts?: any): Promise<AddScoreboardColumnOutput> {
    const path = "/scoreboards/"+encodeURIComponent(input.scoreboardId||'')+"/columns";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.scoreboardId);

    return this.cli.call("POST", this.url+path, input, opts);
  }

  UpdateScoreboardColumn(input: UpdateScoreboardColumnInput, opts?: any): Promise<UpdateScoreboardColumnOutput> {
    const path = "/scoreboards/"+encodeURIComponent(input.scoreboardId||'')+"/columns/"+encodeURIComponent(input.columnId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.scoreboardId);
    delete(input.columnId);

    return this.cli.call("PUT", this.url+path, input, opts);
  }

  DeleteScoreboardColumn(input: DeleteScoreboardColumnInput, opts?: any): Promise<DeleteScoreboardColumnOutput> {
    const path = "/scoreboards/"+encodeURIComponent(input.scoreboardId||'')+"/columns/"+encodeURIComponent(input.columnId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.scoreboardId);
    delete(input.columnId);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }

  DescribeScoreboardColumn(input: DescribeScoreboardColumnInput, opts?: any): Promise<DescribeScoreboardColumnOutput> {
    const path = "/scoreboards/"+encodeURIComponent(input.scoreboardId||'')+"/columns/"+encodeURIComponent(input.columnId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.scoreboardId);
    delete(input.columnId);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  ListScoreboardColumns(input: ListScoreboardColumnsInput, opts?: any): Promise<ListScoreboardColumnsOutput> {
    const path = "/scoreboards/"+encodeURIComponent(input.scoreboardId||'')+"/columns";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.scoreboardId);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  ListActivities(input: ListActivitiesInput, opts?: any): Promise<ListActivitiesOutput> {
    const path = "/scoreboards/"+encodeURIComponent(input.scoreboardId||'')+"/activities";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.scoreboardId);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  ScheduleAction(input: ScheduleActionInput, opts?: any): Promise<ScheduleActionOutput> {
    const path = "/scoreboards/"+encodeURIComponent(input.scoreboardId||'')+"/schedule";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.scoreboardId);

    return this.cli.call("POST", this.url+path, input, opts);
  }

  UnscheduleAction(input: UnscheduleActionInput, opts?: any): Promise<UnscheduleActionOutput> {
    const path = "/scoreboards/"+encodeURIComponent(input.scoreboardId||'')+"/schedule/"+encodeURIComponent(input.actionId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.scoreboardId);
    delete(input.actionId);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }

  ListScheduledActions(input: ListScheduledActionsInput, opts?: any): Promise<ListScheduledActionsOutput> {
    const path = "/scoreboards/"+encodeURIComponent(input.scoreboardId||'')+"/schedule";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.scoreboardId);

    return this.cli.call("GET", this.url+path, input, opts);
  }
}

export type CreateScoreboardInput = {
  scoreboard?: Scoreboard;
  addDefaultColumns?: boolean;
  duplicateScoreboardId?: string;
}

export type CreateScoreboardOutput = {
  scoreboardId?: string;
}

export type UpdateScoreboardInput = {
  patch?: string[];
  scoreboardId?: string;
  scoreboard?: Scoreboard;
}

export type UpdateScoreboardOutput = Record<string, unknown>;

export type RebuildScoreboardInput = {
  scoreboardId?: string;
}

export type RebuildScoreboardOutput = {
  activityId?: string;
}

export type DeleteScoreboardInput = {
  scoreboardId?: string;
}

export type DeleteScoreboardOutput = Record<string, unknown>;

export type DescribeScoreboardInput = {
  scoreboardId?: string;
  scoreboardKey?: string;
}

export type DescribeScoreboardOutput = {
  scoreboard?: Scoreboard;
}

export type ListScoreboardsInput = {
  offset?: number;
  size?: number;
  filters?: ListScoreboardsInput_Filter;
}

export type ListScoreboardsInput_Filter = {
  id?: ExpressionID[];
}

export type ListScoreboardsOutput = {
  total?: number;
  items?: Scoreboard[];
}

export type DescribeScoreboardRowInput = {
  mode?: string;
  punctualTime?: number;
  scoreboardId?: string;
  memberId?: string;
}

export type DescribeScoreboardRowOutput = {
  row?: Scoreboard_Row;
  frozen?: boolean;
}

export type ListScoreboardRowsInput = {
  scoreboardId?: string;
  mode?: string;
  punctualTime?: number;
  offset?: number;
  size?: number;
  filters?: ListScoreboardRowsInput_Filter;
  sort?: string;
  order?: string;
}

export type ListScoreboardRowsInput_ExpressionColumn = {
  key?: string;
  string?: ExpressionString;
  number?: ExpressionInt;
  enum?: ExpressionEnum;
}

export type ListScoreboardRowsInput_Filter = {
  memberId?: ExpressionID[];
  column?: ListScoreboardRowsInput_ExpressionColumn[];
}

export type ListScoreboardRowsOutput = {
  total?: number;
  items?: Scoreboard_Row[];
  frozen?: boolean;
}

export type AddScoreboardColumnInput = {
  scoreboardId?: string;
  column?: Scoreboard_Column;
}

export type AddScoreboardColumnOutput = {
  columnId?: string;
}

export type UpdateScoreboardColumnInput = {
  patch?: string[];
  scoreboardId?: string;
  columnId?: string;
  column?: Scoreboard_Column;
}

export type UpdateScoreboardColumnOutput = Record<string, unknown>;

export type DeleteScoreboardColumnInput = {
  scoreboardId?: string;
  columnId?: string;
}

export type DeleteScoreboardColumnOutput = Record<string, unknown>;

export type DescribeScoreboardColumnInput = {
  scoreboardId?: string;
  columnId?: string;
}

export type DescribeScoreboardColumnOutput = {
  column?: Scoreboard_Column;
}

export type ListScoreboardColumnsInput = {
  scoreboardId?: string;
}

export type ListScoreboardColumnsOutput = {
  total?: number;
  items?: Scoreboard_Column[];
}

export type ListActivitiesInput = {
  scoreboardId?: string;
  offset?: number;
  size?: number;
}

export type ListActivitiesOutput = {
  total?: number;
  items?: Activity[];
}

export type ScheduleActionInput = {
  scoreboardId?: string;
  action?: Scoreboard_Action;
}

export type ScheduleActionOutput = {
  actionId?: string;
}

export type UnscheduleActionInput = {
  scoreboardId?: string;
  actionId?: string;
}

export type UnscheduleActionOutput = Record<string, unknown>;

export type ListScheduledActionsInput = {
  scoreboardId?: string;
}

export type ListScheduledActionsOutput = {
  total?: number;
  items?: Scoreboard_Action[];
}

