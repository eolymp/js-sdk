// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { ExpressionID } from "../wellknown/expression"
import { AssignmentV2 } from "./assignment_v2"

interface Client {
  call<R, E, O>(verb: string, url: string, args: R, opts?: any): Promise<E>;
}

export class AssignmentServiceV2 {
  private readonly cli: Client;
  private readonly url: string;

  constructor(cli: Client, url: string = 'https://api.eolymp.com') {
    this.cli = cli;
    this.url = url;
  }

  CreateAssignment(input: CreateAssignmentV2Input, opts?: any): Promise<CreateAssignmentV2Output> {
    const path = "/v2/assignments";

    return this.cli.call("POST", this.url+path, input, opts);
  }

  UpdateAssignment(input: UpdateAssignmentV2Input, opts?: any): Promise<UpdateAssignmentV2Output> {
    const path = "/v2/assignments/"+encodeURIComponent(input.assignmentId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.assignmentId);

    return this.cli.call("PUT", this.url+path, input, opts);
  }

  DeleteAssignment(input: DeleteAssignmentV2Input, opts?: any): Promise<DeleteAssignmentV2Output> {
    const path = "/v2/assignments/"+encodeURIComponent(input.assignmentId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.assignmentId);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }

  DescribeAssignment(input: DescribeAssignmentV2Input, opts?: any): Promise<DescribeAssignmentV2Output> {
    const path = "/v2/assignments/"+encodeURIComponent(input.assignmentId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.assignmentId);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  ListAssignments(input: ListAssignmentsV2Input, opts?: any): Promise<ListAssignmentsV2Output> {
    const path = "/v2/assignments";

    return this.cli.call("GET", this.url+path, input, opts);
  }
}

export type CreateAssignmentV2Input = {
  assignment?: AssignmentV2;
}

export type CreateAssignmentV2Output = {
  assignmentId?: string;
}

export type UpdateAssignmentV2Input = {
  assignmentId?: string;
  assignment?: AssignmentV2;
}

export type UpdateAssignmentV2Output = Record<string, unknown>;

export type DeleteAssignmentV2Input = {
  assignmentId?: string;
}

export type DeleteAssignmentV2Output = Record<string, unknown>;

export type DescribeAssignmentV2Input = {
  assignmentId?: string;
}

export type DescribeAssignmentV2Output = {
  assignment?: AssignmentV2;
}

export type ListAssignmentsV2Input = {
  offset?: number;
  size?: number;
  filters?: ListAssignmentsV2Input_Filter;
  sort?: string;
  order?: string;
}

export type ListAssignmentsV2Input_Filter = {
  id?: ExpressionID[];
  groupId?: ExpressionID[];
  memberId?: ExpressionID[];
}

export type ListAssignmentsV2Output = {
  total?: number;
  items?: AssignmentV2[];
}

