// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { AssignmentItemV2 } from "./assignment_item_v2"
import { AssignmentV2 } from "./assignment_v2"

interface Client {
  call<R, E, O>(verb: string, url: string, args: R, opts?: any): Promise<E>;
}

export class AssignmentServiceV2 {
  private readonly cli: Client;
  private readonly url: string;

  constructor(cli: Client, url: string = 'https://api.eolymp.com') {
    this.cli = cli;
    this.url = url;
  }

  CreateAssignment(input: CreateAssignmentV2Input, opts?: any): Promise<CreateAssignmentV2Output> {
    const path = "/assignments";

    return this.cli.call("POST", this.url+path, input, opts);
  }

  DeleteAssignment(input: DeleteAssignmentV2Input, opts?: any): Promise<DeleteAssignmentV2Output> {
    const path = "/assignments/"+encodeURIComponent(input.moduleId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.moduleId);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }

  StartAssignment(input: StartAssignmentV2Input, opts?: any): Promise<StartAssignmentV2Output> {
    const path = "/assignments/"+encodeURIComponent(input.moduleId||'')+"/start";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.moduleId);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }

  ListAssignments(input: ListAssignmentsV2Input, opts?: any): Promise<ListAssignmentsV2Output> {
    const path = "/assignments";

    return this.cli.call("GET", this.url+path, input, opts);
  }

  ListAssignmentItems(input: ListAssignmentItemsV2Input, opts?: any): Promise<ListAssignmentItemsV2Output> {
    const path = "/assignments/"+encodeURIComponent(input.moduleId||'')+"/items";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.moduleId);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  DescribeAssignmentItem(input: DescribeAssignmentItemV2Input, opts?: any): Promise<DescribeAssignmentItemV2Output> {
    const path = "/assignments/"+encodeURIComponent(input.moduleId||'')+"/items/"+encodeURIComponent(input.itemId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.moduleId);
    delete(input.itemId);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  UpdateAssignmentItem(input: UpdateAssignmentItemV2Input, opts?: any): Promise<UpdateAssignmentItemV2Output> {
    const path = "/assignments/"+encodeURIComponent(input.moduleId||'')+"/items/"+encodeURIComponent(input.itemId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.moduleId);
    delete(input.itemId);

    return this.cli.call("POST", this.url+path, input, opts);
  }

  ResetAssignmentItem(input: ResetAssignmentItemV2Input, opts?: any): Promise<ResetAssignmentItemV2Output> {
    const path = "/assignments/"+encodeURIComponent(input.moduleId||'')+"/items/"+encodeURIComponent(input.itemId||'')+"/reset";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.moduleId);
    delete(input.itemId);

    return this.cli.call("POST", this.url+path, input, opts);
  }
}

export type CreateAssignmentV2Input = {
  moduleId?: string;
  startAfter?: string;
  completeBefore?: string;
  duration?: number;
}

export type CreateAssignmentV2Output = Record<string, unknown>;

export type DeleteAssignmentV2Input = {
  moduleId?: string;
}

export type DeleteAssignmentV2Output = Record<string, unknown>;

export type StartAssignmentV2Input = {
  moduleId?: string;
}

export type StartAssignmentV2Output = Record<string, unknown>;

export type ListAssignmentsV2Input = Record<string, unknown>;

export type ListAssignmentsV2Output = {
  items?: AssignmentV2[];
}

export type ListAssignmentItemsV2Input = {
  moduleId?: string;
}

export type ListAssignmentItemsV2Output = {
  items?: AssignmentItemV2[];
}

export type DescribeAssignmentItemV2Input = {
  moduleId?: string;
  itemId?: string;
  extra?: string[];
}

export type DescribeAssignmentItemV2Output = {
  item?: AssignmentItemV2;
}

export type UpdateAssignmentItemV2Input = {
  patch?: string[];
  moduleId?: string;
  itemId?: string;
  item?: AssignmentItemV2;
}

export type UpdateAssignmentItemV2Output = Record<string, unknown>;

export type ResetAssignmentItemV2Input = {
  moduleId?: string;
  itemId?: string;
}

export type ResetAssignmentItemV2Output = Record<string, unknown>;

