// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { ExpressionID } from "../wellknown/expression"
import { Assignment } from "./assignment"
import { Material_Progress } from "./material"
import { Module_Progress } from "./module"
import { Student } from "./student"

interface Client {
  call<R, E, O>(verb: string, url: string, args: R, opts?: any): Promise<E>;
}

export class StudentService {
  private readonly cli: Client;
  private readonly url: string;

  constructor(cli: Client, url: string = 'https://api.eolymp.com') {
    this.cli = cli;
    this.url = url;
  }

  CreateStudent(input: CreateStudentInput, opts?: any): Promise<CreateStudentOutput> {
    const path = "/students";

    return this.cli.call("POST", this.url+path, input, opts);
  }

  UpdateStudent(input: UpdateStudentInput, opts?: any): Promise<UpdateStudentOutput> {
    const path = "/students/"+encodeURIComponent(input.memberId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.memberId);

    return this.cli.call("POST", this.url+path, input, opts);
  }

  DeleteStudent(input: DeleteStudentInput, opts?: any): Promise<DeleteStudentOutput> {
    const path = "/students/"+encodeURIComponent(input.memberId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.memberId);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }

  DescribeStudent(input: DescribeStudentInput, opts?: any): Promise<DescribeStudentOutput> {
    const path = "/students/"+encodeURIComponent(input.memberId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.memberId);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  ListStudents(input: ListStudentsInput, opts?: any): Promise<ListStudentsOutput> {
    const path = "/students";

    return this.cli.call("GET", this.url+path, input, opts);
  }

  JoinCourse(input: JoinCourseInput, opts?: any): Promise<JoinCourseOutput> {
    const path = "/join";

    return this.cli.call("POST", this.url+path, input, opts);
  }

  DescribeViewer(input: DescribeViewerInput, opts?: any): Promise<DescribeViewerOutput> {
    const path = "/viewer/student";

    return this.cli.call("GET", this.url+path, input, opts);
  }

  ListStudentAssignments(input: ListStudentAssignmentsInput, opts?: any): Promise<ListStudentAssignmentsOutput> {
    const path = "/students/"+encodeURIComponent(input.memberId||'')+"/assignments";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.memberId);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  UpdateStudentAssignment(input: UpdateStudentAssignmentInput, opts?: any): Promise<UpdateStudentAssignmentOutput> {
    const path = "/students/"+encodeURIComponent(input.memberId||'')+"/assignments";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.memberId);

    return this.cli.call("POST", this.url+path, input, opts);
  }

  DeleteStudentAssignment(input: DeleteStudentAssignmentInput, opts?: any): Promise<DeleteStudentAssignmentOutput> {
    const path = "/students/"+encodeURIComponent(input.memberId||'')+"/assignments";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.memberId);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }

  ListStudentGrades(input: ListStudentGradesInput, opts?: any): Promise<ListStudentGradesOutput> {
    const path = "/students/"+encodeURIComponent(input.memberId||'')+"/grades";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.memberId);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  ListModuleGrades(input: ListModuleGradesInput, opts?: any): Promise<ListModuleGradesOutput> {
    const path = "/students/"+encodeURIComponent(input.memberId||'')+"/grades/"+encodeURIComponent(input.moduleId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.memberId);
    delete(input.moduleId);

    return this.cli.call("GET", this.url+path, input, opts);
  }
}

export type CreateStudentInput = {
  student?: Student;
}

export type CreateStudentOutput = {
  studentId?: string;
}

export type UpdateStudentInput = {
  patch?: string[];
  memberId?: string;
  student?: Student;
}

export type UpdateStudentOutput = Record<string, unknown>;

export type DeleteStudentInput = {
  memberId?: string;
}

export type DeleteStudentOutput = Record<string, unknown>;

export type DescribeStudentInput = {
  memberId?: string;
  extra?: string[];
}

export type DescribeStudentOutput = {
  student?: Student;
}

export type ListStudentsInput = {
  offset?: number;
  size?: number;
  search?: string;
  filters?: ListStudentsInput_Filter;
  sort?: string;
  order?: string;
  extra?: string[];
}

export type ListStudentsInput_Filter = {
  id?: ExpressionID[];
  memberId?: ExpressionID[];
  groupId?: ExpressionID[];
}

export type ListStudentsOutput = {
  total?: number;
  items?: Student[];
  nextPageCursor?: string;
}

export type WatchStudentInput = {
  memberId?: string;
  extra?: string[];
}

export type WatchStudentOutput = {
  student?: Student;
}

export type JoinCourseInput = Record<string, unknown>;

export type JoinCourseOutput = Record<string, unknown>;

export type DescribeViewerInput = {
  extra?: string[];
}

export type DescribeViewerOutput = {
  student?: Student;
}

export type ListStudentAssignmentsInput = {
  memberId?: string;
  offset?: number;
  size?: number;
  search?: string;
  filters?: ListStudentAssignmentsInput_Filter;
}

export type ListStudentAssignmentsInput_Filter = {
  id?: ExpressionID[];
  moduleId?: ExpressionID[];
}

export type ListStudentAssignmentsOutput = {
  total?: number;
  items?: Assignment[];
}

export type UpdateStudentAssignmentInput = {
  memberId?: string;
  moduleId?: string;
  startAfter?: string;
  completeBefore?: string;
  duration?: number;
  upsolve?: boolean;
}

export type UpdateStudentAssignmentOutput = Record<string, unknown>;

export type DeleteStudentAssignmentInput = {
  memberId?: string;
  moduleId?: string;
}

export type DeleteStudentAssignmentOutput = Record<string, unknown>;

export type ListStudentGradesInput = {
  memberId?: string;
}

export type ListStudentGradesOutput = {
  items?: Module_Progress[];
}

export type ListModuleGradesInput = {
  memberId?: string;
  moduleId?: string;
}

export type ListModuleGradesOutput = {
  items?: Material_Progress[];
}

