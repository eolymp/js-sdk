// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { Template } from "../atlas/code_template"
import { Score } from "../atlas/scoring_score"
import { Statement } from "../atlas/statement"
import { Submission } from "../atlas/submission"
import { Test } from "../atlas/testing_test"
import { Run } from "../playground/run"
import { ExpressionEnum, ExpressionFloat, ExpressionID, ExpressionTimestamp } from "../wellknown/expression"

interface Client {
  call<R, E, O>(verb: string, url: string, args: R, opts?: any): Promise<E>;
}

export class ProblemService {
  private readonly cli: Client;
  private readonly url: string;

  constructor(cli: Client, url: string = 'https://api.eolymp.com') {
    this.cli = cli;
    this.url = url;
  }

  ListStatements(input: ListStatementsInput, opts?: any): Promise<ListStatementsOutput> {
    const path = "/statements";

    return this.cli.call("GET", this.url+path, input, opts);
  }

  ListExamples(input: ListExamplesInput, opts?: any): Promise<ListExamplesOutput> {
    const path = "/examples";

    return this.cli.call("GET", this.url+path, input, opts);
  }

  CreateSubmission(input: CreateSubmissionInput, opts?: any): Promise<CreateSubmissionOutput> {
    const path = "/submissions";

    return this.cli.call("POST", this.url+path, input, opts);
  }

  ListSubmissions(input: ListSubmissionsInput, opts?: any): Promise<ListSubmissionsOutput> {
    const path = "/submissions";

    return this.cli.call("GET", this.url+path, input, opts);
  }

  DescribeSubmission(input: DescribeSubmissionInput, opts?: any): Promise<DescribeSubmissionOutput> {
    const path = "/submissions/"+encodeURIComponent(input.submissionId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.submissionId);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  DescribeScore(input: DescribeScoreInput, opts?: any): Promise<DescribeScoreOutput> {
    const path = "/score";

    return this.cli.call("GET", this.url+path, input, opts);
  }

  LookupCodeTemplate(input: LookupCodeTemplateInput, opts?: any): Promise<LookupCodeTemplateOutput> {
    const path = "/template";

    return this.cli.call("GET", this.url+path, input, opts);
  }

  CreateRun(input: CreateRunInput, opts?: any): Promise<CreateRunOutput> {
    const path = "/runs";

    return this.cli.call("POST", this.url+path, input, opts);
  }

  DescribeRun(input: DescribeRunInput, opts?: any): Promise<DescribeRunOutput> {
    const path = "/runs/"+encodeURIComponent(input.runId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.runId);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  WatchRun(input: WatchRunInput, opts?: any): Promise<WatchRunOutput> {
    const path = "/runs/"+encodeURIComponent(input.runId||'')+"/watch";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.runId);

    return this.cli.call("GET", this.url+path, input, opts);
  }
}

export type ListStatementsInput = Record<string, unknown>;

export type ListStatementsOutput = {
  total?: number;
  items?: Statement[];
}

export type ListExamplesInput = Record<string, unknown>;

export type ListExamplesOutput = {
  examples?: Test[];
}

export type CreateSubmissionInput = {
  problemId?: string;
  runtime?: string;
  source?: string;
}

export type CreateSubmissionOutput = {
  submissionId?: string;
}

export type ListSubmissionsInput = {
  offset?: number;
  size?: number;
  filters?: ListSubmissionsInput_Filter;
}

export type ListSubmissionsInput_Filter = {
  id?: ExpressionID[];
  userId?: ExpressionID[];
  memberId?: ExpressionID[];
  submittedAt?: ExpressionTimestamp[];
  runtime?: ExpressionEnum[];
  status?: ExpressionEnum[];
  score?: ExpressionFloat[];
  percentage?: ExpressionFloat[];
}

export type ListSubmissionsOutput = {
  total?: number;
  items?: Submission[];
}

export type DescribeSubmissionInput = {
  problemId?: string;
  submissionId?: string;
}

export type DescribeSubmissionOutput = {
  submission?: Submission;
}

export type WatchSubmissionInput = {
  problemId?: string;
  submissionId?: string;
}

export type WatchSubmissionOutput = {
  submission?: Submission;
}

export type DescribeScoreInput = {
  memberId?: string;
}

export type DescribeScoreOutput = {
  score?: Score;
}

export type LookupCodeTemplateInput = {
  runtime?: string;
}

export type LookupCodeTemplateOutput = {
  template?: Template;
}

export type CreateRunInput = {
  runtime?: string;
  source?: string;
  inputData?: string;
  inputRef?: string;
}

export type CreateRunOutput = {
  runId?: string;
}

export type DescribeRunInput = {
  runId?: string;
}

export type DescribeRunOutput = {
  run?: Run;
}

export type WatchRunInput = {
  runId?: string;
}

export type WatchRunOutput = {
  run?: Run;
}

