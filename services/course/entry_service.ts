// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { Content } from "../ecm/content"
import { ExpressionID } from "../wellknown/expression"
import { Entry } from "./entry"

interface Client {
  call<R, E, O>(verb: string, url: string, args: R, opts?: any): Promise<E>;
}

export class EntryService {
  private readonly cli: Client;
  private readonly url: string;

  constructor(cli: Client, url: string = 'https://api.eolymp.com') {
    this.cli = cli;
    this.url = url;
  }

  CreateSection(input: CreateSectionInput, opts?: any): Promise<CreateSectionOutput> {
    const path = "/sections";

    return this.cli.call("POST", this.url+path, input, opts);
  }

  UpdateSection(input: UpdateSectionInput, opts?: any): Promise<UpdateSectionOutput> {
    const path = "/sections/"+encodeURIComponent(input.entryId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.entryId);

    return this.cli.call("PUT", this.url+path, input, opts);
  }

  CreateDocument(input: CreateDocumentInput, opts?: any): Promise<CreateDocumentOutput> {
    const path = "/documents";

    return this.cli.call("POST", this.url+path, input, opts);
  }

  UpdateDocument(input: UpdateDocumentInput, opts?: any): Promise<UpdateDocumentOutput> {
    const path = "/documents/"+encodeURIComponent(input.entryId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.entryId);

    return this.cli.call("PUT", this.url+path, input, opts);
  }

  RenameEntry(input: RenameEntryInput, opts?: any): Promise<RenameEntryOutput> {
    const path = "/entries/"+encodeURIComponent(input.entryId||'')+"/title";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.entryId);

    return this.cli.call("PUT", this.url+path, input, opts);
  }

  DeleteEntry(input: DeleteEntryInput, opts?: any): Promise<DeleteEntryOutput> {
    const path = "/entries/"+encodeURIComponent(input.entryId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.entryId);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }

  DescribeEntry(input: DescribeEntryInput, opts?: any): Promise<DescribeEntryOutput> {
    const path = "/entries/"+encodeURIComponent(input.entryId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.entryId);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  ListEntries(input: ListEntriesInput, opts?: any): Promise<ListEntriesOutput> {
    const path = "/entries";

    return this.cli.call("GET", this.url+path, input, opts);
  }
}

export type CreateSectionInput = {
  parentId?: string;
  title?: string;
  description?: Content;
}

export type CreateSectionOutput = {
  entryId?: string;
}

export type UpdateSectionInput = {
  entryId?: string;
  parentId?: string;
  title?: string;
  description?: Content;
}

export type UpdateSectionOutput = Record<string, unknown>;

export type CreateDocumentInput = {
  parentId?: string;
  title?: string;
  document?: Content;
}

export type CreateDocumentOutput = {
  entryId?: string;
}

export type UpdateDocumentInput = {
  entryId?: string;
  parentId?: string;
  title?: string;
  document?: Content;
}

export type UpdateDocumentOutput = Record<string, unknown>;

export type RenameEntryInput = {
  entryId?: string;
  title?: string;
}

export type RenameEntryOutput = Record<string, unknown>;

export type DeleteEntryInput = {
  entryId?: string;
}

export type DeleteEntryOutput = Record<string, unknown>;

export type DescribeEntryInput = {
  entryId?: string;
}

export type DescribeEntryOutput = {
  entry?: Entry;
}

export type ListEntriesInput = {
  offset?: number;
  size?: number;
  filters?: ListEntriesInput_Filter;
  sort?: string;
  order?: string;
}

export type ListEntriesInput_Filter = {
  query?: string;
  id?: ExpressionID[];
  parentId?: ExpressionID[];
}

export type ListEntriesOutput = {
  total?: number;
  items?: Entry[];
}

