// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { ExpressionID } from "../wellknown/expression"
import { Course } from "./course"

interface Client {
  call<R, E, O>(verb: string, url: string, args: R, opts?: any): Promise<E>;
}

export class CourseService {
  private readonly cli: Client;
  private readonly url: string;

  constructor(cli: Client, url: string = 'https://api.eolymp.com') {
    this.cli = cli;
    this.url = url;
  }

  CreateCourse(input: CreateCourseInput, opts?: any): Promise<CreateCourseOutput> {
    const path = "/courses";

    return this.cli.call("PUT", this.url+path, input, opts);
  }

  UpdateCourse(input: UpdateCourseInput, opts?: any): Promise<UpdateCourseOutput> {
    const path = "/courses/"+encodeURIComponent(input.courseId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.courseId);

    return this.cli.call("PUT", this.url+path, input, opts);
  }

  DeleteCourse(input: DeleteCourseInput, opts?: any): Promise<DeleteCourseOutput> {
    const path = "/courses/"+encodeURIComponent(input.courseId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.courseId);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }

  DescribeCourse(input: DescribeCourseInput, opts?: any): Promise<DescribeCourseOutput> {
    const path = "/courses/"+encodeURIComponent(input.courseId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.courseId);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  ListCourses(input: ListCoursesInput, opts?: any): Promise<ListCoursesOutput> {
    const path = "/courses";

    return this.cli.call("GET", this.url+path, input, opts);
  }
}

export type ListCoursesInput = {
  offset?: number;
  size?: number;
  filters?: ListCoursesInput_Filter;
  sort?: string;
  order?: string;
}

export type ListCoursesInput_Filter = {
  query?: string;
  id?: ExpressionID[];
}

export type ListCoursesOutput = {
  total?: number;
  items?: Course[];
}

export type DescribeCourseInput = {
  courseId?: string;
}

export type DescribeCourseOutput = {
  course?: Course;
}

export type CreateCourseInput = {
  course?: Course;
}

export type CreateCourseOutput = {
  courseId?: string;
}

export type UpdateCourseInput = {
  patch?: string[];
  courseId?: string;
  course?: Course;
}

export type UpdateCourseOutput = Record<string, unknown>;

export type DeleteCourseInput = {
  courseId?: string;
}

export type DeleteCourseOutput = Record<string, unknown>;

