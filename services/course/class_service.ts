// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { ExpressionID } from "../wellknown/expression"
import { Assignment } from "./assignment"
import { Class } from "./class"

interface Client {
  call<R, E, O>(verb: string, url: string, args: R, opts?: any): Promise<E>;
}

export class ClassService {
  private readonly cli: Client;
  private readonly url: string;

  constructor(cli: Client, url: string = 'https://api.eolymp.com') {
    this.cli = cli;
    this.url = url;
  }

  CreateClass(input: CreateClassInput, opts?: any): Promise<CreateClassOutput> {
    const path = "/classes";

    return this.cli.call("POST", this.url+path, input, opts);
  }

  UpdateClass(input: UpdateClassInput, opts?: any): Promise<UpdateClassOutput> {
    const path = "/classes/"+encodeURIComponent(input.groupId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.groupId);

    return this.cli.call("POST", this.url+path, input, opts);
  }

  DeleteClass(input: DeleteClassInput, opts?: any): Promise<DeleteClassOutput> {
    const path = "/classes/"+encodeURIComponent(input.groupId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.groupId);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }

  DescribeClass(input: DescribeClassInput, opts?: any): Promise<DescribeClassOutput> {
    const path = "/classes/"+encodeURIComponent(input.groupId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.groupId);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  ListClasses(input: ListClassesInput, opts?: any): Promise<ListClassesOutput> {
    const path = "/classes";

    return this.cli.call("GET", this.url+path, input, opts);
  }

  ListClassAssignments(input: ListClassAssignmentsInput, opts?: any): Promise<ListClassAssignmentsOutput> {
    const path = "/classes/"+encodeURIComponent(input.groupId||'')+"/assignments";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.groupId);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  UpdateClassAssignment(input: UpdateClassAssignmentInput, opts?: any): Promise<UpdateClassAssignmentOutput> {
    const path = "/classes/"+encodeURIComponent(input.groupId||'')+"/assignments";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.groupId);

    return this.cli.call("POST", this.url+path, input, opts);
  }

  DeleteClassAssignment(input: DeleteClassAssignmentInput, opts?: any): Promise<DeleteClassAssignmentOutput> {
    const path = "/classes/"+encodeURIComponent(input.groupId||'')+"/assignments";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.groupId);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }
}

export type CreateClassInput = {
  class?: Class;
}

export type CreateClassOutput = {
  classId?: string;
}

export type UpdateClassInput = {
  patch?: string[];
  groupId?: string;
  class?: Class;
}

export type UpdateClassOutput = Record<string, unknown>;

export type DeleteClassInput = {
  groupId?: string;
}

export type DeleteClassOutput = Record<string, unknown>;

export type DescribeClassInput = {
  groupId?: string;
}

export type DescribeClassOutput = {
  class?: Class;
}

export type ListClassesInput = {
  offset?: number;
  size?: number;
  filters?: ListClassesInput_Filter;
  sort?: string;
  order?: string;
}

export type ListClassesInput_Filter = {
  query?: string;
  id?: ExpressionID[];
  groupId?: ExpressionID[];
  memberId?: ExpressionID[];
}

export type ListClassesOutput = {
  total?: number;
  items?: Class[];
}

export type ListClassAssignmentsInput = {
  groupId?: string;
  offset?: number;
  size?: number;
  filters?: ListClassAssignmentsInput_Filter;
}

export type ListClassAssignmentsInput_Filter = {
  query?: string;
  id?: ExpressionID[];
  moduleId?: ExpressionID[];
}

export type ListClassAssignmentsOutput = {
  total?: number;
  items?: Assignment[];
}

export type UpdateClassAssignmentInput = {
  groupId?: string;
  moduleId?: string;
  startAfter?: string;
  completeBefore?: string;
  duration?: number;
  upsolve?: boolean;
}

export type UpdateClassAssignmentOutput = Record<string, unknown>;

export type DeleteClassAssignmentInput = {
  groupId?: string;
  moduleId?: string;
}

export type DeleteClassAssignmentOutput = Record<string, unknown>;

