// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { ExpressionEnum, ExpressionID } from "../wellknown/expression"
import { Job } from "./job"

interface Client {
  call<R, E, O>(verb: string, url: string, args: R, opts?: any): Promise<E>;
}

export class WorkerService {
  private readonly cli: Client;
  private readonly url: string;

  constructor(cli: Client, url: string = 'https://api.eolymp.com') {
    this.cli = cli;
    this.url = url;
  }

  DescribeJob(input: DescribeJobInput, opts?: any): Promise<DescribeJobOutput> {
    const path = "/jobs/"+encodeURIComponent(input.jobId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.jobId);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  ListJobs(input: ListJobsInput, opts?: any): Promise<ListJobsOutput> {
    const path = "/jobs";

    return this.cli.call("GET", this.url+path, input, opts);
  }
}

export type CreateJobInput = {
  type?: string;
  inputs?: Record<string, string>;
}

export type CreateJobOutput = {
  jobId?: string;
}

export type UpdateJobInput = {
  patch?: string[];
  jobId?: string;
  job?: Job;
}

export type UpdateJobOutput = Record<string, unknown>;

export type DescribeJobInput = {
  jobId?: string;
}

export type DescribeJobOutput = {
  job?: Job;
}

export type ListJobsInput = {
  offset?: number;
  size?: number;
  filters?: ListJobsInput_Filter;
}

export type ListJobsInput_Filter = {
  id?: ExpressionID[];
  type?: ExpressionEnum[];
  status?: ExpressionEnum[];
}

export type ListJobsOutput = {
  total?: number;
  items?: Job[];
}

