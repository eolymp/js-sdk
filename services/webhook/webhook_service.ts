// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { Webhook } from "./webhook"

interface Client {
  call<R, E, O>(verb: string, url: string, args: R, opts?: any): Promise<E>;
}

export class WebhookService {
  private readonly cli: Client;
  private readonly url: string;

  constructor(cli: Client, url: string = 'https://api.eolymp.com') {
    this.cli = cli;
    this.url = url;
  }

  CreateWebhook(input: CreateWebhookInput, opts?: any): Promise<CreateWebhookOutput> {
    const path = "/webhooks";

    return this.cli.call("POST", this.url+path, input, opts);
  }

  UpdateWebhook(input: UpdateWebhookInput, opts?: any): Promise<UpdateWebhookOutput> {
    const path = "/webhooks/"+encodeURIComponent(input.webhookId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.webhookId);

    return this.cli.call("POST", this.url+path, input, opts);
  }

  DeleteWebhook(input: DeleteWebhookInput, opts?: any): Promise<DeleteWebhookOutput> {
    const path = "/webhooks/"+encodeURIComponent(input.webhookId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.webhookId);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }

  DescribeWebhook(input: DescribeWebhookInput, opts?: any): Promise<DescribeWebhookOutput> {
    const path = "/webhooks/"+encodeURIComponent(input.webhookId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.webhookId);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  ListWebhooks(input: ListWebhooksInput, opts?: any): Promise<ListWebhooksOutput> {
    const path = "/webhooks";

    return this.cli.call("GET", this.url+path, input, opts);
  }

  TestWebhook(input: TestWebhookInput, opts?: any): Promise<TestWebhookOutput> {
    const path = "/webhooks/"+encodeURIComponent(input.webhookId||'')+"/test";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.webhookId);

    return this.cli.call("POST", this.url+path, input, opts);
  }
}

export type CreateWebhookInput = {
  webhook?: Webhook;
}

export type CreateWebhookOutput = {
  webhookId?: string;
}

export type UpdateWebhookInput = {
  patch?: string[];
  webhookId?: string;
  webhook?: Webhook;
}

export type UpdateWebhookOutput = Record<string, unknown>;

export type DeleteWebhookInput = {
  webhookId?: string;
}

export type DeleteWebhookOutput = Record<string, unknown>;

export type DescribeWebhookInput = {
  webhookId?: string;
}

export type DescribeWebhookOutput = {
  webhook?: Webhook;
}

export type ListWebhooksInput = {
  size?: number;
  offset?: number;
}

export type ListWebhooksOutput = {
  total?: number;
  items?: Webhook[];
}

export type TestWebhookInput = {
  webhookId?: string;
}

export type TestWebhookOutput = {
  status?: number;
  response?: string;
}

