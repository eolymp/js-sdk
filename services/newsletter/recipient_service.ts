// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { Recipient } from "./recipient"

interface Client {
  call<R, E, O>(verb: string, url: string, args: R, opts?: any): Promise<E>;
}

export class RecipientService {
  private readonly cli: Client;
  private readonly url: string;

  constructor(cli: Client, url: string = 'https://api.eolymp.com') {
    this.cli = cli;
    this.url = url;
  }

  DescribeRecipient(input: DescribeRecipientInput, opts?: any): Promise<DescribeRecipientOutput> {
    const path = "/recipients/"+encodeURIComponent(input.recipientId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.recipientId);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  ImportRecipients(input: ImportRecipientsInput, opts?: any): Promise<ImportRecipientsOutput> {
    const path = "/imports/recipients";

    return this.cli.call("POST", this.url+path, input, opts);
  }

  ListRecipients(input: ListRecipientsInput, opts?: any): Promise<ListRecipientsOutput> {
    const path = "/recipients";

    return this.cli.call("GET", this.url+path, input, opts);
  }

  CreateRecipient(input: CreateRecipientInput, opts?: any): Promise<CreateRecipientOutput> {
    const path = "/recipients";

    return this.cli.call("POST", this.url+path, input, opts);
  }

  RemoveRecipient(input: RemoveRecipientInput, opts?: any): Promise<RemoveRecipientOutput> {
    const path = "/recipients/"+encodeURIComponent(input.recipientId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.recipientId);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }
}

export type CreateRecipientInput = {
  recipient?: Recipient;
}

export type CreateRecipientOutput = {
  recipientId?: string;
}

export type ImportRecipientsInput = {
  groupId?: string;
}

export type ImportRecipientsOutput = {
  importedTotal?: string;
}

export type RemoveRecipientInput = {
  recipientId?: string;
}

export type RemoveRecipientOutput = Record<string, unknown>;

export type ListRecipientsInput = {
  offset?: number;
  size?: number;
}

export type ListRecipientsOutput = {
  total?: number;
  items?: Recipient[];
}

export type DescribeRecipientInput = {
  recipientId?: string;
}

export type DescribeRecipientOutput = {
  recipient?: Recipient;
}

