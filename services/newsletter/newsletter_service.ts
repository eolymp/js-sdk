// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { ExpressionEnum, ExpressionID } from "../wellknown/expression"
import { Newsletter, Newsletter_Translation } from "./newsletter"

interface Client {
  call<R, E, O>(verb: string, url: string, args: R, opts?: any): Promise<E>;
}

export class NewsletterService {
  private readonly cli: Client;
  private readonly url: string;

  constructor(cli: Client, url: string = 'https://api.eolymp.com') {
    this.cli = cli;
    this.url = url;
  }

  DescribeNewsletter(input: DescribeNewsletterInput, opts?: any): Promise<DescribeNewsletterOutput> {
    const path = "/newsletter/"+encodeURIComponent(input.newsletterId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.newsletterId);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  ListNewsletters(input: ListNewslettersInput, opts?: any): Promise<ListNewslettersOutput> {
    const path = "/newsletter";

    return this.cli.call("GET", this.url+path, input, opts);
  }

  CreateNewsletter(input: CreateNewsletterInput, opts?: any): Promise<CreateNewsletterOutput> {
    const path = "/newsletter";

    return this.cli.call("POST", this.url+path, input, opts);
  }

  UpdateNewsletter(input: UpdateNewsletterInput, opts?: any): Promise<UpdateNewsletterOutput> {
    const path = "/newsletter/"+encodeURIComponent(input.newsletterId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.newsletterId);

    return this.cli.call("PUT", this.url+path, input, opts);
  }

  DeleteNewsletter(input: DeleteNewsletterInput, opts?: any): Promise<DeleteNewsletterOutput> {
    const path = "/newsletter/"+encodeURIComponent(input.newsletterId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.newsletterId);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }

  SendNewsletter(input: SendNewsletterInput, opts?: any): Promise<SendNewsletterOutput> {
    const path = "/newsletter/"+encodeURIComponent(input.newsletterId||'')+"/send";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.newsletterId);

    return this.cli.call("POST", this.url+path, input, opts);
  }

  TestNewsletter(input: TestNewsletterInput, opts?: any): Promise<TestNewsletterOutput> {
    const path = "/newsletter/"+encodeURIComponent(input.newsletterId||'')+"/test";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.newsletterId);

    return this.cli.call("POST", this.url+path, input, opts);
  }

  DescribeNewsletterTranslation(input: DescribeNewsletterTranslationInput, opts?: any): Promise<DescribeNewsletterTranslationOutput> {
    const path = "/newsletter/"+encodeURIComponent(input.newsletterId||'')+"/translations/"+encodeURIComponent(input.translationId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.newsletterId);
    delete(input.translationId);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  ListNewsletterTranslations(input: ListNewsletterTranslationsInput, opts?: any): Promise<ListNewsletterTranslationsOutput> {
    const path = "/newsletter/"+encodeURIComponent(input.newsletterId||'')+"/translations";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.newsletterId);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  CreateNewsletterTranslation(input: CreateNewsletterTranslationInput, opts?: any): Promise<CreateNewsletterTranslationOutput> {
    const path = "/newsletter/"+encodeURIComponent(input.newsletterId||'')+"/translations";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.newsletterId);

    return this.cli.call("POST", this.url+path, input, opts);
  }

  UpdateNewsletterTranslation(input: UpdateNewsletterTranslationInput, opts?: any): Promise<UpdateNewsletterTranslationOutput> {
    const path = "/newsletter/"+encodeURIComponent(input.newsletterId||'')+"/translations/"+encodeURIComponent(input.translationId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.newsletterId);
    delete(input.translationId);

    return this.cli.call("PUT", this.url+path, input, opts);
  }

  DeleteNewsletterTranslation(input: DeleteNewsletterTranslationInput, opts?: any): Promise<DeleteNewsletterTranslationOutput> {
    const path = "/newsletter/"+encodeURIComponent(input.newsletterId||'')+"/translations/"+encodeURIComponent(input.translationId||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.newsletterId);
    delete(input.translationId);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }
}

export type DescribeNewsletterInput = {
  newsletterId?: string;
}

export type DescribeNewsletterOutput = {
  newsletter?: Newsletter;
}

export type ListNewslettersInput = {
  offset?: number;
  size?: number;
}

export type ListNewslettersOutput = {
  total?: number;
  items?: Newsletter[];
}

export type CreateNewsletterInput = {
  newsletter?: Newsletter;
}

export type CreateNewsletterOutput = {
  newsletterId?: string;
}

export type UpdateNewsletterInput = {
  patch?: string[];
  newsletterId?: string;
  newsletter?: Newsletter;
}

export type UpdateNewsletterOutput = Record<string, unknown>;

export type DeleteNewsletterInput = {
  newsletterId?: string;
}

export type DeleteNewsletterOutput = Record<string, unknown>;

export type SendNewsletterInput = {
  newsletterId?: string;
}

export type SendNewsletterOutput = Record<string, unknown>;

export type TestNewsletterInput = {
  newsletterId?: string;
  email?: string;
  locale?: string;
}

export type TestNewsletterOutput = Record<string, unknown>;

export type DescribeNewsletterTranslationInput = {
  newsletterId?: string;
  translationId?: string;
}

export type DescribeNewsletterTranslationOutput = {
  translation?: Newsletter_Translation;
}

export type ListNewsletterTranslationsInput = {
  newsletterId?: string;
  offset?: number;
  size?: number;
  filters?: ListNewsletterTranslationsInput_Filter;
}

export type ListNewsletterTranslationsInput_Filter = {
  query?: string;
  id?: ExpressionID[];
  locale?: ExpressionEnum[];
}

export type ListNewsletterTranslationsOutput = {
  total?: number;
  items?: Newsletter_Translation[];
}

export type CreateNewsletterTranslationInput = {
  newsletterId?: string;
  translation?: Newsletter_Translation;
}

export type CreateNewsletterTranslationOutput = {
  translationId?: string;
}

export type UpdateNewsletterTranslationInput = {
  patch?: string[];
  newsletterId?: string;
  translationId?: string;
  translation?: Newsletter_Translation;
}

export type UpdateNewsletterTranslationOutput = Record<string, unknown>;

export type DeleteNewsletterTranslationInput = {
  newsletterId?: string;
  translationId?: string;
}

export type DeleteNewsletterTranslationOutput = Record<string, unknown>;

