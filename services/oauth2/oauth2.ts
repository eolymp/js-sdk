// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.


interface Client {
  call<R, E, O>(verb: string, url: string, args: R, opts: O): Promise<E>;
}

export class OAuth2 {
  private readonly cli: Client;
  private readonly url: string;

  constructor(cli: Client, url: string = 'https://api.eolymp.com') {
    this.cli = cli;
    this.url = url;
  }
}

export type TokenInput = {
  grantType?: string;
  username?: string;
  password?: string;
  clientId?: string;
  clientSecret?: string;
  code?: string;
  codeVerifier?: string;
  scope?: string;
  refreshToken?: string;
  redirectUri?: string;
}

export type TokenOutput = {
  accessToken?: string;
  tokenType?: string;
  expiresIn?: number;
  refreshToken?: string;
  scope?: string;
  idToken?: string;
}

export type AuthorizeInput = {
  clientId?: string;
  codeChallenge?: string;
  codeChallengeMethod?: string;
  redirectUri?: string;
  responseType?: string;
  scope?: string;
  state?: string;
}

export type AuthorizeOutput = {
  redirectUri?: string;
}

export type CallbackInput = {
  code?: string;
  state?: string;
}

export type CallbackOutput = {
  redirectUri?: string;
}

export type UserInfoInput = Record<string, unknown>;

export type UserInfoOutput = {
  issuer?: string;
  subject?: string;
  name?: string;
  givenName?: string;
  familyName?: string;
  middleName?: string;
  nickname?: string;
  picture?: string;
  email?: string;
  emailVerified?: boolean;
  locale?: string;
  profile?: string;
}

export type IntrospectInput = {
  token?: string;
}

export type IntrospectOutput = {
  active?: boolean;
  scope?: string;
  exp?: string;
  subject?: string;
  audience?: string;
  issuer?: string;
  name?: string;
  nickname?: string;
  picture?: string;
  email?: string;
  emailVerified?: boolean;
  locale?: string;
}

export type AuthCodeInput = {
  clientId?: string;
  codeChallenge?: string;
  codeChallengeMethod?: string;
  redirectUri?: string;
  responseType?: string;
  scope?: string;
  state?: string;
}

export type AuthCodeOutput = {
  authorizationCode?: string;
  redirectUri?: string;
}

export type RevokeInput = {
  token?: string;
}

export type RevokeOutput = Record<string, unknown>;

