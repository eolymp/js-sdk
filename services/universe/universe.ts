// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { ExpressionBool, ExpressionEnum, ExpressionID, ExpressionString } from "../wellknown/expression"
import { Permission } from "./permission"
import { Space } from "./space"

interface Client {
  call<R, E>(method: string, args: R): Promise<E>;
}

export class Universe {
  private readonly cli: Client;

  constructor(cli: Client) {
    this.cli = cli;
  }

  CreateSpace(input: CreateSpaceInput): Promise<CreateSpaceOutput> {
    return this.cli.call("eolymp.universe.Universe/CreateSpace", input);
  }

  UpdateSpace(input: UpdateSpaceInput): Promise<UpdateSpaceOutput> {
    return this.cli.call("eolymp.universe.Universe/UpdateSpace", input);
  }

  DeleteSpace(input: DeleteSpaceInput): Promise<DeleteSpaceOutput> {
    return this.cli.call("eolymp.universe.Universe/DeleteSpace", input);
  }

  LookupSpace(input: LookupSpaceInput): Promise<LookupSpaceOutput> {
    return this.cli.call("eolymp.universe.Universe/LookupSpace", input);
  }

  DescribeSpace(input: DescribeSpaceInput): Promise<DescribeSpaceOutput> {
    return this.cli.call("eolymp.universe.Universe/DescribeSpace", input);
  }

  ListSpaces(input: ListSpacesInput): Promise<ListSpacesOutput> {
    return this.cli.call("eolymp.universe.Universe/ListSpaces", input);
  }

  GrantPermission(input: GrantPermissionInput): Promise<GrantPermissionOutput> {
    return this.cli.call("eolymp.universe.Universe/GrantPermission", input);
  }

  RevokePermission(input: RevokePermissionInput): Promise<RevokePermissionOutput> {
    return this.cli.call("eolymp.universe.Universe/RevokePermission", input);
  }

  DescribePermission(input: DescribePermissionInput): Promise<DescribePermissionOutput> {
    return this.cli.call("eolymp.universe.Universe/DescribePermission", input);
  }

  IntrospectPermission(input: IntrospectPermissionInput): Promise<IntrospectPermissionOutput> {
    return this.cli.call("eolymp.universe.Universe/IntrospectPermission", input);
  }

  ListPermissions(input: ListPermissionsInput): Promise<ListPermissionsOutput> {
    return this.cli.call("eolymp.universe.Universe/ListPermissions", input);
  }
}

export type CreateSpaceInput = {
  space?: Space;
}

export type CreateSpaceOutput = {
  spaceId?: string;
}

export type UpdateSpaceInput = {
  spaceId?: string;
  space?: Space;
}

export type UpdateSpaceOutput = Record<string, unknown>;

export type DeleteSpaceInput = {
  spaceId?: string;
}

export type DeleteSpaceOutput = Record<string, unknown>;

export type LookupSpaceInput = {
  key?: string;
}

export type LookupSpaceOutput = {
  space?: Space;
}

export type DescribeSpaceInput = {
  spaceId?: string;
}

export type DescribeSpaceOutput = {
  space?: Space;
}

export type ListSpacesInput = {
  offset?: number;
  size?: number;
  filters?: ListSpacesInput_Filter;
}

export type ListSpacesInput_Filter = {
  id?: ExpressionID[];
  key?: ExpressionID[];
  name?: ExpressionString[];
  own?: ExpressionBool[];
  member?: ExpressionBool[];
}

export type ListSpacesOutput = {
  total?: number;
  items?: Space[];
}

export type GrantPermissionInput = {
  spaceId?: string;
  role?: string;
  userId?: string;
}

export type GrantPermissionOutput = Record<string, unknown>;

export type RevokePermissionInput = {
  spaceId?: string;
  userId?: string;
}

export type RevokePermissionOutput = Record<string, unknown>;

export type DescribePermissionInput = {
  spaceId?: string;
  userId?: string;
}

export type DescribePermissionOutput = {
  permission?: Permission;
}

export type IntrospectPermissionInput = {
  spaceId?: string;
}

export type IntrospectPermissionOutput = {
  permission?: Permission;
}

export type ListPermissionsInput = {
  spaceId?: string;
  offset?: number;
  size?: number;
  filters?: ListPermissionsInput_Filter;
}

export type ListPermissionsInput_Filter = {
  id?: ExpressionID[];
  userId?: ExpressionID[];
  role?: ExpressionEnum[];
}

export type ListPermissionsOutput = {
  total?: number;
  items?: Permission[];
}

