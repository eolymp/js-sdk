// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { ExpressionEnum, ExpressionID, ExpressionString } from "../wellknown/expression"
import { Member } from "./member"
import { Space } from "./space"

interface Client {
  call<R, E>(method: string, args: R): Promise<E>;
}

export class Universe {
  private readonly cli: Client;

  constructor(cli: Client) {
    this.cli = cli;
  }

  CreateSpace(input: CreateSpaceInput): Promise<CreateSpaceOutput> {
    return this.cli.call("eolymp.universe.Universe/CreateSpace", input);
  }

  UpdateSpace(input: UpdateSpaceInput): Promise<UpdateSpaceOutput> {
    return this.cli.call("eolymp.universe.Universe/UpdateSpace", input);
  }

  DeleteSpace(input: DeleteSpaceInput): Promise<DeleteSpaceOutput> {
    return this.cli.call("eolymp.universe.Universe/DeleteSpace", input);
  }

  LookupSpace(input: LookupSpaceInput): Promise<LookupSpaceOutput> {
    return this.cli.call("eolymp.universe.Universe/LookupSpace", input);
  }

  DescribeSpace(input: DescribeSpaceInput): Promise<DescribeSpaceOutput> {
    return this.cli.call("eolymp.universe.Universe/DescribeSpace", input);
  }

  ListSpaces(input: ListSpacesInput): Promise<ListSpacesOutput> {
    return this.cli.call("eolymp.universe.Universe/ListSpaces", input);
  }

  AddMember(input: AddMemberInput): Promise<AddMemberOutput> {
    return this.cli.call("eolymp.universe.Universe/AddMember", input);
  }

  UpdateMember(input: UpdateMemberInput): Promise<UpdateMemberOutput> {
    return this.cli.call("eolymp.universe.Universe/UpdateMember", input);
  }

  RemoveMember(input: RemoveMemberInput): Promise<RemoveMemberOutput> {
    return this.cli.call("eolymp.universe.Universe/RemoveMember", input);
  }

  DescribeMember(input: DescribeMemberInput): Promise<DescribeMemberOutput> {
    return this.cli.call("eolymp.universe.Universe/DescribeMember", input);
  }

  IntrospectMember(input: IntrospectMemberInput): Promise<IntrospectMemberOutput> {
    return this.cli.call("eolymp.universe.Universe/IntrospectMember", input);
  }

  ListMembers(input: ListMembersInput): Promise<ListMembersOutput> {
    return this.cli.call("eolymp.universe.Universe/ListMembers", input);
  }
}

export type CreateSpaceInput = {
  space?: Space;
}

export type CreateSpaceOutput = {
  spaceId?: string;
}

export type UpdateSpaceInput = {
  spaceId?: string;
  space?: Space;
}

export type UpdateSpaceOutput = Record<string, unknown>;

export type DeleteSpaceInput = {
  spaceId?: string;
}

export type DeleteSpaceOutput = Record<string, unknown>;

export type LookupSpaceInput = {
  key?: string;
}

export type LookupSpaceOutput = {
  space?: Space;
}

export type DescribeSpaceInput = {
  spaceId?: string;
}

export type DescribeSpaceOutput = {
  space?: Space;
}

export type ListSpacesInput = {
  offset?: number;
  size?: number;
  filters?: ListSpacesInput_Filter;
}

export type ListSpacesInput_Filter = {
  id?: ExpressionID[];
  key?: ExpressionID[];
  name?: ExpressionString[];
}

export type ListSpacesOutput = {
  total?: number;
  items?: Space[];
}

export type AddMemberInput = {
  spaceId?: string;
  userId?: string;
  role?: string;
}

export type AddMemberOutput = {
  memberId?: string;
}

export type UpdateMemberInput = {
  memberId?: string;
  role?: string;
}

export type UpdateMemberOutput = Record<string, unknown>;

export type RemoveMemberInput = {
  memberId?: string;
}

export type RemoveMemberOutput = Record<string, unknown>;

export type DescribeMemberInput = {
  memberId?: string;
}

export type DescribeMemberOutput = {
  member?: Member;
}

export type IntrospectMemberInput = {
  spaceId?: string;
}

export type IntrospectMemberOutput = {
  member?: Member;
}

export type ListMembersInput = {
  spaceId?: string;
  offset?: number;
  size?: number;
  filters?: ListMembersInput_Filter;
}

export type ListMembersInput_Filter = {
  id?: ExpressionID[];
  userId?: ExpressionID[];
  role?: ExpressionEnum[];
  username?: ExpressionString[];
}

export type ListMembersOutput = {
  total?: number;
  items?: Member[];
}

