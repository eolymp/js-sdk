// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { Notification } from "./notification"

interface Client {
  call<R, E, O>(verb: string, url: string, args: R, opts?: any): Promise<E>;
}

export class NotificationService {
  private readonly cli: Client;
  private readonly url: string;

  constructor(cli: Client, url: string = 'https://api.eolymp.com') {
    this.cli = cli;
    this.url = url;
  }

  DescribeNotification(input: DescribeNotificationInput, opts?: any): Promise<DescribeNotificationOutput> {
    const path = "/notifications/"+encodeURIComponent(input.notification||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.notification);

    return this.cli.call("GET", this.url+path, input, opts);
  }

  ReadNotification(input: ReadNotificationInput, opts?: any): Promise<ReadNotificationOutput> {
    const path = "/notifications/"+encodeURIComponent(input.notification||'')+"/read";

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.notification);

    return this.cli.call("POST", this.url+path, input, opts);
  }

  DeleteNotification(input: DeleteNotificationInput, opts?: any): Promise<DeleteNotificationOutput> {
    const path = "/notifications/"+encodeURIComponent(input.notification||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.notification);

    return this.cli.call("DELETE", this.url+path, input, opts);
  }

  ListNotifications(input: ListNotificationsInput, opts?: any): Promise<ListNotificationsOutput> {
    const path = "/notifications";

    return this.cli.call("GET", this.url+path, input, opts);
  }

  DescribeNotificationConfig(input: DescribeNotificationConfigInput, opts?: any): Promise<DescribeNotificationConfigOutput> {
    const path = "/configs/notifications";

    return this.cli.call("GET", this.url+path, input, opts);
  }

  UpdateNotificationConfig(input: UpdateNotificationConfigInput, opts?: any): Promise<UpdateNotificationConfigOutput> {
    const path = "/configs/notifications";

    return this.cli.call("POST", this.url+path, input, opts);
  }
}

export type CreateNotificationInput = {
  notification?: Notification;
}

export type CreateNotificationOutput = Record<string, unknown>;

export type DescribeNotificationInput = {
  notificationId?: string;
}

export type DescribeNotificationOutput = {
  notification?: Notification;
}

export type ReadNotificationInput = {
  notificationId?: string;
}

export type ReadNotificationOutput = Record<string, unknown>;

export type DeleteNotificationInput = {
  notificationId?: string;
}

export type DeleteNotificationOutput = Record<string, unknown>;

export type ListNotificationsInput = {
  size?: number;
  after?: string;
}

export type ListNotificationsOutput = {
  total?: number;
  items?: Notification[];
}

export type DescribeNotificationConfigInput = Record<string, unknown>;

export type DescribeNotificationConfigOutput = {
  emailSubscriptions?: string[];
}

export type UpdateNotificationConfigInput = {
  emailSubscriptions?: string[];
}

export type UpdateNotificationConfigOutput = Record<string, unknown>;

