// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { Billing_Information } from "./billing"

interface Client {
  call<R, E, O>(verb: string, url: string, args: R, opts?: any): Promise<E>;
}

export class BillingService {
  private readonly cli: Client;
  private readonly url: string;

  constructor(cli: Client, url: string = 'https://api.eolymp.com') {
    this.cli = cli;
    this.url = url;
  }

  DescribeBillingInformation(input: DescribeBillingInformationInput, opts?: any): Promise<DescribeBillingInformationOutput> {
    const path = "/billing/info";

    return this.cli.call("GET", this.url+path, input, opts);
  }

  UpdateBillingInformation(input: UpdateBillingInformationInput, opts?: any): Promise<UpdateBillingInformationOutput> {
    const path = "/billing/info";

    return this.cli.call("PUT", this.url+path, input, opts);
  }

  DescribeCurrentPlan(input: DescribeCurrentPlanInput, opts?: any): Promise<DescribeCurrentPlanOutput> {
    const path = "/billing/plan";

    return this.cli.call("GET", this.url+path, input, opts);
  }

  UpdateCurrentPlan(input: UpdateCurrentPlanInput, opts?: any): Promise<UpdateCurrentPlanOutput> {
    const path = "/billing/plan";

    return this.cli.call("PUT", this.url+path, input, opts);
  }

  CancelCurrentPlan(input: CancelCurrentPlanInput, opts?: any): Promise<CancelCurrentPlanOutput> {
    const path = "/billing/plan";

    return this.cli.call("DELETE", this.url+path, input, opts);
  }
}

export type DescribeBillingInformationInput = Record<string, unknown>;

export type DescribeBillingInformationOutput = {
  info?: Billing_Information;
}

export type UpdateBillingInformationInput = {
  info?: Billing_Information;
}

export type UpdateBillingInformationOutput = Record<string, unknown>;

export type DescribeCurrentPlanInput = Record<string, unknown>;

export type DescribeCurrentPlanOutput = {
  planId?: string;
  quantity?: number;
  status?: string;
  paymentRecurrence?: string;
  paymentCurrency?: string;
  paymentQuantity?: number;
  paymentUnitAmount?: number;
  paymentTotalAmount?: number;
  createdAt?: string;
  startedAt?: string;
  renewedAt?: string;
  renewsAt?: string;
  cancelAt?: string;
  cancelledAt?: string;
  pausedAt?: string;
}

export type UpdateCurrentPlanInput = {
  planId?: string;
  quantity?: number;
}

export type UpdateCurrentPlanOutput = {
  checkoutUrl?: string;
}

export type CancelCurrentPlanInput = Record<string, unknown>;

export type CancelCurrentPlanOutput = Record<string, unknown>;

