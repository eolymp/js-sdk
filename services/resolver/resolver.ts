// Generated by the protocol buffer compiler. DO NOT EDIT!
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-js-esdk for more details.

import { Contest } from "../judge/contest"
import { Scoreboard } from "../ranker/scoreboard"
import { Space } from "../universe/space"

interface Client {
  call<R, E, O>(verb: string, url: string, args: R, opts: O): Promise<E>;
}

export class Resolver {
  private readonly cli: Client;
  private readonly url: string;

  constructor(cli: Client, url: string = 'https://api.eolymp.com') {
    this.cli = cli;
    this.url = url;
  }

  ResolveName<O>(input: ResolveNameInput, opts?: O): Promise<ResolveNameOutput> {
    const path = "/names/"+encodeURIComponent(input.name||'');

    // Cleanup URL parameters to avoid any ambiguity
    delete(input.name);

    return this.cli.call("GET", this.url+path, input, opts);
  }
}

export type Authorization = Record<string, unknown>;

export type Authorization_OAuth2 = {
  clientId?: string;
  tokenEndpoint?: string;
  authorizeEndpoint?: string;
  userinfoEndpoint?: string;
  signoutEndpoint?: string;
}

export type Record = {
  target?: Record_Target;
}

export type Record_Target = {
  type?: string;
  url?: string;
}

export type ResolveNameInput = {
  name?: string;
}

export type ResolveNameOutput = {
  target?: Record_Target;
  space?: Space;
  contest?: Contest;
  scoreboard?: Scoreboard;
  oauth2?: Authorization_OAuth2;
}

